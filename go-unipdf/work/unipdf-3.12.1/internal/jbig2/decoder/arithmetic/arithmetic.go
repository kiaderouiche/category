//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_d "fmt";_e "github.com/unidoc/unipdf/v3/common";_bb "github.com/unidoc/unipdf/v3/internal/bitwise";_a "io";_g "math";_b "strings";);func (_ea *Decoder )decodeIntBit (_ead *DecoderStats )(int ,error ){_ead .SetIndex (int32 (_ea ._gc ));_abb ,_gdb :=_ea .DecodeBit (_ead );if _gdb !=nil {_e .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gdb );return _abb ,_gdb ;};if _ea ._gc < 256{_ea ._gc =((_ea ._gc <<uint64 (1))|int64 (_abb ))&0x1ff;}else {_ea ._gc =(((_ea ._gc <<uint64 (1)|int64 (_abb ))&511)|256)&0x1ff;};return _abb ,nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_fd _bb .StreamReader ;_c uint8 ;_ge uint64 ;_bc uint32 ;_gc int64 ;_cd int32 ;_fb int32 ;_cb int64 ;};func (_ade *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_dc ,_gf int32 ;_fda ,_ee ,_gd int ;_cc error ;);if stats ==nil {stats =NewStats (512,1);};_ade ._gc =1;_ee ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};_fda ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fda ==1{_fda ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fda ==1{_fda ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fda ==1{_fda ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fda ==1{_fda ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fda ==1{_gd =32;_gf =4436;}else {_gd =12;_gf =340;};}else {_gd =8;_gf =84;};}else {_gd =6;_gf =20;};}else {_gd =4;_gf =4;};}else {_gd =2;_gf =0;};for _ec :=0;_ec < _gd ;_ec ++{_fda ,_cc =_ade .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};_dc =(_dc <<1)|int32 (_fda );};_dc +=_gf ;if _ee ==0{return _dc ,nil ;}else if _ee ==1&&_dc > 0{return -_dc ,nil ;};return _g .MaxInt32 ,nil ;};func (_cg *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_dd int ;_ac =_bd [stats .cx ()][0];_ga =int32 (stats .cx ()););defer func (){_cg ._fb ++}();_cg ._bc -=_ac ;if (_cg ._ge >>16)< uint64 (_ac ){_dd =_cg .lpsExchange (stats ,_ga ,_ac );if _ad :=_cg .renormalize ();_ad !=nil {return 0,_ad ;};}else {_cg ._ge -=uint64 (_ac )<<16;if (_cg ._bc &0x8000)==0{_dd =_cg .mpsExchange (stats ,_ga );if _bf :=_cg .renormalize ();_bf !=nil {return 0,_bf ;};}else {_dd =int (stats .getMps ());};};return _dd ,nil ;};func (_de *Decoder )readByte ()error {if _de ._fd .StreamPosition ()> _de ._cb {if _ ,_ce :=_de ._fd .Seek (-1,_a .SeekCurrent );_ce !=nil {return _ce ;};};_be ,_add :=_de ._fd .ReadByte ();if _add !=nil {return _add ;};_de ._c =_be ;if _de ._c ==0xFF{_bba ,_bfc :=_de ._fd .ReadByte ();if _bfc !=nil {return _bfc ;};if _bba > 0x8F{_de ._ge +=0xFF00;_de ._cd =8;if _ ,_cbb :=_de ._fd .Seek (-2,_a .SeekCurrent );_cbb !=nil {return _cbb ;};}else {_de ._ge +=uint64 (_bba )<<9;_de ._cd =7;};}else {_be ,_add =_de ._fd .ReadByte ();if _add !=nil {return _add ;};_de ._c =_be ;_de ._ge +=uint64 (_de ._c )<<8;_de ._cd =8;};_de ._ge &=0xFFFFFFFFFF;return nil ;};type DecoderStats struct{_ecd int32 ;_eda int32 ;_bfce []byte ;_fdb []byte ;};func (_ed *Decoder )init ()error {_ed ._cb =_ed ._fd .StreamPosition ();_cce ,_cdb :=_ed ._fd .ReadByte ();if _cdb !=nil {_e .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_cdb );return _cdb ;};_ed ._c =_cce ;_ed ._ge =uint64 (_cce )<<16;if _cdb =_ed .readByte ();_cdb !=nil {return _cdb ;};_ed ._ge <<=7;_ed ._cd -=7;_ed ._bc =0x8000;_ed ._fb ++;return nil ;};func (_bbe *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_bbe ._gc =1;var _abf uint64 ;for _abf =0;_abf < codeLen ;_abf ++{stats .SetIndex (int32 (_bbe ._gc ));_ae ,_ccd :=_bbe .DecodeBit (stats );if _ccd !=nil {return 0,_ccd ;};_bbe ._gc =(_bbe ._gc <<1)|int64 (_ae );};_ef :=_bbe ._gc -(1<<codeLen );return _ef ,nil ;};func (_dda *DecoderStats )getMps ()byte {return _dda ._fdb [_dda ._ecd ]};func (_fe *DecoderStats )toggleMps (){_fe ._fdb [_fe ._ecd ]^=1};func (_ced *DecoderStats )cx ()byte {return _ced ._bfce [_ced ._ecd ]};func (_bcf *Decoder )lpsExchange (_eae *DecoderStats ,_fg int32 ,_gfa uint32 )int {_eg :=_eae .getMps ();if _bcf ._bc < _gfa {_eae .setEntry (int (_bd [_fg ][1]));_bcf ._bc =_gfa ;return int (_eg );};if _bd [_fg ][3]==1{_eae .toggleMps ();};_eae .setEntry (int (_bd [_fg ][2]));_bcf ._bc =_gfa ;return int (1-_eg );};func (_bbf *DecoderStats )Reset (){for _db :=0;_db < len (_bbf ._bfce );_db ++{_bbf ._bfce [_db ]=0;_bbf ._fdb [_db ]=0;};};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ecd :index ,_eda :contextSize ,_bfce :make ([]byte ,contextSize ),_fdb :make ([]byte ,contextSize )};};func (_bca *Decoder )mpsExchange (_dg *DecoderStats ,_gdd int32 )int {_edf :=_dg ._fdb [_dg ._ecd ];if _bca ._bc < _bd [_gdd ][0]{if _bd [_gdd ][3]==1{_dg .toggleMps ();};_dg .setEntry (int (_bd [_gdd ][2]));return int (1-_edf );};_dg .setEntry (int (_bd [_gdd ][1]));return int (_edf );};func (_gce *Decoder )renormalize ()error {for {if _gce ._cd ==0{if _gfb :=_gce .readByte ();_gfb !=nil {return _gfb ;};};_gce ._bc <<=1;_gce ._ge <<=1;_gce ._cd --;if (_gce ._bc &0x8000)!=0{break ;};};_gce ._ge &=0xffffffff;return nil ;};func (_bbg *DecoderStats )SetIndex (index int32 ){_bbg ._ecd =index };func (_gfc *DecoderStats )Copy ()*DecoderStats {_fc :=&DecoderStats {_eda :_gfc ._eda ,_bfce :make ([]byte ,_gfc ._eda )};for _dcf :=0;_dcf < len (_gfc ._bfce );_dcf ++{_fc ._bfce [_dcf ]=_gfc ._bfce [_dcf ];};return _fc ;};var (_bd =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_cf *DecoderStats )String ()string {_gff :=&_b .Builder {};_gff .WriteString (_d .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_cf ._bfce )));for _cdbg ,_fcc :=range _cf ._bfce {if _fcc !=0{_gff .WriteString (_d .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_cdbg ,_fcc ));};};return _gff .String ();};func (_af *DecoderStats )Overwrite (dNew *DecoderStats ){for _fce :=0;_fce < len (_af ._bfce );_fce ++{_af ._bfce [_fce ]=dNew ._bfce [_fce ];_af ._fdb [_fce ]=dNew ._fdb [_fce ];};};func (_bg *DecoderStats )setEntry (_agg int ){_edg :=byte (_agg &0x7f);_bg ._bfce [_bg ._ecd ]=_edg };func New (r _bb .StreamReader )(*Decoder ,error ){_ab :=&Decoder {_fd :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _gef :=_ab .init ();_gef !=nil {return nil ,_gef ;};return _ab ,nil ;};