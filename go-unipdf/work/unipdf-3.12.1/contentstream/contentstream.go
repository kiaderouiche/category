//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_ea "bufio";_ee "bytes";_b "encoding/hex";_e "errors";_gb "fmt";_f "github.com/unidoc/unipdf/v3/common";_bb "github.com/unidoc/unipdf/v3/core";_dd "github.com/unidoc/unipdf/v3/internal/imageutil";_af "github.com/unidoc/unipdf/v3/internal/transform";_bd "github.com/unidoc/unipdf/v3/model";_c "image/color";_gc "image/jpeg";_ga "io";_a "math";_d "strconv";);

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eeg *ContentCreator )Add_Q ()*ContentCreator {_ba :=ContentStreamOperation {};_ba .Operand ="\u0051";_eeg ._deb =append (_eeg ._deb ,&_ba );return _eeg ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _bb .PdfObject ;ColorSpace _bb .PdfObject ;Decode _bb .PdfObject ;DecodeParms _bb .PdfObject ;Filter _bb .PdfObject ;Height _bb .PdfObject ;ImageMask _bb .PdfObject ;Intent _bb .PdfObject ;Interpolate _bb .PdfObject ;Width _bb .PdfObject ;_aebc []byte ;_fbd *_dd .ImageBase ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fad *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_fef :=ContentStreamOperation {};_fef .Operand ="\u0054\u0064";_fef .Params =_bccf ([]float64 {tx ,ty });_fad ._deb =append (_fad ._deb ,&_fef );return _fad ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_ddc *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_cacg :=handlerEntry {};_cacg .Condition =condition ;_cacg .Operand =operand ;_cacg .Handler =handler ;_ddc ._cff =append (_ddc ._cff ,_cacg );};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ggc *ContentCreator )Add_B_starred ()*ContentCreator {_cea :=ContentStreamOperation {};_cea .Operand ="\u0042\u002a";_ggc ._deb =append (_ggc ._deb ,&_cea );return _ggc ;};func _baec (_gcff []int64 )[]_bb .PdfObject {var _bede []_bb .PdfObject ;for _ ,_baeb :=range _gcff {_bede =append (_bede ,_bb .MakeInteger (_baeb ));};return _bede ;};

// Operations returns the list of operations.
func (_ebb *ContentCreator )Operations ()*ContentStreamOperations {return &_ebb ._deb };

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_gdf *ContentCreator )Add_W_starred ()*ContentCreator {_daa :=ContentStreamOperation {};_daa .Operand ="\u0057\u002a";_gdf ._deb =append (_gdf ._deb ,&_daa );return _gdf ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bbc *ContentCreator )Add_b ()*ContentCreator {_fgg :=ContentStreamOperation {};_fgg .Operand ="\u0062";_bbc ._deb =append (_bbc ._deb ,&_fgg );return _bbc ;};func (_fcf *ContentStreamParser )parseHexString ()(*_bb .PdfObjectString ,error ){_fcf ._cfe .ReadByte ();_abe :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _cga []byte ;for {_fcf .skipSpaces ();_eeag ,_gda :=_fcf ._cfe .Peek (1);if _gda !=nil {return _bb .MakeString (""),_gda ;};if _eeag [0]=='>'{_fcf ._cfe .ReadByte ();break ;};_bfca ,_ :=_fcf ._cfe .ReadByte ();if _ee .IndexByte (_abe ,_bfca )>=0{_cga =append (_cga ,_bfca );};};if len (_cga )%2==1{_cga =append (_cga ,'0');};_ede ,_ :=_b .DecodeString (string (_cga ));return _bb .MakeHexString (string (_ede )),nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eae *ContentCreator )Add_TJ (vals ..._bb .PdfObject )*ContentCreator {_abba :=ContentStreamOperation {};_abba .Operand ="\u0054\u004a";_abba .Params =[]_bb .PdfObject {_bb .MakeArray (vals ...)};_eae ._deb =append (_eae ._deb ,&_abba );return _eae ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gcb *ContentCreator )SetNonStrokingColor (color _bd .PdfColor )*ContentCreator {switch _dfb :=color .(type ){case *_bd .PdfColorDeviceGray :_gcb .Add_g (_dfb .Val ());case *_bd .PdfColorDeviceRGB :_gcb .Add_rg (_dfb .R (),_dfb .G (),_dfb .B ());case *_bd .PdfColorDeviceCMYK :_gcb .Add_k (_dfb .C (),_dfb .M (),_dfb .Y (),_dfb .K ());default:_f .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_dfb );};return _gcb ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _bd .Image ,encoder _bb .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_bb .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_aaf :=ContentStreamInlineImage {};if img .ColorComponents ==1{_aaf .ColorSpace =_bb .MakeName ("\u0047");}else if img .ColorComponents ==3{_aaf .ColorSpace =_bb .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_aaf .ColorSpace =_bb .MakeName ("\u0043\u004d\u0059\u004b");}else {_f .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_aaf .BitsPerComponent =_bb .MakeInteger (img .BitsPerComponent );_aaf .Width =_bb .MakeInteger (img .Width );_aaf .Height =_bb .MakeInteger (img .Height );_egef ,_eba :=encoder .EncodeBytes (img .Data );if _eba !=nil {return nil ,_eba ;};_aaf ._aebc =_egef ;_ddgc :=encoder .GetFilterName ();if _ddgc !=_bb .StreamEncodingFilterNameRaw {_aaf .Filter =_bb .MakeName (_ddgc );};return &_aaf ,nil ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fa *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_acd :=ContentStreamOperation {};_acd .Operand ="\u006d";_acd .Params =_bccf ([]float64 {x ,y });_fa ._deb =append (_fa ._deb ,&_acd );return _fa ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_aggc *GraphicStateStack )Pop ()GraphicsState {_gace :=(*_aggc )[len (*_aggc )-1];*_aggc =(*_aggc )[:len (*_aggc )-1];return _gace ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_gbb *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_fgf :=_a .Cos (angle *_a .Pi /180.0);_ddf :=_a .Sin (angle *_a .Pi /180.0);_bee :=-_a .Sin (angle *_a .Pi /180.0);_ace :=_a .Cos (angle *_a .Pi /180.0);return _gbb .Add_cm (_fgf ,_ddf ,_bee ,_ace ,0,0);};func (_aba *ContentStreamProcessor )handleCommand_SCN (_cbcd *ContentStreamOperation ,_gfgc *_bd .PdfPageResources )error {_fab :=_aba ._bgb .ColorspaceStroking ;if !_bbge (_fab ){if len (_cbcd .Params )!=_fab .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbcd .Params ),_fab );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gfge ,_fefe :=_fab .ColorFromPdfObjects (_cbcd .Params );if _fefe !=nil {return _fefe ;};_aba ._bgb .ColorStroking =_gfge ;return nil ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_da *ContentCreator )Add_h ()*ContentCreator {_fac :=ContentStreamOperation {};_fac .Operand ="\u0068";_da ._deb =append (_da ._deb ,&_fac );return _da ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_ebeg HandlerConditionEnum )All ()bool {return _ebeg ==HandlerConditionEnumAllOperands };

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_faada :=ContentStreamParser {};_fcg :=_ee .NewBufferString (contentStr +"\u000a");_faada ._cfe =_ea .NewReader (_fcg );return &_faada ;};func (_eec *ContentStreamParser )parseNumber ()(_bb .PdfObject ,error ){return _bb .ParseNumber (_eec ._cfe );};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;func (_gbca *ContentStreamProcessor )handleCommand_G (_beda *ContentStreamOperation ,_aef *_bd .PdfPageResources )error {_caae :=_bd .NewPdfColorspaceDeviceGray ();if len (_beda .Params )!=_caae .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_beda .Params ),_caae );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ebde ,_befa :=_caae .ColorFromPdfObjects (_beda .Params );if _befa !=nil {return _befa ;};_gbca ._bgb .ColorspaceStroking =_caae ;_gbca ._bgb .ColorStroking =_ebde ;return nil ;};func (_dcd *ContentStreamParser )parseArray ()(*_bb .PdfObjectArray ,error ){_cbae :=_bb .MakeArray ();_dcd ._cfe .ReadByte ();for {_dcd .skipSpaces ();_cgg ,_dac :=_dcd ._cfe .Peek (1);if _dac !=nil {return _cbae ,_dac ;};if _cgg [0]==']'{_dcd ._cfe .ReadByte ();break ;};_agg ,_ ,_dac :=_dcd .parseObject ();if _dac !=nil {return _cbae ,_dac ;};_cbae .Append (_agg );};return _cbae ,nil ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_gcfc *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_accf :=ContentStreamOperations {};for {_ffbg :=ContentStreamOperation {};for {_deag ,_edc ,_egdd :=_gcfc .parseObject ();if _egdd !=nil {if _egdd ==_ga .EOF {return &_accf ,nil ;};return &_accf ,_egdd ;};if _edc {_ffbg .Operand ,_ =_bb .GetStringVal (_deag );_accf =append (_accf ,&_ffbg );break ;}else {_ffbg .Params =append (_ffbg .Params ,_deag );};};if _ffbg .Operand =="\u0042\u0049"{_aac ,_fffa :=_gcfc .ParseInlineImage ();if _fffa !=nil {return &_accf ,_fffa ;};_ffbg .Params =append (_ffbg .Params ,_aac );};};};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_addc *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_ddbg :=ContentStreamOperation {};_ddbg .Operand ="\u0054\u0073";_ddbg .Params =_bccf ([]float64 {rise });_addc ._deb =append (_addc ._deb ,&_ddbg );return _addc ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_bgd *ContentCreator )SetStrokingColor (color _bd .PdfColor )*ContentCreator {switch _eee :=color .(type ){case *_bd .PdfColorDeviceGray :_bgd .Add_G (_eee .Val ());case *_bd .PdfColorDeviceRGB :_bgd .Add_RG (_eee .R (),_eee .G (),_eee .B ());case *_bd .PdfColorDeviceCMYK :_bgd .Add_K (_eee .C (),_eee .M (),_eee .Y (),_eee .K ());default:_f .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_eee );};return _bgd ;};func (_geda *ContentStreamParser )parseOperand ()(*_bb .PdfObjectString ,error ){var _geee []byte ;for {_fade ,_cdge :=_geda ._cfe .Peek (1);if _cdge !=nil {return _bb .MakeString (string (_geee )),_cdge ;};if _bb .IsDelimiter (_fade [0]){break ;};if _bb .IsWhiteSpace (_fade [0]){break ;};_gdgg ,_ :=_geda ._cfe .ReadByte ();_geee =append (_geee ,_gdgg );};return _bb .MakeString (string (_geee )),nil ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fcc *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_ebgf :=ContentStreamOperation {};_ebgf .Operand ="\u0079";_ebgf .Params =_bccf ([]float64 {x1 ,y1 ,x3 ,y3 });_fcc ._deb =append (_fcc ._deb ,&_ebgf );return _fcc ;};func (_acb *ContentStreamProcessor )handleCommand_k (_gbdff *ContentStreamOperation ,_cgdf *_bd .PdfPageResources )error {_egc :=_bd .NewPdfColorspaceDeviceCMYK ();if len (_gbdff .Params )!=_egc .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gbdff .Params ),_egc );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_adee ,_aecd :=_egc .ColorFromPdfObjects (_gbdff .Params );if _aecd !=nil {return _aecd ;};_acb ._bgb .ColorspaceNonStroking =_egc ;_acb ._bgb .ColorNonStroking =_adee ;return nil ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_bb .PdfObject ;Operand string ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_adf *ContentStreamInlineImage )ToImage (resources *_bd .PdfPageResources )(*_bd .Image ,error ){_feee ,_cgc :=_adf .toImageBase (resources );if _cgc !=nil {return nil ,_cgc ;};_dee ,_cgc :=_fccef (_adf );if _cgc !=nil {return nil ,_cgc ;};_f .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_dee ,_dee );_f .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_adf );_ceg ,_cgc :=_dee .DecodeBytes (_adf ._aebc );if _cgc !=nil {return nil ,_cgc ;};_efc :=&_bd .Image {Width :int64 (_feee .Width ),Height :int64 (_feee .Height ),BitsPerComponent :int64 (_feee .BitsPerComponent ),ColorComponents :_feee .ColorComponents ,Data :_ceg };if len (_feee .Decode )> 0{for _caea :=0;_caea < len (_feee .Decode );_caea ++{_feee .Decode [_caea ]*=float64 ((int (1)<<uint (_feee .BitsPerComponent ))-1);};_efc .SetDecode (_feee .Decode );};return _efc ,nil ;};

// GetEncoder returns the encoder of the inline image.
func (_bfb *ContentStreamInlineImage )GetEncoder ()(_bb .StreamEncoder ,error ){return _fccef (_bfb )};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gg *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_aa :=ContentStreamOperation {};_aa .Operand ="\u0072\u0065";_aa .Params =_bccf ([]float64 {x ,y ,width ,height });_gg ._deb =append (_gg ._deb ,&_aa );return _gg ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gde *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_daag :=ContentStreamOperation {};_daag .Operand ="\u006b";_daag .Params =_bccf ([]float64 {c ,m ,y ,k });_gde ._deb =append (_gde ._deb ,&_daag );return _gde ;};

// String is same as Bytes() except returns as a string for convenience.
func (_ebg *ContentCreator )String ()string {return string (_ebg ._deb .Bytes ())};func (_geca *ContentStreamParser )parseNull ()(_bb .PdfObjectNull ,error ){_ ,_dcgg :=_geca ._cfe .Discard (4);return _bb .PdfObjectNull {},_dcgg ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_gfa *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_gbe :=ContentStreamInlineImage {};for {_gfa .skipSpaces ();_ebe ,_bfdb ,_gfb :=_gfa .parseObject ();if _gfb !=nil {return nil ,_gfb ;};if !_bfdb {_bagb ,_ccg :=_bb .GetName (_ebe );if !_ccg {_f .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ebe );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ebe );};_cafb ,_bfa ,_bcb :=_gfa .parseObject ();if _bcb !=nil {return nil ,_bcb ;};if _bfa {return nil ,_gb .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_bagb {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_gbe .BitsPerComponent =_cafb ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_gbe .ColorSpace =_cafb ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_gbe .Decode =_cafb ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_gbe .DecodeParms =_cafb ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_gbe .Filter =_cafb ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_gbe .Height =_cafb ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_gbe .ImageMask =_cafb ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_gbe .Intent =_cafb ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_gbe .Interpolate =_cafb ;case "\u0057","\u0057\u0069\u0064t\u0068":_gbe .Width =_cafb ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_f .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_bagb );default:return nil ,_gb .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_bagb );};};if _bfdb {_ddfdf ,_gegc :=_ebe .(*_bb .PdfObjectString );if !_gegc {return nil ,_gb .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _ddfdf .Str ()=="\u0045\u0049"{_f .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_gbe ,nil ;}else if _ddfdf .Str ()=="\u0049\u0044"{_f .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_feff ,_gbee :=_gfa ._cfe .Peek (1);if _gbee !=nil {return nil ,_gbee ;};if _bb .IsWhiteSpace (_feff [0]){_gfa ._cfe .Discard (1);};_gbe ._aebc =[]byte {};_gada :=0;var _fgfae []byte ;for {_dec ,_ece :=_gfa ._cfe .ReadByte ();if _ece !=nil {_f .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_ece ;};if _gada ==0{if _bb .IsWhiteSpace (_dec ){_fgfae =[]byte {};_fgfae =append (_fgfae ,_dec );_gada =1;}else if _dec =='E'{_fgfae =append (_fgfae ,_dec );_gada =2;}else {_gbe ._aebc =append (_gbe ._aebc ,_dec );};}else if _gada ==1{_fgfae =append (_fgfae ,_dec );if _dec =='E'{_gada =2;}else {_gbe ._aebc =append (_gbe ._aebc ,_fgfae ...);_fgfae =[]byte {};if _bb .IsWhiteSpace (_dec ){_gada =1;}else {_gada =0;};};}else if _gada ==2{_fgfae =append (_fgfae ,_dec );if _dec =='I'{_gada =3;}else {_gbe ._aebc =append (_gbe ._aebc ,_fgfae ...);_fgfae =[]byte {};_gada =0;};}else if _gada ==3{_fgfae =append (_fgfae ,_dec );if _bb .IsWhiteSpace (_dec ){_bde ,_cgdd :=_gfa ._cfe .Peek (20);if _cgdd !=nil &&_cgdd !=_ga .EOF {return nil ,_cgdd ;};_geaa :=NewContentStreamParser (string (_bde ));_bfae :=true ;for _dead :=0;_dead < 3;_dead ++{_bgdg ,_ddd ,_bad :=_geaa .parseObject ();if _bad !=nil {if _bad ==_ga .EOF {break ;};continue ;};if _ddd &&!_cafd (_bgdg .String ()){_bfae =false ;break ;};};if _bfae {if len (_gbe ._aebc )> 100{_f .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_gbe ._aebc ),_gbe ._aebc [:100]);}else {_f .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_gbe ._aebc ),_gbe ._aebc );};return &_gbe ,nil ;};};_gbe ._aebc =append (_gbe ._aebc ,_fgfae ...);_fgfae =[]byte {};_gada =0;};};};};};};func (_fce *ContentStreamProcessor )handleCommand_g (_dgf *ContentStreamOperation ,_bcf *_bd .PdfPageResources )error {_dcbf :=_bd .NewPdfColorspaceDeviceGray ();if len (_dgf .Params )!=_dcbf .GetNumComponents (){_f .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dgf .Params ),_dcbf );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ecdf ,_ecge :=_dcbf .ColorFromPdfObjects (_dgf .Params );if _ecge !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dcbf ,_dgf ,_ecge );return _ecge ;};_fce ._bgb .ColorspaceNonStroking =_dcbf ;_fce ._bgb .ColorNonStroking =_ecdf ;return nil ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_abb *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_cd :=ContentStreamOperation {};_cd .Operand ="\u0063\u006d";_cd .Params =_bccf ([]float64 {a ,b ,c ,d ,e ,f });_abb ._deb =append (_abb ._deb ,&_cd );return _abb ;};func (_fdcb *ContentStreamProcessor )handleCommand_CS (_eeeb *ContentStreamOperation ,_gbba *_bd .PdfPageResources )error {if len (_eeeb .Params )< 1{_f .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _e .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_eeeb .Params )> 1{_f .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _e .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_gadd ,_cbc :=_eeeb .Params [0].(*_bb .PdfObjectName );if !_cbc {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_affe ,_fggg :=_fdcb .getColorspace (string (*_gadd ),_gbba );if _fggg !=nil {return _fggg ;};_fdcb ._bgb .ColorspaceStroking =_affe ;_dcba ,_fggg :=_fdcb .getInitialColor (_affe );if _fggg !=nil {return _fggg ;};_fdcb ._bgb .ColorStroking =_dcba ;return nil ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};func _bac (_bbe *ContentStreamInlineImage )(*_bb .DCTEncoder ,error ){_ege :=_bb .NewDCTEncoder ();_affa :=_ee .NewReader (_bbe ._aebc );_cag ,_dgg :=_gc .DecodeConfig (_affa );if _dgg !=nil {_f .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_dgg );return nil ,_dgg ;};switch _cag .ColorModel {case _c .RGBAModel :_ege .BitsPerComponent =8;_ege .ColorComponents =3;case _c .RGBA64Model :_ege .BitsPerComponent =16;_ege .ColorComponents =3;case _c .GrayModel :_ege .BitsPerComponent =8;_ege .ColorComponents =1;case _c .Gray16Model :_ege .BitsPerComponent =16;_ege .ColorComponents =1;case _c .CMYKModel :_ege .BitsPerComponent =8;_ege .ColorComponents =4;case _c .YCbCrModel :_ege .BitsPerComponent =8;_ege .ColorComponents =3;default:return nil ,_e .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_ege .Width =_cag .Width ;_ege .Height =_cag .Height ;_f .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_ege );return _ege ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eeb *ContentCreator )Add_CS (name _bb .PdfObjectName )*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0043\u0053";_dga .Params =_bcab ([]_bb .PdfObjectName {name });_eeb ._deb =append (_eeb ._deb ,&_dga );return _eeb ;};func (_bgfcf *ContentStreamProcessor )handleCommand_rg (_aeeb *ContentStreamOperation ,_ccfb *_bd .PdfPageResources )error {_dfda :=_bd .NewPdfColorspaceDeviceRGB ();if len (_aeeb .Params )!=_dfda .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aeeb .Params ),_dfda );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dbbb ,_abcg :=_dfda .ColorFromPdfObjects (_aeeb .Params );if _abcg !=nil {return _abcg ;};_bgfcf ._bgb .ColorspaceNonStroking =_dfda ;_bgfcf ._bgb .ColorNonStroking =_dbbb ;return nil ;};func (_dafe *ContentStreamProcessor )getColorspace (_ecdb string ,_fgffg *_bd .PdfPageResources )(_bd .PdfColorspace ,error ){switch _ecdb {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _bd .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _bd .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _bd .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _bd .NewPdfColorspaceSpecialPattern (),nil ;};_aegg ,_gbdf :=_fgffg .GetColorspaceByName (_bb .PdfObjectName (_ecdb ));if _gbdf {return _aegg ,nil ;};switch _ecdb {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _bd .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _bd .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _bd .NewPdfColorspaceLab (),nil ;};_f .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_ecdb );return nil ,_gb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_ecdb );};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_bbaa *ContentStreamOperation ,_edbg GraphicsState ,_eegc *_bd .PdfPageResources )error ;func (_bdf *ContentStreamInlineImage )String ()string {_fgca :=_gb .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_bdf ._aebc ));if _bdf .BitsPerComponent !=nil {_fgca +="\u002d\u0020\u0042\u0050\u0043\u0020"+_bdf .BitsPerComponent .WriteString ()+"\u000a";};if _bdf .ColorSpace !=nil {_fgca +="\u002d\u0020\u0043S\u0020"+_bdf .ColorSpace .WriteString ()+"\u000a";};if _bdf .Decode !=nil {_fgca +="\u002d\u0020\u0044\u0020"+_bdf .Decode .WriteString ()+"\u000a";};if _bdf .DecodeParms !=nil {_fgca +="\u002d\u0020\u0044P\u0020"+_bdf .DecodeParms .WriteString ()+"\u000a";};if _bdf .Filter !=nil {_fgca +="\u002d\u0020\u0046\u0020"+_bdf .Filter .WriteString ()+"\u000a";};if _bdf .Height !=nil {_fgca +="\u002d\u0020\u0048\u0020"+_bdf .Height .WriteString ()+"\u000a";};if _bdf .ImageMask !=nil {_fgca +="\u002d\u0020\u0049M\u0020"+_bdf .ImageMask .WriteString ()+"\u000a";};if _bdf .Intent !=nil {_fgca +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_bdf .Intent .WriteString ()+"\u000a";};if _bdf .Interpolate !=nil {_fgca +="\u002d\u0020\u0049\u0020"+_bdf .Interpolate .WriteString ()+"\u000a";};if _bdf .Width !=nil {_fgca +="\u002d\u0020\u0057\u0020"+_bdf .Width .WriteString ()+"\u000a";};return _fgca ;};func (_fdf *ContentStreamProcessor )handleCommand_sc (_egefg *ContentStreamOperation ,_cafc *_bd .PdfPageResources )error {_aeed :=_fdf ._bgb .ColorspaceNonStroking ;if !_bbge (_aeed ){if len (_egefg .Params )!=_aeed .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_egefg .Params ),_aeed );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_adbd ,_bfgd :=_aeed .ColorFromPdfObjects (_egefg .Params );if _bfgd !=nil {return _bfgd ;};_fdf ._bgb .ColorNonStroking =_adbd ;return nil ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_add *ContentCreator )Add_g (gray float64 )*ContentCreator {_eab :=ContentStreamOperation {};_eab .Operand ="\u0067";_eab .Params =_bccf ([]float64 {gray });_add ._deb =append (_add ._deb ,&_eab );return _add ;};func (_baee *ContentStreamProcessor )handleCommand_K (_eeebf *ContentStreamOperation ,_cgbf *_bd .PdfPageResources )error {_bagbf :=_bd .NewPdfColorspaceDeviceCMYK ();if len (_eeebf .Params )!=_bagbf .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_eeebf .Params ),_bagbf );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bbb ,_cggf :=_bagbf .ColorFromPdfObjects (_eeebf .Params );if _cggf !=nil {return _cggf ;};_baee ._bgb .ColorspaceStroking =_bagbf ;_baee ._bgb .ColorStroking =_bbb ;return nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cfd *ContentCreator )Add_Tr (render int64 )*ContentCreator {_gfe :=ContentStreamOperation {};_gfe .Operand ="\u0054\u0072";_gfe .Params =_baec ([]int64 {render });_cfd ._deb =append (_cfd ._deb ,&_gfe );return _cfd ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_agd *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_eff :=ContentStreamOperation {};_eff .Operand ="\u0064";_eff .Params =[]_bb .PdfObject {};_eff .Params =append (_eff .Params ,_bb .MakeArrayFromIntegers64 (dashArray ));_eff .Params =append (_eff .Params ,_bb .MakeInteger (dashPhase ));_agd ._deb =append (_agd ._deb ,&_eff );return _agd ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dcgd *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_bed :=ContentStreamOperation {};_bed .Operand ="\u0054\u0077";_bed .Params =_bccf ([]float64 {wordSpace });_dcgd ._deb =append (_dcgd ._deb ,&_bed );return _dcgd ;};func _bcab (_cbf []_bb .PdfObjectName )[]_bb .PdfObject {var _gcaf []_bb .PdfObject ;for _ ,_gbdc :=range _cbf {_gcaf =append (_gcaf ,_bb .MakeName (string (_gbdc )));};return _gcaf ;};

// AddOperand adds a specified operand.
func (_gea *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_gea ._deb =append (_gea ._deb ,&op );return _gea ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_egf *ContentCreator )Add_cs (name _bb .PdfObjectName )*ContentCreator {_gga :=ContentStreamOperation {};_gga .Operand ="\u0063\u0073";_gga .Params =_bcab ([]_bb .PdfObjectName {name });_egf ._deb =append (_egf ._deb ,&_gga );return _egf ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_aae *ContentCreator )Add_S ()*ContentCreator {_dbf :=ContentStreamOperation {};_dbf .Operand ="\u0053";_aae ._deb =append (_aae ._deb ,&_dbf );return _aae ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_fffg HandlerConditionEnum )Operand ()bool {return _fffg ==HandlerConditionEnumOperand };func (_dge *ContentStreamParser )parseString ()(*_bb .PdfObjectString ,error ){_dge ._cfe .ReadByte ();var _bfdf []byte ;_eaf :=1;for {_cebb ,_cgbg :=_dge ._cfe .Peek (1);if _cgbg !=nil {return _bb .MakeString (string (_bfdf )),_cgbg ;};if _cebb [0]=='\\'{_dge ._cfe .ReadByte ();_eaff ,_agfe :=_dge ._cfe .ReadByte ();if _agfe !=nil {return _bb .MakeString (string (_bfdf )),_agfe ;};if _bb .IsOctalDigit (_eaff ){_eeee ,_gcce :=_dge ._cfe .Peek (2);if _gcce !=nil {return _bb .MakeString (string (_bfdf )),_gcce ;};var _gac []byte ;_gac =append (_gac ,_eaff );for _ ,_bff :=range _eeee {if _bb .IsOctalDigit (_bff ){_gac =append (_gac ,_bff );}else {break ;};};_dge ._cfe .Discard (len (_gac )-1);_f .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gac );_dgaf ,_gcce :=_d .ParseUint (string (_gac ),8,32);if _gcce !=nil {return _bb .MakeString (string (_bfdf )),_gcce ;};_bfdf =append (_bfdf ,byte (_dgaf ));continue ;};switch _eaff {case 'n':_bfdf =append (_bfdf ,'\n');case 'r':_bfdf =append (_bfdf ,'\r');case 't':_bfdf =append (_bfdf ,'\t');case 'b':_bfdf =append (_bfdf ,'\b');case 'f':_bfdf =append (_bfdf ,'\f');case '(':_bfdf =append (_bfdf ,'(');case ')':_bfdf =append (_bfdf ,')');case '\\':_bfdf =append (_bfdf ,'\\');};continue ;}else if _cebb [0]=='('{_eaf ++;}else if _cebb [0]==')'{_eaf --;if _eaf ==0{_dge ._cfe .ReadByte ();break ;};};_faae ,_ :=_dge ._cfe .ReadByte ();_bfdf =append (_bfdf ,_faae );};return _bb .MakeString (string (_bfdf )),nil ;};func (_ddde *ContentStreamProcessor )handleCommand_SC (_deaf *ContentStreamOperation ,_bafa *_bd .PdfPageResources )error {_aee :=_ddde ._bgb .ColorspaceStroking ;if len (_deaf .Params )!=_aee .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_deaf .Params ),_aee );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bbec ,_eaffb :=_aee .ColorFromPdfObjects (_deaf .Params );if _eaffb !=nil {return _eaffb ;};_ddde ._bgb .ColorStroking =_bbec ;return nil ;};func _gdg (_acdb *ContentStreamInlineImage ,_eebf *_bb .PdfObjectDictionary )(*_bb .LZWEncoder ,error ){_dbc :=_bb .NewLZWEncoder ();if _eebf ==nil {if _acdb .DecodeParms !=nil {_cdb ,_fdc :=_bb .GetDict (_acdb .DecodeParms );if !_fdc {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_acdb .DecodeParms );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_eebf =_cdb ;};};if _eebf ==nil {return _dbc ,nil ;};_fec :=_eebf .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _fec !=nil {_bdd ,_cfgd :=_fec .(*_bb .PdfObjectInteger );if !_cfgd {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_fec );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_bdd !=0&&*_bdd !=1{return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_dbc .EarlyChange =int (*_bdd );}else {_dbc .EarlyChange =1;};_fec =_eebf .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _fec !=nil {_cdgd ,_gaa :=_fec .(*_bb .PdfObjectInteger );if !_gaa {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_fec );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_dbc .Predictor =int (*_cdgd );};_fec =_eebf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _fec !=nil {_bgcg ,_aag :=_fec .(*_bb .PdfObjectInteger );if !_aag {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_gb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_dbc .BitsPerComponent =int (*_bgcg );};if _dbc .Predictor > 1{_dbc .Columns =1;_fec =_eebf .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _fec !=nil {_fgfa ,_gad :=_fec .(*_bb .PdfObjectInteger );if !_gad {return nil ,_gb .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_dbc .Columns =int (*_fgfa );};_dbc .Colors =1;_fec =_eebf .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _fec !=nil {_eabb ,_cfc :=_fec .(*_bb .PdfObjectInteger );if !_cfc {return nil ,_gb .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_dbc .Colors =int (*_eabb );};};_f .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_eebf .String ());return _dbc ,nil ;};func (_fbgad *ContentStreamProcessor )handleCommand_cs (_cgge *ContentStreamOperation ,_dfg *_bd .PdfPageResources )error {if len (_cgge .Params )< 1{_f .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _e .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_cgge .Params )> 1{_f .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _e .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fcd ,_ecbef :=_cgge .Params [0].(*_bb .PdfObjectName );if !_ecbef {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_dgbg ,_bbgb :=_fbgad .getColorspace (string (*_fcd ),_dfg );if _bbgb !=nil {return _bbgb ;};_fbgad ._bgb .ColorspaceNonStroking =_dgbg ;_egda ,_bbgb :=_fbgad .getInitialColor (_dgbg );if _bbgb !=nil {return _bbgb ;};_fbgad ._bgb .ColorNonStroking =_egda ;return nil ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_db *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_cda :=ContentStreamOperation {};_cda .Operand ="\u0063";_cda .Params =_bccf ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_db ._deb =append (_db ._deb ,&_cda );return _db ;};

// String returns `ops.Bytes()` as a string.
func (_cgd *ContentStreamOperations )String ()string {return string (_cgd .Bytes ())};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bbaf *ContentCreator )Add_s ()*ContentCreator {_ffea :=ContentStreamOperation {};_ffea .Operand ="\u0073";_bbaf ._deb =append (_bbaf ._deb ,&_ffea );return _bbaf ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gcg *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bfc :=ContentStreamOperation {};_bfc .Operand ="\u0054\u006d";_bfc .Params =_bccf ([]float64 {a ,b ,c ,d ,e ,f });_gcg ._deb =append (_gcg ._deb ,&_bfc );return _gcg ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gca *ContentCreator )Add_B ()*ContentCreator {_dgc :=ContentStreamOperation {};_dgc .Operand ="\u0042";_gca ._deb =append (_gca ._deb ,&_dgc );return _gca ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_caf *ContentCreator )Add_i (flatness float64 )*ContentCreator {_bf :=ContentStreamOperation {};_bf .Operand ="\u0069";_bf .Params =_bccf ([]float64 {flatness });_caf ._deb =append (_caf ._deb ,&_bf );return _caf ;};

// Scale applies x-y scaling to the transformation matrix.
func (_dgd *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _dgd .Add_cm (sx ,0,0,sy ,0,0);};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _bd .PdfColorspace ;ColorspaceNonStroking _bd .PdfColorspace ;ColorStroking _bd .PdfColor ;ColorNonStroking _bd .PdfColor ;CTM _af .Matrix ;};func _bbge (_dfa _bd .PdfColorspace )bool {_ ,_caec :=_dfa .(*_bd .PdfColorspaceSpecialPattern );return _caec ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);func _efa (_aeb *ContentStreamInlineImage ,_defa *_bb .PdfObjectDictionary )(*_bb .FlateEncoder ,error ){_edg :=_bb .NewFlateEncoder ();if _aeb ._fbd !=nil {_edg .SetImage (_aeb ._fbd );};if _defa ==nil {_aff :=_aeb .DecodeParms ;if _aff !=nil {_ded ,_fafd :=_bb .GetDict (_aff );if !_fafd {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_aff );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_defa =_ded ;};};if _defa ==nil {return _edg ,nil ;};_f .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_defa .String ());_fbfa :=_defa .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _fbfa ==nil {_f .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_gbf ,_bef :=_fbfa .(*_bb .PdfObjectInteger );if !_bef {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_fbfa );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_edg .Predictor =int (*_gbf );};_fbfa =_defa .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _fbfa !=nil {_cfg ,_bcd :=_fbfa .(*_bb .PdfObjectInteger );if !_bcd {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_gb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_edg .BitsPerComponent =int (*_cfg );};if _edg .Predictor > 1{_edg .Columns =1;_fbfa =_defa .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _fbfa !=nil {_gbbb ,_cb :=_fbfa .(*_bb .PdfObjectInteger );if !_cb {return nil ,_gb .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_edg .Columns =int (*_gbbb );};_edg .Colors =1;_ccf :=_defa .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _ccf !=nil {_bda ,_ecf :=_ccf .(*_bb .PdfObjectInteger );if !_ecf {return nil ,_gb .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_edg .Colors =int (*_bda );};};return _edg ,nil ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_eaa *ContentStreamParser )ExtractText ()(string ,error ){_ec ,_ag :=_eaa .Parse ();if _ag !=nil {return "",_ag ;};_dc :=false ;_fc ,_ceb :=float64 (-1),float64 (-1);_ab :="";for _ ,_abd :=range *_ec {if _abd .Operand =="\u0042\u0054"{_dc =true ;}else if _abd .Operand =="\u0045\u0054"{_dc =false ;};if _abd .Operand =="\u0054\u0064"||_abd .Operand =="\u0054\u0044"||_abd .Operand =="\u0054\u002a"{_ab +="\u000a";};if _abd .Operand =="\u0054\u006d"{if len (_abd .Params )!=6{continue ;};_bg ,_bce :=_abd .Params [4].(*_bb .PdfObjectFloat );if !_bce {_bdb ,_fg :=_abd .Params [4].(*_bb .PdfObjectInteger );if !_fg {continue ;};_bg =_bb .MakeFloat (float64 (*_bdb ));};_ef ,_bce :=_abd .Params [5].(*_bb .PdfObjectFloat );if !_bce {_be ,_ff :=_abd .Params [5].(*_bb .PdfObjectInteger );if !_ff {continue ;};_ef =_bb .MakeFloat (float64 (*_be ));};if _ceb ==-1{_ceb =float64 (*_ef );}else if _ceb > float64 (*_ef ){_ab +="\u000a";_fc =float64 (*_bg );_ceb =float64 (*_ef );continue ;};if _fc ==-1{_fc =float64 (*_bg );}else if _fc < float64 (*_bg ){_ab +="\u0009";_fc =float64 (*_bg );};};if _dc &&_abd .Operand =="\u0054\u004a"{if len (_abd .Params )< 1{continue ;};_ca ,_dcc :=_abd .Params [0].(*_bb .PdfObjectArray );if !_dcc {return "",_gb .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_abd .Params [0]);};for _ ,_eg :=range _ca .Elements (){switch _gec :=_eg .(type ){case *_bb .PdfObjectString :_ab +=_gec .Str ();case *_bb .PdfObjectFloat :if *_gec < -100{_ab +="\u0020";};case *_bb .PdfObjectInteger :if *_gec < -100{_ab +="\u0020";};};};}else if _dc &&_abd .Operand =="\u0054\u006a"{if len (_abd .Params )< 1{continue ;};_bga ,_df :=_abd .Params [0].(*_bb .PdfObjectString );if !_df {return "",_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_abd .Params [0]);};_ab +=_bga .Str ();};};return _ab ,nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_baf *ContentCreator )Add_quotes (textstr _bb .PdfObjectString ,aw ,ac float64 )*ContentCreator {_gddf :=ContentStreamOperation {};_gddf .Operand ="\u0022";_gddf .Params =_bccf ([]float64 {aw ,ac });_gddf .Params =append (_gddf .Params ,_egeg ([]_bb .PdfObjectString {textstr })...);_baf ._deb =append (_baf ._deb ,&_gddf );return _baf ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_dae *ContentCreator )Add_Do (name _bb .PdfObjectName )*ContentCreator {_gba :=ContentStreamOperation {};_gba .Operand ="\u0044\u006f";_gba .Params =_bcab ([]_bb .PdfObjectName {name });_dae ._deb =append (_dae ._deb ,&_gba );return _dae ;};func (_cafg *ContentStreamInlineImage )toImageBase (_caed *_bd .PdfPageResources )(*_dd .ImageBase ,error ){if _cafg ._fbd !=nil {return _cafg ._fbd ,nil ;};_edgd :=_dd .ImageBase {};if _cafg .Height ==nil {return nil ,_e .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_bgg ,_ddbe :=_cafg .Height .(*_bb .PdfObjectInteger );if !_ddbe {return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_edgd .Height =int (*_bgg );if _cafg .Width ==nil {return nil ,_e .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_fdeg ,_ddbe :=_cafg .Width .(*_bb .PdfObjectInteger );if !_ddbe {return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_edgd .Width =int (*_fdeg );_daf ,_fggc :=_cafg .IsMask ();if _fggc !=nil {return nil ,_fggc ;};if _daf {_edgd .BitsPerComponent =1;_edgd .ColorComponents =1;}else {if _cafg .BitsPerComponent ==nil {_f .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_edgd .BitsPerComponent =8;}else {_bec ,_dba :=_cafg .BitsPerComponent .(*_bb .PdfObjectInteger );if !_dba {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cafg .BitsPerComponent );return nil ,_e .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_edgd .BitsPerComponent =int (*_bec );};if _cafg .ColorSpace !=nil {_bege ,_bae :=_cafg .GetColorSpace (_caed );if _bae !=nil {return nil ,_bae ;};_edgd .ColorComponents =_bege .GetNumComponents ();}else {_f .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_edgd .ColorComponents =1;};};if _feb ,_begf :=_bb .GetArray (_cafg .Decode );_begf {_edgd .Decode ,_fggc =_feb .ToFloat64Array ();if _fggc !=nil {return nil ,_fggc ;};};_cafg ._fbd =&_edgd ;return _cafg ._fbd ,nil ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fea *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_bgf :=ContentStreamOperation {};_bgf .Operand ="\u004b";_bgf .Params =_bccf ([]float64 {c ,m ,y ,k });_fea ._deb =append (_fea ._deb ,&_bgf );return _fea ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_geg *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_gaf :=ContentStreamOperation {};_gaf .Operand ="\u0053\u0043\u004e";_gaf .Params =_bccf (c );_geg ._deb =append (_geg ._deb ,&_gaf );return _geg ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_cgfc *ContentStreamInlineImage )IsMask ()(bool ,error ){if _cgfc .ImageMask !=nil {_cdac ,_ggb :=_cgfc .ImageMask .(*_bb .PdfObjectBool );if !_ggb {_f .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_e .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_cdac ),nil ;};return false ,nil ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ddb *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fed :=ContentStreamOperation {};_fed .Operand ="\u0076";_fed .Params =_bccf ([]float64 {x2 ,y2 ,x3 ,y3 });_ddb ._deb =append (_ddb ._deb ,&_fed );return _ddb ;};var (ErrInvalidOperand =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ed *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ed )==0{return _ed ;};if _ed .isWrapped (){return _ed ;};*_ed =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ed ...);_cg :=0;for _ ,_eea :=range *_ed {if _eea .Operand =="\u0071"{_cg ++;}else if _eea .Operand =="\u0051"{_cg --;};};for _cg > 0{*_ed =append (*_ed ,&ContentStreamOperation {Operand :"\u0051"});_cg --;};return _ed ;};func _fccef (_aed *ContentStreamInlineImage )(_bb .StreamEncoder ,error ){if _aed .Filter ==nil {return _bb .NewRawEncoder (),nil ;};_afc ,_eca :=_aed .Filter .(*_bb .PdfObjectName );if !_eca {_dea ,_bag :=_aed .Filter .(*_bb .PdfObjectArray );if !_bag {return nil ,_gb .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _dea .Len ()==0{return _bb .NewRawEncoder (),nil ;};if _dea .Len ()!=1{_faf ,_ebcb :=_faad (_aed );if _ebcb !=nil {_f .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_ebcb );return nil ,_ebcb ;};_f .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_faf );return _faf ,nil ;};_cgf :=_dea .Get (0);_afc ,_bag =_cgf .(*_bb .PdfObjectName );if !_bag {return nil ,_gb .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_afc {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _bb .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _bb .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bac (_aed );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _efa (_aed ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _gdg (_aed ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _bb .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _bb .NewRunLengthEncoder (),nil ;default:_f .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_afc );return nil ,_e .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_dgafb *ContentStreamParser )parseDict ()(*_bb .PdfObjectDictionary ,error ){_f .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_bfac :=_bb .MakeDict ();_efg ,_ :=_dgafb ._cfe .ReadByte ();if _efg !='<'{return nil ,_e .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_efg ,_ =_dgafb ._cfe .ReadByte ();if _efg !='<'{return nil ,_e .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_dgafb .skipSpaces ();_dbgf ,_gfg :=_dgafb ._cfe .Peek (2);if _gfg !=nil {return nil ,_gfg ;};_f .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_dbgf ),string (_dbgf ));if (_dbgf [0]=='>')&&(_dbgf [1]=='>'){_f .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_dgafb ._cfe .ReadByte ();_dgafb ._cfe .ReadByte ();break ;};_f .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_gbfe ,_gfg :=_dgafb .parseName ();_f .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gbfe );if _gfg !=nil {_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_gfg );return nil ,_gfg ;};if len (_gbfe )> 4&&_gbfe [len (_gbfe )-4:]=="\u006e\u0075\u006c\u006c"{_bbac :=_gbfe [0:len (_gbfe )-4];_f .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_gbfe );_f .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_bbac );_dgafb .skipSpaces ();_cgfb ,_ :=_dgafb ._cfe .Peek (1);if _cgfb [0]=='/'{_bfac .Set (_bbac ,_bb .MakeNull ());continue ;};};_dgafb .skipSpaces ();_bbg ,_ ,_gfg :=_dgafb .parseObject ();if _gfg !=nil {return nil ,_gfg ;};_bfac .Set (_gbfe ,_bbg );_f .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_gbfe ,_bbg .String ());};return _bfac ,nil ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fbb *ContentCreator )Add_BT ()*ContentCreator {_beg :=ContentStreamOperation {};_beg .Operand ="\u0042\u0054";_fbb ._deb =append (_fbb ._deb ,&_beg );return _fbb ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_egd *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_fbe :=ContentStreamOperation {};_fbe .Operand ="\u0073\u0063\u006e";_fbe .Params =_bccf (c );_egd ._deb =append (_egd ._deb ,&_fbe );return _egd ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cf *ContentCreator )Add_TL (leading float64 )*ContentCreator {_dbg :=ContentStreamOperation {};_dbg .Operand ="\u0054\u004c";_dbg .Params =_bccf ([]float64 {leading });_cf ._deb =append (_cf ._deb ,&_dbg );return _cf ;};

// WriteString outputs the object as it is to be written to file.
func (_aafb *ContentStreamInlineImage )WriteString ()string {var _ddfd _ee .Buffer ;_abbe :="";if _aafb .BitsPerComponent !=nil {_abbe +="\u002f\u0042\u0050C\u0020"+_aafb .BitsPerComponent .WriteString ()+"\u000a";};if _aafb .ColorSpace !=nil {_abbe +="\u002f\u0043\u0053\u0020"+_aafb .ColorSpace .WriteString ()+"\u000a";};if _aafb .Decode !=nil {_abbe +="\u002f\u0044\u0020"+_aafb .Decode .WriteString ()+"\u000a";};if _aafb .DecodeParms !=nil {_abbe +="\u002f\u0044\u0050\u0020"+_aafb .DecodeParms .WriteString ()+"\u000a";};if _aafb .Filter !=nil {_abbe +="\u002f\u0046\u0020"+_aafb .Filter .WriteString ()+"\u000a";};if _aafb .Height !=nil {_abbe +="\u002f\u0048\u0020"+_aafb .Height .WriteString ()+"\u000a";};if _aafb .ImageMask !=nil {_abbe +="\u002f\u0049\u004d\u0020"+_aafb .ImageMask .WriteString ()+"\u000a";};if _aafb .Intent !=nil {_abbe +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_aafb .Intent .WriteString ()+"\u000a";};if _aafb .Interpolate !=nil {_abbe +="\u002f\u0049\u0020"+_aafb .Interpolate .WriteString ()+"\u000a";};if _aafb .Width !=nil {_abbe +="\u002f\u0057\u0020"+_aafb .Width .WriteString ()+"\u000a";};_ddfd .WriteString (_abbe );_ddfd .WriteString ("\u0049\u0044\u0020");_ddfd .Write (_aafb ._aebc );_ddfd .WriteString ("\u000a\u0045\u0049\u000a");return _ddfd .String ();};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ged *ContentCreator )Add_W ()*ContentCreator {_ebd :=ContentStreamOperation {};_ebd .Operand ="\u0057";_ged ._deb =append (_ged ._deb ,&_ebd );return _ged ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_feg *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_acc :=ContentStreamOperation {};_acc .Operand ="\u0054\u0044";_acc .Params =_bccf ([]float64 {tx ,ty });_feg ._deb =append (_feg ._deb ,&_acc );return _feg ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cef *ContentCreator )Add_scn_pattern (name _bb .PdfObjectName ,c ...float64 )*ContentCreator {_bgc :=ContentStreamOperation {};_bgc .Operand ="\u0073\u0063\u006e";_bgc .Params =_bccf (c );_bgc .Params =append (_bgc .Params ,_bb .MakeName (string (name )));_cef ._deb =append (_cef ._deb ,&_bgc );return _cef ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fff *ContentCreator )Add_ET ()*ContentCreator {_ffg :=ContentStreamOperation {};_ffg .Operand ="\u0045\u0054";_fff ._deb =append (_fff ._deb ,&_ffg );return _fff ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_cfe *_ea .Reader };

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_faa *ContentCreator )Add_quote (textstr _bb .PdfObjectString )*ContentCreator {_ebc :=ContentStreamOperation {};_ebc .Operand ="\u0027";_ebc .Params =_egeg ([]_bb .PdfObjectString {textstr });_faa ._deb =append (_faa ._deb ,&_ebc );return _faa ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_egb *ContentCreator )Add_f_starred ()*ContentCreator {_gf :=ContentStreamOperation {};_gf .Operand ="\u0066\u002a";_egb ._deb =append (_egb ._deb ,&_gf );return _egb ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_bc *ContentStreamOperations )Bytes ()[]byte {var _ce _ee .Buffer ;for _ ,_ge :=range *_bc {if _ge ==nil {continue ;};if _ge .Operand =="\u0042\u0049"{_ce .WriteString (_ge .Operand +"\u000a");_ce .WriteString (_ge .Params [0].WriteString ());}else {for _ ,_gd :=range _ge .Params {_ce .WriteString (_gd .WriteString ());_ce .WriteString ("\u0020");};_ce .WriteString (_ge .Operand +"\u000a");};};return _ce .Bytes ();};func _cafd (_afcf string )bool {_ ,_egfd :=_efd [_afcf ];return _egfd };func (_edce *ContentStreamProcessor )handleCommand_RG (_gecc *ContentStreamOperation ,_agfg *_bd .PdfPageResources )error {_ega :=_bd .NewPdfColorspaceDeviceRGB ();if len (_gecc .Params )!=_ega .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gecc .Params ),_ega );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_abg ,_fbeg :=_ega .ColorFromPdfObjects (_gecc .Params );if _fbeg !=nil {return _fbeg ;};_edce ._bgb .ColorspaceStroking =_ega ;_edce ._bgb .ColorStroking =_abg ;return nil ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_abce *ContentCreator )Add_EMC ()*ContentCreator {_aec :=ContentStreamOperation {};_aec .Operand ="\u0045\u004d\u0043";_abce ._deb =append (_abce ._deb ,&_aec );return _abce ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fde *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_gedb :=ContentStreamOperation {};_gedb .Operand ="\u0054\u007a";_gedb .Params =_bccf ([]float64 {scale });_fde ._deb =append (_fde ._deb ,&_gedb );return _fde ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ddg *ContentCreator )Add_b_starred ()*ContentCreator {_gecd :=ContentStreamOperation {};_gecd .Operand ="\u0062\u002a";_ddg ._deb =append (_ddg ._deb ,&_gecd );return _ddg ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_egg *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _egg .Add_cm (1,0,0,1,tx ,ty );};func (_efe *ContentStreamParser )skipSpaces ()(int ,error ){_cac :=0;for {_egff ,_geb :=_efe ._cfe .Peek (1);if _geb !=nil {return 0,_geb ;};if _bb .IsWhiteSpace (_egff [0]){_efe ._cfe .ReadByte ();_cac ++;}else {break ;};};return _cac ,nil ;};var _efd =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ccc *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_geab :=ContentStreamOperation {};_geab .Operand ="\u0054\u0063";_geab .Params =_bccf ([]float64 {charSpace });_ccc ._deb =append (_ccc ._deb ,&_geab );return _ccc ;};func _bccf (_edgdd []float64 )[]_bb .PdfObject {var _deee []_bb .PdfObject ;for _ ,_caga :=range _edgdd {_deee =append (_deee ,_bb .MakeFloat (_caga ));};return _deee ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ade *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u004a";_ffe .Params =_bcab ([]_bb .PdfObjectName {_bb .PdfObjectName (lineCapStyle )});_ade ._deb =append (_ade ._deb ,&_ffe );return _ade ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_gdd *ContentCreator )Add_sh (name _bb .PdfObjectName )*ContentCreator {_dcg :=ContentStreamOperation {};_dcg .Operand ="\u0073\u0068";_dcg .Params =_bcab ([]_bb .PdfObjectName {name });_gdd ._deb =append (_gdd ._deb ,&_dcg );return _gdd ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dfd *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_agf :=ContentStreamOperation {};_agf .Operand ="\u0052\u0047";_agf .Params =_bccf ([]float64 {r ,g ,b });_dfd ._deb =append (_dfd ._deb ,&_agf );return _dfd ;};func (_fgd *ContentStreamParser )parseObject ()(_bcaf _bb .PdfObject ,_bdef bool ,_bafb error ){_fgd .skipSpaces ();for {_fefd ,_cbg :=_fgd ._cfe .Peek (2);if _cbg !=nil {return nil ,false ,_cbg ;};_f .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fefd ));if _fefd [0]=='%'{_fgd .skipComments ();continue ;}else if _fefd [0]=='/'{_adbe ,_baggd :=_fgd .parseName ();_f .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_adbe );return &_adbe ,false ,_baggd ;}else if _fefd [0]=='('{_f .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_cebf ,_bcdc :=_fgd .parseString ();return _cebf ,false ,_bcdc ;}else if _fefd [0]=='<'&&_fefd [1]!='<'{_f .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_dgae ,_dde :=_fgd .parseHexString ();return _dgae ,false ,_dde ;}else if _fefd [0]=='['{_f .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_gfd ,_eafc :=_fgd .parseArray ();return _gfd ,false ,_eafc ;}else if _bb .IsFloatDigit (_fefd [0])||(_fefd [0]=='-'&&_bb .IsFloatDigit (_fefd [1])){_f .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_beca ,_bdg :=_fgd .parseNumber ();return _beca ,false ,_bdg ;}else if _fefd [0]=='<'&&_fefd [1]=='<'{_ada ,_bbag :=_fgd .parseDict ();return _ada ,false ,_bbag ;}else {_f .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_fefd ,_ =_fgd ._cfe .Peek (5);_dgce :=string (_fefd );_f .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_dgce );if (len (_dgce )> 3)&&(_dgce [:4]=="\u006e\u0075\u006c\u006c"){_cce ,_dbd :=_fgd .parseNull ();return &_cce ,false ,_dbd ;}else if (len (_dgce )> 4)&&(_dgce [:5]=="\u0066\u0061\u006cs\u0065"){_cfdc ,_gcd :=_fgd .parseBool ();return &_cfdc ,false ,_gcd ;}else if (len (_dgce )> 3)&&(_dgce [:4]=="\u0074\u0072\u0075\u0065"){_edbe ,_gcgb :=_fgd .parseBool ();return &_edbe ,false ,_gcgb ;};_dbag ,_aeag :=_fgd .parseOperand ();if _aeag !=nil {return _dbag ,false ,_aeag ;};if len (_dbag .String ())< 1{return _dbag ,false ,ErrInvalidOperand ;};return _dbag ,true ,nil ;};};};func (_bacf *ContentStreamParser )parseBool ()(_bb .PdfObjectBool ,error ){_dcce ,_gedc :=_bacf ._cfe .Peek (4);if _gedc !=nil {return _bb .PdfObjectBool (false ),_gedc ;};if (len (_dcce )>=4)&&(string (_dcce [:4])=="\u0074\u0072\u0075\u0065"){_bacf ._cfe .Discard (4);return _bb .PdfObjectBool (true ),nil ;};_dcce ,_gedc =_bacf ._cfe .Peek (5);if _gedc !=nil {return _bb .PdfObjectBool (false ),_gedc ;};if (len (_dcce )>=5)&&(string (_dcce [:5])=="\u0066\u0061\u006cs\u0065"){_bacf ._cfe .Discard (5);return _bb .PdfObjectBool (false ),nil ;};return _bb .PdfObjectBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_aca *ContentCreator )Add_Tj (textstr _bb .PdfObjectString )*ContentCreator {_ffb :=ContentStreamOperation {};_ffb .Operand ="\u0054\u006a";_ffb .Params =_egeg ([]_bb .PdfObjectString {textstr });_aca ._deb =append (_aca ._deb ,&_ffb );return _aca ;};func _faad (_acab *ContentStreamInlineImage )(*_bb .MultiEncoder ,error ){_ecfg :=_bb .NewMultiEncoder ();var _fbg *_bb .PdfObjectDictionary ;var _fgfg []_bb .PdfObject ;if _eabbe :=_acab .DecodeParms ;_eabbe !=nil {_gef ,_bagg :=_eabbe .(*_bb .PdfObjectDictionary );if _bagg {_fbg =_gef ;};_cba ,_cab :=_eabbe .(*_bb .PdfObjectArray );if _cab {for _ ,_dedc :=range _cba .Elements (){if _ecbe ,_fee :=_dedc .(*_bb .PdfObjectDictionary );_fee {_fgfg =append (_fgfg ,_ecbe );}else {_fgfg =append (_fgfg ,nil );};};};};_adef :=_acab .Filter ;if _adef ==nil {return nil ,_gb .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_caa ,_fbga :=_adef .(*_bb .PdfObjectArray );if !_fbga {return nil ,_gb .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _fbbd ,_ageb :=range _caa .Elements (){_gdb ,_fgc :=_ageb .(*_bb .PdfObjectName );if !_fgc {return nil ,_gb .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _aeda _bb .PdfObject ;if _fbg !=nil {_aeda =_fbg ;}else {if len (_fgfg )> 0{if _fbbd >=len (_fgfg ){return nil ,_gb .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_aeda =_fgfg [_fbbd ];};};var _aaa *_bb .PdfObjectDictionary ;if _ggag ,_fge :=_aeda .(*_bb .PdfObjectDictionary );_fge {_aaa =_ggag ;};if *_gdb ==_bb .StreamEncodingFilterNameFlate ||*_gdb =="\u0046\u006c"{_fgff ,_afb :=_efa (_acab ,_aaa );if _afb !=nil {return nil ,_afb ;};_ecfg .AddEncoder (_fgff );}else if *_gdb ==_bb .StreamEncodingFilterNameLZW {_agb ,_fca :=_gdg (_acab ,_aaa );if _fca !=nil {return nil ,_fca ;};_ecfg .AddEncoder (_agb );}else if *_gdb ==_bb .StreamEncodingFilterNameASCIIHex {_acag :=_bb .NewASCIIHexEncoder ();_ecfg .AddEncoder (_acag );}else if *_gdb ==_bb .StreamEncodingFilterNameASCII85 ||*_gdb =="\u0041\u0038\u0035"{_abdf :=_bb .NewASCII85Encoder ();_ecfg .AddEncoder (_abdf );}else {_f .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_gdb );return nil ,_gb .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _ecfg ,nil ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_ffc GraphicStateStack ;_cdgb []*ContentStreamOperation ;_bgb GraphicsState ;_cff []handlerEntry ;_dab int ;};

// GetColorSpace returns the colorspace of the inline image.
func (_fdca *ContentStreamInlineImage )GetColorSpace (resources *_bd .PdfPageResources )(_bd .PdfColorspace ,error ){if _fdca .ColorSpace ==nil {_f .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _bd .NewPdfColorspaceDeviceGray (),nil ;};if _gdba ,_gcab :=_fdca .ColorSpace .(*_bb .PdfObjectArray );_gcab {return _facc (_gdba );};_dbb ,_gbae :=_fdca .ColorSpace .(*_bb .PdfObjectName );if !_gbae {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_fdca .ColorSpace ,_fdca .ColorSpace );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_dbb =="\u0047"||*_dbb =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _bd .NewPdfColorspaceDeviceGray (),nil ;}else if *_dbb =="\u0052\u0047\u0042"||*_dbb =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _bd .NewPdfColorspaceDeviceRGB (),nil ;}else if *_dbb =="\u0043\u004d\u0059\u004b"||*_dbb =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _bd .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_dbb =="\u0049"||*_dbb =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_e .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_f .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dbb );return nil ,_e .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_dag ,_dca :=resources .GetColorspaceByName (*_dbb );if !_dca {_f .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dbb );return nil ,_e .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _dag ,nil ;};};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_cdgda *ContentStreamProcessor )Process (resources *_bd .PdfPageResources )error {_cdgda ._bgb .ColorspaceStroking =_bd .NewPdfColorspaceDeviceGray ();_cdgda ._bgb .ColorspaceNonStroking =_bd .NewPdfColorspaceDeviceGray ();_cdgda ._bgb .ColorStroking =_bd .NewPdfColorDeviceGray (0);_cdgda ._bgb .ColorNonStroking =_bd .NewPdfColorDeviceGray (0);_cdgda ._bgb .CTM =_af .IdentityMatrix ();for _ ,_cecb :=range _cdgda ._cdgb {var _egbe error ;switch _cecb .Operand {case "\u0071":_cdgda ._ffc .Push (_cdgda ._bgb );case "\u0051":if len (_cdgda ._ffc )==0{_f .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_cdgda ._bgb =_cdgda ._ffc .Pop ();case "\u0043\u0053":_egbe =_cdgda .handleCommand_CS (_cecb ,resources );case "\u0063\u0073":_egbe =_cdgda .handleCommand_cs (_cecb ,resources );case "\u0053\u0043":_egbe =_cdgda .handleCommand_SC (_cecb ,resources );case "\u0053\u0043\u004e":_egbe =_cdgda .handleCommand_SCN (_cecb ,resources );case "\u0073\u0063":_egbe =_cdgda .handleCommand_sc (_cecb ,resources );case "\u0073\u0063\u006e":_egbe =_cdgda .handleCommand_scn (_cecb ,resources );case "\u0047":_egbe =_cdgda .handleCommand_G (_cecb ,resources );case "\u0067":_egbe =_cdgda .handleCommand_g (_cecb ,resources );case "\u0052\u0047":_egbe =_cdgda .handleCommand_RG (_cecb ,resources );case "\u0072\u0067":_egbe =_cdgda .handleCommand_rg (_cecb ,resources );case "\u004b":_egbe =_cdgda .handleCommand_K (_cecb ,resources );case "\u006b":_egbe =_cdgda .handleCommand_k (_cecb ,resources );case "\u0063\u006d":_egbe =_cdgda .handleCommand_cm (_cecb ,resources );};if _egbe !=nil {_f .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_cecb .Operand ,_egbe );_f .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_cecb .Operand );return _egbe ;};for _ ,_fefb :=range _cdgda ._cff {var _ebgb error ;if _fefb .Condition .All (){_ebgb =_fefb .Handler (_cecb ,_cdgda ._bgb ,resources );}else if _fefb .Condition .Operand ()&&_cecb .Operand ==_fefb .Operand {_ebgb =_fefb .Handler (_cecb ,_cdgda ._bgb ,resources );};if _ebgb !=nil {_f .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_ebgb );return _ebgb ;};};};return nil ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbf *ContentCreator )Add_G (gray float64 )*ContentCreator {_gafc :=ContentStreamOperation {};_gafc .Operand ="\u0047";_gafc .Params =_bccf ([]float64 {gray });_bbf ._deb =append (_bbf ._deb ,&_gafc );return _bbf ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ecc *ContentCreator )Add_f ()*ContentCreator {_afda :=ContentStreamOperation {};_afda .Operand ="\u0066";_ecc ._deb =append (_ecc ._deb ,&_afda );return _ecc ;};func (_baeg *ContentStreamProcessor )handleCommand_cm (_bdad *ContentStreamOperation ,_dgbe *_bd .PdfPageResources )error {if len (_bdad .Params )!=6{_f .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_bdad .Params ));return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dfgc ,_ebcf :=_bb .GetNumbersAsFloat (_bdad .Params );if _ebcf !=nil {return _ebcf ;};_gfaa :=_af .NewMatrix (_dfgc [0],_dfgc [1],_dfgc [2],_dfgc [3],_dfgc [4],_dfgc [5]);_baeg ._bgb .CTM .Concat (_gfaa );return nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_bba *ContentCreator )Bytes ()[]byte {return _bba ._deb .Bytes ()};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_def *ContentCreator )Add_q ()*ContentCreator {_dg :=ContentStreamOperation {};_dg .Operand ="\u0071";_def ._deb =append (_def ._deb ,&_dg );return _def ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_afe *ContentCreator )Add_n ()*ContentCreator {_edd :=ContentStreamOperation {};_edd .Operand ="\u006e";_afe ._deb =append (_afe ._deb ,&_edd );return _afe ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_deb ContentStreamOperations };

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cc *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dgcf :=ContentStreamOperation {};_dgcf .Operand ="\u0072\u0067";_dgcf .Params =_bccf ([]float64 {r ,g ,b });_cc ._deb =append (_cc ._deb ,&_dgcf );return _cc ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_adb *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_cdg :=ContentStreamOperation {};_cdg .Operand ="\u004d";_cdg .Params =_bccf ([]float64 {miterlimit });_adb ._deb =append (_adb ._deb ,&_cdg );return _adb ;};

// Push pushes `gs` on the `gsStack`.
func (_bcg *GraphicStateStack )Push (gs GraphicsState ){*_bcg =append (*_bcg ,gs )};func (_eeac *ContentStreamProcessor )handleCommand_scn (_bdfg *ContentStreamOperation ,_deafc *_bd .PdfPageResources )error {_ccgb :=_eeac ._bgb .ColorspaceNonStroking ;if !_bbge (_ccgb ){if len (_bdfg .Params )!=_ccgb .GetNumComponents (){_f .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_f .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bdfg .Params ),_ccgb );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_eecg ,_fbbf :=_ccgb .ColorFromPdfObjects (_bdfg .Params );if _fbbf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_bdfg .Params ,_ccgb );return _fbbf ;};_eeac ._bgb .ColorNonStroking =_eecg ;return nil ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bfd *ContentCreator )Add_Tstar ()*ContentCreator {_fgb :=ContentStreamOperation {};_fgb .Operand ="\u0054\u002a";_bfd ._deb =append (_bfd ._deb ,&_fgb );return _bfd ;};func _egeg (_gefb []_bb .PdfObjectString )[]_bb .PdfObject {var _degg []_bb .PdfObject ;for _ ,_affc :=range _gefb {_degg =append (_degg ,_bb .MakeString (_affc .Str ()));};return _degg ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cde *ContentCreator )Add_ri (intent _bb .PdfObjectName )*ContentCreator {_dcb :=ContentStreamOperation {};_dcb .Operand ="\u0072\u0069";_dcb .Params =_bcab ([]_bb .PdfObjectName {intent });_cde ._deb =append (_cde ._deb ,&_dcb );return _cde ;};func (_cgag *ContentStreamProcessor )getInitialColor (_bfg _bd .PdfColorspace )(_bd .PdfColor ,error ){switch _fffc :=_bfg .(type ){case *_bd .PdfColorspaceDeviceGray :return _bd .NewPdfColorDeviceGray (0.0),nil ;case *_bd .PdfColorspaceDeviceRGB :return _bd .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_bd .PdfColorspaceDeviceCMYK :return _bd .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_bd .PdfColorspaceCalGray :return _bd .NewPdfColorCalGray (0.0),nil ;case *_bd .PdfColorspaceCalRGB :return _bd .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_bd .PdfColorspaceLab :_gff :=0.0;_gfde :=0.0;_gbeg :=0.0;if _fffc .Range [0]> 0{_gff =_fffc .Range [0];};if _fffc .Range [2]> 0{_gfde =_fffc .Range [2];};return _bd .NewPdfColorLab (_gff ,_gfde ,_gbeg ),nil ;case *_bd .PdfColorspaceICCBased :if _fffc .Alternate ==nil {_f .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_fffc .N );if _fffc .N ==1{_f .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _cgag .getInitialColor (_bd .NewPdfColorspaceDeviceGray ());}else if _fffc .N ==3{_f .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _cgag .getInitialColor (_bd .NewPdfColorspaceDeviceRGB ());}else if _fffc .N ==4{_f .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _cgag .getInitialColor (_bd .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_e .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _cgag .getInitialColor (_fffc .Alternate );case *_bd .PdfColorspaceSpecialIndexed :if _fffc .Base ==nil {return nil ,_e .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _cgag .getInitialColor (_fffc .Base );case *_bd .PdfColorspaceSpecialSeparation :if _fffc .AlternateSpace ==nil {return nil ,_e .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _cgag .getInitialColor (_fffc .AlternateSpace );case *_bd .PdfColorspaceDeviceN :if _fffc .AlternateSpace ==nil {return nil ,_e .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _cgag .getInitialColor (_fffc .AlternateSpace );case *_bd .PdfColorspaceSpecialPattern :return nil ,nil ;};_f .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bfg );return nil ,_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_abc :=&ContentCreator {};_abc ._deb =ContentStreamOperations {};return _abc ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_gdec *ContentCreator )Add_BMC (tag _bb .PdfObjectName )*ContentCreator {_dgcd :=ContentStreamOperation {};_dgcd .Operand ="\u0042\u004d\u0043";_dgcd .Params =_bcab ([]_bb .PdfObjectName {tag });_gdec ._deb =append (_gdec ._deb ,&_dgcd );return _gdec ;};func (_afd *ContentStreamOperations )isWrapped ()bool {if len (*_afd )< 2{return false ;};_ac :=0;for _ ,_gab :=range *_afd {if _gab .Operand =="\u0071"{_ac ++;}else if _gab .Operand =="\u0051"{_ac --;}else {if _ac < 1{return false ;};};};return _ac ==0;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fcce *ContentCreator )Add_Tf (fontName _bb .PdfObjectName ,fontSize float64 )*ContentCreator {_fbf :=ContentStreamOperation {};_fbf .Operand ="\u0054\u0066";_fbf .Params =_bcab ([]_bb .PdfObjectName {fontName });_fbf .Params =append (_fbf .Params ,_bccf ([]float64 {fontSize })...);_fcce ._deb =append (_fcce ._deb ,&_fbf );return _fcce ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ecb *ContentCreator )Wrap (){_ecb ._deb .WrapIfNeeded ()};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gbc *ContentCreator )Add_SCN_pattern (name _bb .PdfObjectName ,c ...float64 )*ContentCreator {_cgb :=ContentStreamOperation {};_cgb .Operand ="\u0053\u0043\u004e";_cgb .Params =_bccf (c );_cgb .Params =append (_cgb .Params ,_bb .MakeName (string (name )));_gbc ._deb =append (_gbc ._deb ,&_cgb );return _gbc ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_edb *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_gcf :=ContentStreamOperation {};_gcf .Operand ="\u0053\u0043";_gcf .Params =_bccf (c );_edb ._deb =append (_edb ._deb ,&_gcf );return _edb ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cae *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_fcb :=ContentStreamOperation {};_fcb .Operand ="\u0077";_fcb .Params =_bccf ([]float64 {lineWidth });_cae ._deb =append (_cae ._deb ,&_fcb );return _cae ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_baa :=ContentStreamProcessor {};_baa ._ffc =GraphicStateStack {};_fbfaa :=GraphicsState {};_baa ._bgb =_fbfaa ;_baa ._cff =[]handlerEntry {};_baa ._dab =0;_baa ._cdgb =ops ;return &_baa ;};func (_fgeb *ContentStreamParser )parseName ()(_bb .PdfObjectName ,error ){_cdc :="";_ecd :=false ;for {_bfe ,_aea :=_fgeb ._cfe .Peek (1);if _aea ==_ga .EOF {break ;};if _aea !=nil {return _bb .PdfObjectName (_cdc ),_aea ;};if !_ecd {if _bfe [0]=='/'{_ecd =true ;_fgeb ._cfe .ReadByte ();}else {_f .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_bfe ,_bfe );return _bb .PdfObjectName (_cdc ),_gb .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_bfe [0]);};}else {if _bb .IsWhiteSpace (_bfe [0]){break ;}else if (_bfe [0]=='/')||(_bfe [0]=='[')||(_bfe [0]=='(')||(_bfe [0]==']')||(_bfe [0]=='<')||(_bfe [0]=='>'){break ;}else if _bfe [0]=='#'{_egdb ,_cec :=_fgeb ._cfe .Peek (3);if _cec !=nil {return _bb .PdfObjectName (_cdc ),_cec ;};_fgeb ._cfe .Discard (3);_cdee ,_cec :=_b .DecodeString (string (_egdb [1:3]));if _cec !=nil {return _bb .PdfObjectName (_cdc ),_cec ;};_cdc +=string (_cdee );}else {_dgb ,_ :=_fgeb ._cfe .ReadByte ();_cdc +=string (_dgb );};};};return _bb .PdfObjectName (_cdc ),nil ;};func _facc (_bdge _bb .PdfObject )(_bd .PdfColorspace ,error ){_abed ,_face :=_bdge .(*_bb .PdfObjectArray );if !_face {_f .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_bdge );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _abed .Len ()!=4{_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_abed .Len ());return nil ,_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cfa ,_face :=_abed .Get (0).(*_bb .PdfObjectName );if !_face {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_abed );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_cfa !="\u0049"&&*_cfa !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_f .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_cfa );return nil ,_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cfa ,_face =_abed .Get (1).(*_bb .PdfObjectName );if !_face {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_abed );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_cfa !="\u0047"&&*_cfa !="\u0052\u0047\u0042"&&*_cfa !="\u0043\u004d\u0059\u004b"&&*_cfa !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_cfa !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_cfa !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_cfa );return nil ,_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_dcbc :="";switch *_cfa {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_dcbc ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_dcbc ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_dcbc ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_gdfe :=_bb .MakeArray (_bb .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_bb .MakeName (_dcbc ),_abed .Get (2),_abed .Get (3));return _bd .NewPdfColorspaceFromPdfObject (_gdfe );};

// Transform returns coordinates x, y transformed by the CTM.
func (_aeg *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _aeg .CTM .Transform (x ,y );};func (_gbd *ContentStreamParser )skipComments ()error {if _ ,_fccb :=_gbd .skipSpaces ();_fccb !=nil {return _fccb ;};_bca :=true ;for {_cfcd ,_egea :=_gbd ._cfe .Peek (1);if _egea !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_egea .Error ());return _egea ;};if _bca &&_cfcd [0]!='%'{return nil ;};_bca =false ;if (_cfcd [0]!='\r')&&(_cfcd [0]!='\n'){_gbd ._cfe .ReadByte ();}else {break ;};};return _gbd .skipComments ();};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ecg *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_fb :=ContentStreamOperation {};_fb .Operand ="\u006c";_fb .Params =_bccf ([]float64 {x ,y });_ecg ._deb =append (_ecg ._deb ,&_fb );return _ecg ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ae *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_age :=ContentStreamOperation {};_age .Operand ="\u006a";_age .Params =_bcab ([]_bb .PdfObjectName {_bb .PdfObjectName (lineJoinStyle )});_ae ._deb =append (_ae ._deb ,&_age );return _ae ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fe *ContentCreator )Add_gs (dictName _bb .PdfObjectName )*ContentCreator {_eda :=ContentStreamOperation {};_eda .Operand ="\u0067\u0073";_eda .Params =_bcab ([]_bb .PdfObjectName {dictName });_fe ._deb =append (_fe ._deb ,&_eda );return _fe ;};