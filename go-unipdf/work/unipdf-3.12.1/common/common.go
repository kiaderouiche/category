//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_e "fmt";_ec "io";_gb "os";_g "path/filepath";_ab "runtime";_a "time";);

// DummyLogger does nothing.
type DummyLogger struct{};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_dg ConsoleLogger )IsLogLevel (level LogLevel )bool {return _dg .LogLevel >=level };func UtcTimeFormat (t _a .Time )string {return t .Format (_ccc )+"\u0020\u0055\u0054\u0043"};const _beg =9;const Version ="\u0033\u002e\u0031\u0032\u002e\u0031";

// Error logs error message.
func (_fb ConsoleLogger )Error (format string ,args ...interface{}){if _fb .LogLevel >=LogLevelError {_ag :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_fb .output (_gb .Stdout ,_ag ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Info logs info message.
func (_ca ConsoleLogger )Info (format string ,args ...interface{}){if _ca .LogLevel >=LogLevelInfo {_abfg :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ca .output (_gb .Stdout ,_abfg ,format ,args ...);};};var ReleasedAt =_a .Date (_abc ,_beg ,_eeef ,_ce ,_eb ,0,0,_a .UTC );

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_bb WriterLogger )IsLogLevel (level LogLevel )bool {return _bb .LogLevel >=level };func (_aa ConsoleLogger )output (_bd _ec .Writer ,_fa string ,_eee string ,_bga ...interface{}){_eed (_bd ,_fa ,_eee ,_bga ...);};

// LogLevel is the verbosity level for logging.
type LogLevel int ;var Log Logger =DummyLogger {};func _eed (_cc _ec .Writer ,_dbg string ,_dcd string ,_dca ...interface{}){_ ,_be ,_bef ,_dce :=_ab .Caller (3);if !_dce {_be ="\u003f\u003f\u003f";_bef =0;}else {_be =_g .Base (_be );};_gdf :=_e .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_dbg ,_be ,_bef )+_dcd +"\u000a";_e .Fprintf (_cc ,_gdf ,_dca ...);};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Error logs error message.
func (_bcg WriterLogger )Error (format string ,args ...interface{}){if _bcg .LogLevel >=LogLevelError {_fce :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bcg .logToWriter (_bcg .Output ,_fce ,format ,args ...);};};

// Warning logs warning message.
func (_ac ConsoleLogger )Warning (format string ,args ...interface{}){if _ac .LogLevel >=LogLevelWarning {_ba :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ac .output (_gb .Stdout ,_ba ,format ,args ...);};};

// Notice logs notice message.
func (_bab WriterLogger )Notice (format string ,args ...interface{}){if _bab .LogLevel >=LogLevelNotice {_eca :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bab .logToWriter (_bab .Output ,_eca ,format ,args ...);};};

// Warning logs warning message.
func (_ecg WriterLogger )Warning (format string ,args ...interface{}){if _ecg .LogLevel >=LogLevelWarning {_caa :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ecg .logToWriter (_ecg .Output ,_caa ,format ,args ...);};};const _eeef =28;

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_ed string ,_ad ...interface{});Warning (_ee string ,_ef ...interface{});Notice (_gg string ,_c ...interface{});Info (_abf string ,_b ...interface{});Debug (_cd string ,_d ...interface{});Trace (_bc string ,_fc ...interface{});IsLogLevel (_edf LogLevel )bool ;};

// Trace logs trace message.
func (_geg WriterLogger )Trace (format string ,args ...interface{}){if _geg .LogLevel >=LogLevelTrace {_gf :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_geg .logToWriter (_geg .Output ,_gf ,format ,args ...);};};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Notice logs notice message.
func (_da ConsoleLogger )Notice (format string ,args ...interface{}){if _da .LogLevel >=LogLevelNotice {_gc :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_da .output (_gb .Stdout ,_gc ,format ,args ...);};};const _abc =2020;

// Info logs info message.
func (_dc WriterLogger )Info (format string ,args ...interface{}){if _dc .LogLevel >=LogLevelInfo {_bdc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_dc .logToWriter (_dc .Output ,_bdc ,format ,args ...);};};const _ccc ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// Debug logs debug message.
func (_fe ConsoleLogger )Debug (format string ,args ...interface{}){if _fe .LogLevel >=LogLevelDebug {_bg :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fe .output (_gb .Stdout ,_bg ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const _ce =21;

// Debug logs debug message.
func (_ge WriterLogger )Debug (format string ,args ...interface{}){if _ge .LogLevel >=LogLevelDebug {_dgg :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ge .logToWriter (_ge .Output ,_dgg ,format ,args ...);};};

// Trace logs trace message.
func (_gd ConsoleLogger )Trace (format string ,args ...interface{}){if _gd .LogLevel >=LogLevelTrace {_af :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gd .output (_gb .Stdout ,_af ,format ,args ...);};};func (_gdb WriterLogger )logToWriter (_fg _ec .Writer ,_dcf string ,_db string ,_cae ...interface{}){_eed (_fg ,_dcf ,_db ,_cae );};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _ec .Writer )*WriterLogger {_aba :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_aba ;};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const _eb =50;

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _ec .Writer ;};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);