Installation
------------

The installation uses cmake. Type:

cmake . # check requirements and generate Makefile
make    # actual compilation

ARU relies on nlopt, SWIG, and ROOT. In addition, the Python
modules numpy and scipy need to be installed.

The required software can be downloaded here:
cmake         - http://www.cmake.org
nlopt         - http://ab-initio.mit.edu/wiki/index.php/Main_Page
ROOT          - http://root.cern.ch/drupal
SWIG          - http://www.swig.org
numpy & scipy - http://www.scipy.org

Chances are high that packages for ROOT and SWIG are available for your
Linux distribution, same goes for numpy and scipy. The latter two can also
be installed conveniently with easy_install (part of the Python module
setuptools).

Using ARU
---------

In order to use ARU, you need to
- adapt "MyKernel.h"
- supply a data file "data.root" with the raw data
You can then use "unfold.py" to unfold your data. "MyKernel.h"
needs to implement the detector kernel of your experiment, have a look
inside and into "src/VKernel.h". At the very least you need to implement
the member function "ResolutionPdf(...)".

By default, "unfold.py" loads your raw data from a ROOT file with a single
TNtupleD inside which has the observations stored as a single variable.

Have a look inside unfold.py (which is documented) to see what you can adapt
to your situation. You may want to restrict the range of the unfolded
variable, for example. You can also easily change the way how "unfold.py"
loads the data, so that it does not have to be a ROOT file.

Tests
-----
You can run some tests to check the installation and ARU's performance.
The tests are located in the "tests" folder and need to be called with from
the root directory of the installation (where CMakeLists.txt is located).

make_toy_data.py:
Use this to generate a trivial toy data set to ready be used with "unfold.py".

blobel.py:
Unfolds the example found in
V. Blobel, Unfolding methods in high energy physics experiments,
Proceedings of the 1984 CERN School of Computing (1984).
An optional integer argument may be supplied, which is used as the random
seed.

regfit.py:
Unfolds another example, two Gaussian peaks, one very narrow, one wide.
You need to supply two integer arguments. First is the random seed, second
is the number of MC events to unfold.

Licence and references
----------------------
The ARU source code is released under the GPL v3, see the file COPYRIGHT.
Copyright holder is the Karlsruhe Institute of Technology (KIT).
The author to contact is Dr. Hans Dembinski <hans.dembinski@kit.edu>.

If you use ARU in your publications, please use this citation for now:

H.P. Dembinski and M. Roth,
ARU - towards automatic unfolding of detector effects,
to appear in the Proceedings of PHYSTAT 2011, CERN, 2011.

Future versions of ARU will be released via hepforge, please check this URL
for updates of the source code and the reference:

http://projects.hepforge.org/aru
