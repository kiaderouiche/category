(* :Copyright:

   ====================================================================
   This file is part of FlexibleSUSY.

   FlexibleSUSY is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation, either version 3 of the License,
   or (at your option) any later version.

   FlexibleSUSY is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with FlexibleSUSY.  If not, see
   <http://www.gnu.org/licenses/>.
   ====================================================================

*)

writeNBCSubroutine[filename_, name_, params_, pdecls_, arrays_, complexVars_,
		   nxs_, BCs_] :=
Block[{
    realBCs = ComplexExpand[
	Flatten[{Re[#],Im[#]}& /@ Flatten[{BCs}]], complexVars],
    nBCs,
    pars = Table[x[i], {i,nxs}],
    mArrays = Join[arrays, {x, row}],
    derivs, BC0s, tags, zero, mat, independent,
    stmt
  },
derivs = D[realBCs, #]& /@ pars;
BC0s = realBCs - pars.derivs;
tags = Table[zero[i],{i,Length[BC0s]}];
mat = Transpose[Cases[RowReduce[Transpose[Join[derivs, {BC0s, tags}]],
				ZeroTest -> (PossibleZeroQ[# /. _zero -> 0]&)],
		      Except[{___?PossibleZeroQ,_}]]];
independent =
      Sort[Union[Flatten[Cases[Last[mat], _zero, Infinity] /. zero[i_] :> i]]];
nBCs = Length[independent];
WriteString[filename,
  "C\n",
  "C  generated by\n",
  "C  writeNBCSubroutine[",InputForm[filename],", ",InputForm[name],", ...]\n",
  "C\n",
  "\n",
  "      double precision function ",name,"_n(\n",
  "     &",params,
  "     &scale0,x,i)\n",
  pdecls,
  "      double precision scale0,x(",nxs,")\n",
  "      integer i\n",
  "\n",
  gotoStatement[nBCs],
  "\n",
  "        stop 'NBC'\n"];
Do[WriteString[filename,
  stmt = fortranAssign[name <> "_n",
		       HornerForm[realBCs[[independent[[i]]]]], mArrays];
  putLabel[i, stmt],
  "        return\n"],
  {i,nBCs}];
WriteString[filename,
  "      end function\n",
  "\n",
  "\n"];
];

writeNBCs[filename_, params_, pdecls_, arrays_, cplxVars_, BCs_, otherVars_] :=
Block[{
    variables = Join[BCs[[All,2]], otherVars],
    nxs
  },
  nxs = Max[Cases[variables, x[i_] :> i, Infinity]];
  writeNBCSubroutine[filename, #[[1]], params, pdecls, arrays, cplxVars,
		     nxs, #[[2]]]& /@ BCs;
];

writeNMCSubroutine[filename_, name_, params_, pdecls_, arrays_, complexVars_,
		   nws_, nxs_, MCs_] :=
Block[{
    realMCs = ComplexExpand[
	Flatten[{Re[#],Im[#]}& /@ Flatten[{MCs}]], complexVars],
    nMCs,
    pars = Join[Table[w[i], {i,nws}], Table[x[i], {i,nxs}]],
    npars = nws + nxs,
    mArrays = Join[arrays, {w, x, row}],
    derivs, MC0s, tags, zero, mat, independent,
    stmt
  },
derivs = D[realMCs, #]& /@ pars;
MC0s = realMCs - pars.derivs;
tags = Table[zero[i],{i,Length[MC0s]}];
mat = Transpose[Cases[RowReduce[Transpose[Join[derivs, {MC0s, tags}]],
				ZeroTest -> (PossibleZeroQ[# /. _zero -> 0]&)],
		      Except[{___?PossibleZeroQ,_}]]];
independent =
      Sort[Union[Flatten[Cases[Last[mat], _zero, Infinity] /. zero[i_] :> i]]];
nMCs = Length[independent];
WriteString[filename,
  "C\n",
  "C  generated by\n",
  "C  writeNMCSubroutine[",InputForm[filename],", ",InputForm[name],", ...]\n",
  "C\n",
  "\n",
  "      double precision function ",name,"_n(\n",
  "     &",params,
  "     &scale0,w,x,i)\n",
  pdecls,
  "      double precision scale0,w(",nws,"),x(",nxs,")\n",
  "      integer i\n",
  "\n",
  gotoStatement[nMCs],
  "\n",
  "        stop 'NMC'\n"];
Do[WriteString[filename,
  stmt = fortranAssign[name <> "_n",
		       HornerForm[realMCs[[independent[[i]]]]], mArrays];
  putLabel[i, stmt],
  "        return\n"],
  {i,nMCs}];
WriteString[filename,
  "      end function\n",
  "\n",
  "\n"];
];

writeNMCs[filename_, params_, pdecls_, arrays_, cplxVars_, MCs_, otherVars_] :=
Block[{
    variables = Join[MCs[[All,2]], otherVars],
    nws, nxs
  },
  nws = Max[Cases[variables, w[i_] :> i, Infinity]];
  nxs = Max[Cases[variables, x[i_] :> i, Infinity]];
  writeNMCSubroutine[filename, #[[1]], params, pdecls, arrays, cplxVars,
		    nws, nxs, #[[2]]]& /@ MCs;
];

writeNBCDepsSubroutine[filename_, name_, complexVars_, nxs_, BCs_] :=
Block[{
    realBCs = ComplexExpand[
	Flatten[{Re[#],Im[#]}& /@ Flatten[{BCs}]], complexVars],
    nBCs,
    pars = Table[x[i], {i,nxs}],
    derivs, BC0s, tags, zero, mat, independent,
    stmt,
    deps,vectors
  },
derivs = D[realBCs, #]& /@ pars;
BC0s = realBCs - pars.derivs;
tags = Table[zero[i],{i,Length[BC0s]}];
mat = Transpose[Cases[RowReduce[Transpose[Join[derivs, {BC0s, tags}]],
				ZeroTest -> (PossibleZeroQ[# /. _zero -> 0]&)],
		      Except[{___?PossibleZeroQ,_}]]];
independent =
      Sort[Union[Flatten[Cases[Last[mat], _zero, Infinity] /. zero[i_] :> i]]];
nBCs = Length[independent];
deps = Union[Cases[Simplify[realBCs[[#]]], x[i_] :> i, {0,Infinity}]]& /@
      independent;
vectors = Flatten[{"        ",ToString[#-1],",\n"}& /@ deps];
vectors[[-1]] = "\n";
WriteString[filename,
  "std::vector<std::vector<size_t>>\n",name,"()\n",
  "{\n",
  "    return {\n",
  StringJoin[vectors],
  "    };\n",
  "}\n",
  "\n"];
];

writeNBCDeps[filename_, complexVars_, BCs_, otherVars_] := Block[{
    variables = Join[BCs[[All,2]], otherVars],
    nxs
  },
  nxs = Max[Cases[variables, x[i_] :> i, Infinity]];
  writeNBCDepsSubroutine[filename, #[[1]], complexVars, nxs, #[[2]]]& /@
    BCs;
];

writeNMCDepsSubroutine[filename_, name_, complexVars_, nws_, nxs_, MCs_] :=
Block[{
    realMCs = ComplexExpand[
	Flatten[{Re[#],Im[#]}& /@ Flatten[{MCs}]], complexVars],
    nMCs,
    pars = Join[Table[w[i], {i,nws}], Table[x[i], {i,nxs}]],
    derivs, MC0s, tags, zero, mat, independent,
    stmt,
    deps,vectors
  },
derivs = D[realMCs, #]& /@ pars;
MC0s = realMCs - pars.derivs;
tags = Table[zero[i],{i,Length[MC0s]}];
mat = Transpose[Cases[RowReduce[Transpose[Join[derivs, {MC0s, tags}]],
				ZeroTest -> (PossibleZeroQ[# /. _zero -> 0]&)],
		      Except[{___?PossibleZeroQ,_}]]];
independent =
      Sort[Union[Flatten[Cases[Last[mat], _zero, Infinity] /. zero[i_] :> i]]];
nMCs = Length[independent];
deps = {Union[Cases[Simplify[realMCs[[#]]], w[i_] :> i, {0,Infinity}]],
	Union[Cases[Simplify[realMCs[[#]]], x[i_] :> i, {0,Infinity}]]}& /@
      independent;
vectors = Flatten[{"        ",ToString[#-1],",\n"}&/@ deps];
vectors[[-1]] = "\n";
WriteString[filename,
  "std::vector<std::vector<std::vector<size_t>>>\n",name,"()\n",
  "{\n",
  "    return {\n",
  StringJoin[vectors],
  "    };\n",
  "}\n",
  "\n"];
];

writeNMCDeps[filename_, complexVars_, MCs_, otherVars_] := Block[{
    variables = Join[MCs[[All,2]], otherVars],
    nws, nxs
  },
  nws = Max[Cases[variables, w[i_] :> i, Infinity]];
  nxs = Max[Cases[variables, x[i_] :> i, Infinity]];
  writeNMCDepsSubroutine[filename, #[[1]], complexVars, nws, nxs, #[[2]]]& /@
    MCs;
];
