FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
AutomaticInputAtMSUSY = False;
FSDefaultSARAHModel = "HGTHDM-II";

(* input parameters *)

MINPAR = {
    {3, TanBeta}
};

EXTPAR = {
    {0, MSUSY},
    {1, MEWSB},
    {2, MuInput},
    {3, M1Input},
    {4, M2Input},
    {5, M3Input},
    {6, MAInput},
    {100, LambdaLoopOrder}
};

FSAuxiliaryParameterInfo = {
    {AeInput,  { LesHouches -> AeIN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {AdInput,  { LesHouches -> AdIN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {AuInput,  { LesHouches -> AuIN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {mslInput, { LesHouches -> MSLIN,
                 ParameterDimensions -> {3},
                 InputParameter -> True
               } },
    {mseInput, { LesHouches -> MSEIN,
                 ParameterDimensions -> {3},
                 InputParameter -> True
               } },
    {msqInput, { LesHouches -> MSQIN,
                 ParameterDimensions -> {3},
                 InputParameter -> True
               } },
    {msdInput, { LesHouches -> MSDIN,
                 ParameterDimensions -> {3},
                 InputParameter -> True
               } },
    {msuInput, { LesHouches -> MSUIN,
                 ParameterDimensions -> {3},
                 InputParameter -> True
               } }
};

EWSBOutputParameters = { M112, M222 };

(* The high scale where we match to the MSSM *)
HighScale = MSUSY;

HighScaleFirstGuess = MSUSY;

Needs["THDMThresholds1L`", FileNameJoin[{Directory[], "meta", "THDM", "Thresholds_1L_full.m"}]];

translate = {
    gY            -> GUTNormalization[g1] g1,
    Tu[idx__]     :> AuInput[idx] Yu[idx],
    Td[idx__]     :> AdInput[idx] Yd[idx],
    Te[idx__]     :> AeInput[idx] Ye[idx],
    msl[idx__]    :> mslInput[idx],
    mse[idx__]    :> mseInput[idx],
    msq[idx__]    :> msqInput[idx],
    msu[idx__]    :> msuInput[idx],
    msd[idx__]    :> msdInput[idx],
    M1            -> MassB,
    M2            -> MassWB,
    Mu            -> \[Mu],
    Q             -> SCALE,
    Conjugate[p_] :> p,
    B0[m1_,m2_,mu_]              :> TCB0[m1,m2,mu],
    DB0[m1_,m2_]                 :> TCDB0[m1,m2],
    C0[m1_,m2_,m3_]              :> TCC0[m1,m2,m3],
    D0[m1_,m2_,m3_,m4_]          :> TCD0[m1,m2,m3,m4],
    D2tilde[m1_,m2_,m3_,m4_]     :> TCD2t[m1,m2,m3,m4],
    D4tilde[m1_,m2_,m3_,m4_,mu_] :> TCD4t[m1,m2,m3,m4,mu],
    W[m1_,m2_,mu_]               :> TCW[m1,m2,mu]
};

transposeYuks = {
    Yu[i_,j_] :> Yu[j,i],
    Yd[i_,j_] :> Yd[j,i],
    Ye[i_,j_] :> Ye[j,i],
    AuInput[i_,j_] :> AuInput[j,i],
    AdInput[i_,j_] :> AdInput[j,i],
    AeInput[i_,j_] :> AeInput[j,i]
};

(* flags to disable Higgsino + gaugino contributions *)
hgthmdFlags = Join[{flagIno -> 0}, GetTHDMThresholds1LFlags[]];

deltaLambda0L = GetTHDMThresholds1L[loopOrder -> {1,0}, flags -> hgthmdFlags] //. translate /. transposeYuks;
deltaLambda1L = GetTHDMThresholds1L[loopOrder -> {0,1}, flags -> hgthmdFlags] //. translate /. transposeYuks;

HighScaleInput = {
    {g1d    , g2          },
    {g1dp   , GUTNormalization[g1] g1 (* gY *)},
    {g2u    , g2          },
    {g2up   , GUTNormalization[g1] g1 (* gY *)},
    {Lambda1, 1/2 (deltaLambda0L[[1]]
                   + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[1]]
                   + UnitStep[LambdaLoopOrder-2] deltaLambda1th2L)},
    {Lambda2, 1/2 (deltaLambda0L[[2]]
                   + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[2]]
                   + UnitStep[LambdaLoopOrder-2] deltaLambda2th2L)},
    {Lambda3, deltaLambda0L[[3]]
              + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[3]]
              + UnitStep[LambdaLoopOrder-2] deltaLambda3th2L},
    {Lambda4, deltaLambda0L[[4]]
              + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[4]]
              + UnitStep[LambdaLoopOrder-2] deltaLambda4th2L},
    {Lambda5, deltaLambda0L[[5]]
              + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[5]]
              + UnitStep[LambdaLoopOrder-2] deltaLambda5th2L},
    {Lambda6, deltaLambda0L[[6]]
              + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[6]]
              + UnitStep[LambdaLoopOrder-2] deltaLambda6th2L},
    {Lambda7, deltaLambda0L[[7]]
              + UnitStep[LambdaLoopOrder-1] deltaLambda1L[[7]]
              + UnitStep[LambdaLoopOrder-2] deltaLambda7th2L}
};

(* The scale where we impose the EWSB conditions
   and calculate the spectrum *)
SUSYScale = MEWSB;

SUSYScaleFirstGuess = MEWSB;

SUSYScaleInput = {
    {\[Mu]  , MuInput },
    {MassB  , M1Input },
    {MassWB , M2Input },
    {MassG  , M3Input },
    {M122   , MAInput^2 Sin[ArcTan[v2/v1]] Cos[ArcTan[v2/v1]]}
};

LowScale = LowEnergyConstant[MT];

LowScaleFirstGuess = LowEnergyConstant[MT];

LowScaleInput = {
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic},
   {v1, 2 MZMSbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Cos[ArcTan[TanBeta]]},
   {v2, 2 MZMSbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Sin[ArcTan[TanBeta]]}
};

InitialGuessAtLowScale = {
   {v1, LowEnergyConstant[vev] Cos[ArcTan[TanBeta]]},
   {v2, LowEnergyConstant[vev] Sin[ArcTan[TanBeta]]},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic},
   {\[Mu]  , MuInput },
   {MassB  , M1Input },
   {MassWB , M2Input },
   {MassG  , M3Input },
   {M122   , MAInput^2 Sin[ArcTan[TanBeta]] Cos[ArcTan[TanBeta]]}
};

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision    = {hh};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

(* arxiv:1508.00576, Eq. (59) *)
deltaLambda1th2L = With[{
    kappa = 1/(4 Pi)^2,
    ht = Yu[3,3],
    muMS = \[Mu] / MSUSY
    },
    (
        -4/3 kappa^2 ht^4 g3^2 muMS^4
    )
];

(* arxiv:1508.00576, Eq. (60) *)
deltaLambda2th2L = With[{
    kappa = 1/(4 Pi)^2,
    ht = Yu[3,3],
    muMS = \[Mu] / MSUSY,
    AtMS = AuInput[3,3] / MSUSY
    },
    (
        16 kappa^2 ht^4 g3^2 (-2 AtMS + 1/3 AtMS^3 - 1/12 AtMS^4)
    )
];

(* arxiv:1508.00576, Eq. (61) *)
deltaLambda3th2L = With[{
    kappa = 1/(4 Pi)^2,
    ht = Yu[3,3],
    muMS = \[Mu] / MSUSY,
    AtMS = AuInput[3,3] / MSUSY
    },
    (
        2 kappa^2 ht^4 g3^2 AtMS muMS^2 (1 - 1/2 AtMS)
    )
];

deltaLambda4th2L = deltaLambda3th2L;
deltaLambda5th2L = 0;

(* arxiv:1508.00576, Eq. (62) *)
deltaLambda6th2L = With[{
    kappa = 1/(4 Pi)^2,
    ht = Yu[3,3],
    muMS = \[Mu] / MSUSY,
    AtMS = AuInput[3,3] / MSUSY
    },
    (
        4/3 kappa^2 ht^4 g3^2 muMS^3 (-1 + AtMS)
    )
];

(* arxiv:1508.00576, Eq. (63) *)
deltaLambda7th2L = With[{
    kappa = 1/(4 Pi)^2,
    ht = Yu[3,3],
    muMS = \[Mu] / MSUSY,
    AtMS = AuInput[3,3] / MSUSY
    },
    (
        4 kappa^2 ht^4 g3^2 muMS (2 - AtMS^2 + 1/3 AtMS^3)
    )
];
