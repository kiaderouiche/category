//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_c "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/contentstream";_ca "github.com/unidoc/unipdf/v3/contentstream/draw";_d "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_b .PdfPage )error {_be ,_f :=page .GetMediaBox ();if _f !=nil {return _f ;};_db :=page .Rotate ;_a :=_db !=nil &&*_db %360!=0&&*_db %90==0;_be .Normalize ();_cab ,_caf ,_eb ,_ab :=_be .Llx ,_be .Lly ,_be .Width (),_be .Height ();_ag :=_cab !=0||_caf !=0;if !_a &&!_ag {return nil ;};_eed :=func (_g ,_dc ,_bd float64 )_ca .BoundingBox {return _ca .Path {Points :[]_ca .Point {_ca .NewPoint (0,0).Rotate (_bd ),_ca .NewPoint (_g ,0).Rotate (_bd ),_ca .NewPoint (0,_dc ).Rotate (_bd ),_ca .NewPoint (_g ,_dc ).Rotate (_bd )}}.GetBoundingBox ();};_ea :=_ee .NewContentCreator ();var _ead float64 ;if _a {_ead =-float64 (*page .Rotate );_fd :=_eed (_eb ,_ab ,_ead );_ea .Translate ((_fd .Width -_eb )/2+_eb /2,(_fd .Height -_ab )/2+_ab /2);_ea .RotateDeg (_ead );_ea .Translate (-_eb /2,-_ab /2);_eb ,_ab =_fd .Width ,_fd .Height ;};if _ag {_ea .Translate (-_cab ,-_caf );};_abc :=_ea .Operations ();_bed ,_f :=_d .MakeStream (_abc .Bytes (),_d .NewFlateEncoder ());if _f !=nil {return _f ;};_cf :=_d .MakeArray (_bed );_cf .Append (page .GetContentStreamObjs ()...);*_be =_b .PdfRectangle {Urx :_eb ,Ury :_ab };if _ba :=page .CropBox ;_ba !=nil {_ba .Normalize ();_df ,_fc ,_aa ,_ad :=_ba .Llx -_cab ,_ba .Lly -_caf ,_ba .Width (),_ba .Height ();if _a {_eab :=_eed (_aa ,_ad ,_ead );_aa ,_ad =_eab .Width ,_eab .Height ;};*_ba =_b .PdfRectangle {Llx :_df ,Lly :_fc ,Urx :_df +_aa ,Ury :_fc +_ad };};_c .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ead ,_abc ,_be );page .Contents =_cf ;page .Rotate =nil ;return nil ;};