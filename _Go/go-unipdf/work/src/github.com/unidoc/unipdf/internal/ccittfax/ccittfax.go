//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_gd "math";);func _bcbc (_ffg ,_feg []byte ,_fcef int )int {_dba :=_gacc (_feg ,_fcef );if _dba < len (_feg )&&(_fcef ==-1&&_feg [_dba ]==_fcd ||_fcef >=0&&_fcef < len (_ffg )&&_ffg [_fcef ]==_feg [_dba ]||_fcef >=len (_ffg )&&_ffg [_fcef -1]!=_feg [_dba ]){_dba =_gacc (_feg ,_dba );};return _dba ;};func _dbd (_edf []byte ,_bc int )(uint16 ,int ,int ){_begf :=_bc ;_cab :=_bc /8;_bc %=8;if _cab >=len (_edf ){return 0,16,_begf ;};_gbcdd :=byte (0xFF>>uint (_bc ));_gda :=uint16 ((_edf [_cab ]&_gbcdd )<<uint (_bc ))<<8;_cacd :=8-_bc ;_cab ++;_bc =0;if _cab >=len (_edf ){return _gda >>(16-uint (_cacd )),16-_cacd ,_begf +_cacd ;};_gda |=uint16 (_edf [_cab ])<<(8-uint (_cacd ));_cacd +=8;_cab ++;_bc =0;if _cab >=len (_edf ){return _gda >>(16-uint (_cacd )),16-_cacd ,_begf +_cacd ;};if _cacd ==16{return _gda ,0,_begf +_cacd ;};_gfdc :=16-_cacd ;_gda |=uint16 (_edf [_cab ]>>(8-uint (_gfdc )));return _gda ,0,_begf +16;};func init (){_e =make (map[int ]code );_e [0]=code {Code :13<<8|3<<6,BitsWritten :10};_e [1]=code {Code :2<<(5+8),BitsWritten :3};_e [2]=code {Code :3<<(6+8),BitsWritten :2};_e [3]=code {Code :2<<(6+8),BitsWritten :2};_e [4]=code {Code :3<<(5+8),BitsWritten :3};_e [5]=code {Code :3<<(4+8),BitsWritten :4};_e [6]=code {Code :2<<(4+8),BitsWritten :4};_e [7]=code {Code :3<<(3+8),BitsWritten :5};_e [8]=code {Code :5<<(2+8),BitsWritten :6};_e [9]=code {Code :4<<(2+8),BitsWritten :6};_e [10]=code {Code :4<<(1+8),BitsWritten :7};_e [11]=code {Code :5<<(1+8),BitsWritten :7};_e [12]=code {Code :7<<(1+8),BitsWritten :7};_e [13]=code {Code :4<<8,BitsWritten :8};_e [14]=code {Code :7<<8,BitsWritten :8};_e [15]=code {Code :12<<8,BitsWritten :9};_e [16]=code {Code :5<<8|3<<6,BitsWritten :10};_e [17]=code {Code :6<<8,BitsWritten :10};_e [18]=code {Code :2<<8,BitsWritten :10};_e [19]=code {Code :12<<8|7<<5,BitsWritten :11};_e [20]=code {Code :13<<8,BitsWritten :11};_e [21]=code {Code :13<<8|4<<5,BitsWritten :11};_e [22]=code {Code :6<<8|7<<5,BitsWritten :11};_e [23]=code {Code :5<<8,BitsWritten :11};_e [24]=code {Code :2<<8|7<<5,BitsWritten :11};_e [25]=code {Code :3<<8,BitsWritten :11};_e [26]=code {Code :12<<8|10<<4,BitsWritten :12};_e [27]=code {Code :12<<8|11<<4,BitsWritten :12};_e [28]=code {Code :12<<8|12<<4,BitsWritten :12};_e [29]=code {Code :12<<8|13<<4,BitsWritten :12};_e [30]=code {Code :6<<8|8<<4,BitsWritten :12};_e [31]=code {Code :6<<8|9<<4,BitsWritten :12};_e [32]=code {Code :6<<8|10<<4,BitsWritten :12};_e [33]=code {Code :6<<8|11<<4,BitsWritten :12};_e [34]=code {Code :13<<8|2<<4,BitsWritten :12};_e [35]=code {Code :13<<8|3<<4,BitsWritten :12};_e [36]=code {Code :13<<8|4<<4,BitsWritten :12};_e [37]=code {Code :13<<8|5<<4,BitsWritten :12};_e [38]=code {Code :13<<8|6<<4,BitsWritten :12};_e [39]=code {Code :13<<8|7<<4,BitsWritten :12};_e [40]=code {Code :6<<8|12<<4,BitsWritten :12};_e [41]=code {Code :6<<8|13<<4,BitsWritten :12};_e [42]=code {Code :13<<8|10<<4,BitsWritten :12};_e [43]=code {Code :13<<8|11<<4,BitsWritten :12};_e [44]=code {Code :5<<8|4<<4,BitsWritten :12};_e [45]=code {Code :5<<8|5<<4,BitsWritten :12};_e [46]=code {Code :5<<8|6<<4,BitsWritten :12};_e [47]=code {Code :5<<8|7<<4,BitsWritten :12};_e [48]=code {Code :6<<8|4<<4,BitsWritten :12};_e [49]=code {Code :6<<8|5<<4,BitsWritten :12};_e [50]=code {Code :5<<8|2<<4,BitsWritten :12};_e [51]=code {Code :5<<8|3<<4,BitsWritten :12};_e [52]=code {Code :2<<8|4<<4,BitsWritten :12};_e [53]=code {Code :3<<8|7<<4,BitsWritten :12};_e [54]=code {Code :3<<8|8<<4,BitsWritten :12};_e [55]=code {Code :2<<8|7<<4,BitsWritten :12};_e [56]=code {Code :2<<8|8<<4,BitsWritten :12};_e [57]=code {Code :5<<8|8<<4,BitsWritten :12};_e [58]=code {Code :5<<8|9<<4,BitsWritten :12};_e [59]=code {Code :2<<8|11<<4,BitsWritten :12};_e [60]=code {Code :2<<8|12<<4,BitsWritten :12};_e [61]=code {Code :5<<8|10<<4,BitsWritten :12};_e [62]=code {Code :6<<8|6<<4,BitsWritten :12};_e [63]=code {Code :6<<8|7<<4,BitsWritten :12};_f =make (map[int ]code );_f [0]=code {Code :53<<8,BitsWritten :8};_f [1]=code {Code :7<<(2+8),BitsWritten :6};_f [2]=code {Code :7<<(4+8),BitsWritten :4};_f [3]=code {Code :8<<(4+8),BitsWritten :4};_f [4]=code {Code :11<<(4+8),BitsWritten :4};_f [5]=code {Code :12<<(4+8),BitsWritten :4};_f [6]=code {Code :14<<(4+8),BitsWritten :4};_f [7]=code {Code :15<<(4+8),BitsWritten :4};_f [8]=code {Code :19<<(3+8),BitsWritten :5};_f [9]=code {Code :20<<(3+8),BitsWritten :5};_f [10]=code {Code :7<<(3+8),BitsWritten :5};_f [11]=code {Code :8<<(3+8),BitsWritten :5};_f [12]=code {Code :8<<(2+8),BitsWritten :6};_f [13]=code {Code :3<<(2+8),BitsWritten :6};_f [14]=code {Code :52<<(2+8),BitsWritten :6};_f [15]=code {Code :53<<(2+8),BitsWritten :6};_f [16]=code {Code :42<<(2+8),BitsWritten :6};_f [17]=code {Code :43<<(2+8),BitsWritten :6};_f [18]=code {Code :39<<(1+8),BitsWritten :7};_f [19]=code {Code :12<<(1+8),BitsWritten :7};_f [20]=code {Code :8<<(1+8),BitsWritten :7};_f [21]=code {Code :23<<(1+8),BitsWritten :7};_f [22]=code {Code :3<<(1+8),BitsWritten :7};_f [23]=code {Code :4<<(1+8),BitsWritten :7};_f [24]=code {Code :40<<(1+8),BitsWritten :7};_f [25]=code {Code :43<<(1+8),BitsWritten :7};_f [26]=code {Code :19<<(1+8),BitsWritten :7};_f [27]=code {Code :36<<(1+8),BitsWritten :7};_f [28]=code {Code :24<<(1+8),BitsWritten :7};_f [29]=code {Code :2<<8,BitsWritten :8};_f [30]=code {Code :3<<8,BitsWritten :8};_f [31]=code {Code :26<<8,BitsWritten :8};_f [32]=code {Code :27<<8,BitsWritten :8};_f [33]=code {Code :18<<8,BitsWritten :8};_f [34]=code {Code :19<<8,BitsWritten :8};_f [35]=code {Code :20<<8,BitsWritten :8};_f [36]=code {Code :21<<8,BitsWritten :8};_f [37]=code {Code :22<<8,BitsWritten :8};_f [38]=code {Code :23<<8,BitsWritten :8};_f [39]=code {Code :40<<8,BitsWritten :8};_f [40]=code {Code :41<<8,BitsWritten :8};_f [41]=code {Code :42<<8,BitsWritten :8};_f [42]=code {Code :43<<8,BitsWritten :8};_f [43]=code {Code :44<<8,BitsWritten :8};_f [44]=code {Code :45<<8,BitsWritten :8};_f [45]=code {Code :4<<8,BitsWritten :8};_f [46]=code {Code :5<<8,BitsWritten :8};_f [47]=code {Code :10<<8,BitsWritten :8};_f [48]=code {Code :11<<8,BitsWritten :8};_f [49]=code {Code :82<<8,BitsWritten :8};_f [50]=code {Code :83<<8,BitsWritten :8};_f [51]=code {Code :84<<8,BitsWritten :8};_f [52]=code {Code :85<<8,BitsWritten :8};_f [53]=code {Code :36<<8,BitsWritten :8};_f [54]=code {Code :37<<8,BitsWritten :8};_f [55]=code {Code :88<<8,BitsWritten :8};_f [56]=code {Code :89<<8,BitsWritten :8};_f [57]=code {Code :90<<8,BitsWritten :8};_f [58]=code {Code :91<<8,BitsWritten :8};_f [59]=code {Code :74<<8,BitsWritten :8};_f [60]=code {Code :75<<8,BitsWritten :8};_f [61]=code {Code :50<<8,BitsWritten :8};_f [62]=code {Code :51<<8,BitsWritten :8};_f [63]=code {Code :52<<8,BitsWritten :8};_ec =make (map[int ]code );_ec [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ec [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ec [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ec [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ec [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ec [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ec [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ec [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ec [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ec [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ec [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ec [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ec [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ec [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ec [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ec [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ec [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ec [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ec [1216]=code {Code :119<<3,BitsWritten :13};_ec [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ec [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ec [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ec [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ec [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ec [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ec [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ec [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_gdf =make (map[int ]code );_gdf [64]=code {Code :27<<(3+8),BitsWritten :5};_gdf [128]=code {Code :18<<(3+8),BitsWritten :5};_gdf [192]=code {Code :23<<(2+8),BitsWritten :6};_gdf [256]=code {Code :55<<(1+8),BitsWritten :7};_gdf [320]=code {Code :54<<8,BitsWritten :8};_gdf [384]=code {Code :55<<8,BitsWritten :8};_gdf [448]=code {Code :100<<8,BitsWritten :8};_gdf [512]=code {Code :101<<8,BitsWritten :8};_gdf [576]=code {Code :104<<8,BitsWritten :8};_gdf [640]=code {Code :103<<8,BitsWritten :8};_gdf [704]=code {Code :102<<8,BitsWritten :9};_gdf [768]=code {Code :102<<8|1<<7,BitsWritten :9};_gdf [832]=code {Code :105<<8,BitsWritten :9};_gdf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_gdf [960]=code {Code :106<<8,BitsWritten :9};_gdf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_gdf [1088]=code {Code :107<<8,BitsWritten :9};_gdf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_gdf [1216]=code {Code :108<<8,BitsWritten :9};_gdf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_gdf [1344]=code {Code :109<<8,BitsWritten :9};_gdf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_gdf [1472]=code {Code :76<<8,BitsWritten :9};_gdf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_gdf [1600]=code {Code :77<<8,BitsWritten :9};_gdf [1664]=code {Code :24<<(2+8),BitsWritten :6};_gdf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_d =make (map[int ]code );_d [1792]=code {Code :1<<8,BitsWritten :11};_d [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_d [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_d [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_d [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_d [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_d [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_d [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_d [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_d [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_d [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_d [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_d [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ae =make (map[int ]byte );_ae [0]=0xFF;_ae [1]=0xFE;_ae [2]=0xFC;_ae [3]=0xF8;_ae [4]=0xF0;_ae [5]=0xE0;_ae [6]=0xC0;_ae [7]=0x80;_ae [8]=0x00;};func _bbea (_eff int )([]byte ,int ){var _bbad []byte ;for _bcd :=0;_bcd < 2;_bcd ++{_bbad ,_eff =_dbg (_bbad ,_eff ,_b );};return _bbad ,_eff %8;};func _adf (_edc []byte ,_adg int )(bool ,int ){_gefc :=_adg ;var (_aec uint16 ;_dc int ;);_aec ,_dc ,_adg =_dbd (_edc ,_adg );if _dc > 4{return false ,_gefc ;};_aec >>=uint (4-_dc );_aec <<=4;if _aec !=_b .Code {return false ,_gefc ;};return true ,_adg -4+_dc ;};func init (){for _bff ,_ece :=range _f {_bcb (_gf ,_ece ,0,_bff );};for _cb ,_cd :=range _gdf {_bcb (_gf ,_cd ,0,_cb );};for _gbc ,_fd :=range _e {_bcb (_bd ,_fd ,0,_gbc );};for _ebb ,_dbf :=range _ec {_bcb (_bd ,_dbf ,0,_ebb );};for _ef ,_fc :=range _d {_bcb (_gf ,_fc ,0,_ef );_bcb (_bd ,_fc ,0,_ef );};_bcb (_eb ,_bb ,0,0);_bcb (_eb ,_gg ,0,0);_bcb (_eb ,_ab ,0,0);_bcb (_eb ,_cg ,0,0);_bcb (_eb ,_ea ,0,0);_bcb (_eb ,_ce ,0,0);_bcb (_eb ,_aa ,0,0);_bcb (_eb ,_cf ,0,0);_bcb (_eb ,_gb ,0,0);};func (_ed *Encoder )decodeG31D (_be []byte )([][]byte ,error ){var _fb [][]byte ;var _cdb int ;for (_cdb /8)< len (_be ){var _eaf bool ;_eaf ,_cdb =_adf (_be ,_cdb );if !_eaf {if _ed .EndOfLine {return nil ,_ag ;};}else {for _ff :=0;_ff < 5;_ff ++{_eaf ,_cdb =_adf (_be ,_cdb );if !_eaf {if _ff ==0{break ;};return nil ,_db ;};};if _eaf {break ;};};var _ac []byte ;_ac ,_cdb =_ed .decodeRow1D (_be ,_cdb );if _ed .EncodedByteAlign &&_cdb %8!=0{_cdb +=8-_cdb %8;};_fb =append (_fb ,_ac );if _ed .Rows > 0&&!_ed .EndOfBlock &&len (_fb )>=_ed .Rows {break ;};};return _fb ,nil ;};func (_fg *Encoder )decodeG32D (_gbg []byte )([][]byte ,error ){var (_aca [][]byte ;_ge int ;_eab error ;);_ecf :for (_ge /8)< len (_gbg ){var _ee bool ;_ee ,_ge ,_eab =_cfg (_gbg ,_ge );if _eab !=nil {return nil ,_eab ;};if _ee {break ;};_ee ,_ge =_abd (_gbg ,_ge );if !_ee {if _fg .EndOfLine {return nil ,_ag ;};};var _gfg []byte ;_gfg ,_ge =_fg .decodeRow1D (_gbg ,_ge );if _fg .EncodedByteAlign &&_ge %8!=0{_ge +=8-_ge %8;};if _gfg !=nil {_aca =append (_aca ,_gfg );};if _fg .Rows > 0&&!_fg .EndOfBlock &&len (_aca )>=_fg .Rows {break ;};for _eee :=1;_eee < _fg .K &&(_ge /8)< len (_gbg );_eee ++{_ee ,_ge =_ebbg (_gbg ,_ge );if !_ee {_ee ,_ge ,_eab =_cfg (_gbg ,_ge );if _eab !=nil {return nil ,_eab ;};if _ee {break _ecf ;}else {if _fg .EndOfLine {return nil ,_ag ;};};};var (_acc code ;_accg bool ;);_af :=true ;var _da []byte ;_gc :=-1;for _acc ,_ge ,_accg =_bbf (_gbg ,_ge );_accg ;_acc ,_ge ,_accg =_bbf (_gbg ,_ge ){switch _acc {case _bb :_da ,_gc =_cec (_aca ,_da ,_af ,_gc );case _gg :_da ,_ge ,_gc ,_eab =_fcae (_gbg ,_da ,_ge ,_af ,_gc );if _eab !=nil {return nil ,_eab ;};case _ab :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,0);_af =!_af ;case _cg :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,1);_af =!_af ;case _ea :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,2);_af =!_af ;case _ce :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,3);_af =!_af ;case _aa :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,-1);_af =!_af ;case _cf :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,-2);_af =!_af ;case _gb :_da ,_gc =_ca (_aca ,_da ,_af ,_gc ,-3);_af =!_af ;};if len (_da )>=_fg .Columns {break ;};};if _fg .EncodedByteAlign &&_ge %8!=0{_ge +=8-_ge %8;};if _da !=nil {_aca =append (_aca ,_da );};if _fg .Rows > 0&&!_fg .EndOfBlock &&len (_aca )>=_fg .Rows {break _ecf ;};};};return _aca ,nil ;};func _aae (_eeb uint16 ,_efcg int ,_acce bool )(int ,code ){var _afdf *int ;var _dea *code ;if _acce {_afdf ,_dea =_cbe (_gf ,_eeb ,_efcg );}else {_afdf ,_dea =_cbe (_bd ,_eeb ,_efcg );};if _afdf ==nil {return -1,code {};};return *_afdf ,*_dea ;};func _ba (_afb []byte ,_eaa int ,_gdc bool )(int ,int ){var (_eafc uint16 ;_bbe int ;_df int ;);_df =_eaa ;_eafc ,_bbe ,_ =_dbd (_afb ,_eaa );_fff ,_fbc :=_aae (_eafc ,_bbe ,_gdc );if _fff ==-1{return -1,_df ;};return _fff ,_df +_fbc .BitsWritten ;};func _aadc (_agbb [][]byte )[][]byte {_ega :=make ([]byte ,len (_agbb [0]));for _fbg :=range _ega {_ega [_fbg ]=_fcd ;};_agbb =append (_agbb ,[]byte {});for _ebg :=len (_agbb )-1;_ebg > 0;_ebg --{_agbb [_ebg ]=_agbb [_ebg -1];};_agbb [0]=_ega ;return _agbb ;};func _bfbf (_afd uint16 ,_gfd int )byte {if _gfd < 8{_afd >>=8;};_gfd %=8;_ecd :=byte (0x01<<(7-uint (_gfd )));return (byte (_afd )&_ecd )>>(7-uint (_gfd ));};func (_aadb *Encoder )appendEncodedRow (_bbb ,_ead []byte ,_ffbd int )[]byte {if len (_bbb )> 0&&_ffbd !=0&&!_aadb .EncodedByteAlign {_bbb [len (_bbb )-1]=_bbb [len (_bbb )-1]|_ead [0];_bbb =append (_bbb ,_ead [1:]...);}else {_bbb =append (_bbb ,_ead ...);};return _bbb ;};func _cfg (_ceb []byte ,_ggf int )(bool ,int ,error ){_agb :=_ggf ;var _egd =false ;for _beg :=0;_beg < 6;_beg ++{_egd ,_ggf =_abd (_ceb ,_ggf );if !_egd {if _beg > 1{return false ,_agb ,_ad ;};_ggf =_agb ;break ;};};return _egd ,_ggf ,nil ;};func _aecgd (_cabe []byte ,_dgb int )([]byte ,int ){return _dbg (_cabe ,_dgb ,_bb )};type code struct{Code uint16 ;BitsWritten int ;};func _bgba (_fef []byte ,_fffa int ,_ffb code )([]byte ,int ){_egc :=true ;var _eafg []byte ;_eafg ,_fffa =_dbg (nil ,_fffa ,_ffb );_gace :=0;var _bbd int ;for _gace < len (_fef ){_bbd ,_gace =_feb (_fef ,_egc ,_gace );_eafg ,_fffa =_fcdf (_eafg ,_fffa ,_bbd ,_egc );_egc =!_egc ;};return _eafg ,_fffa %8;};func _ecgd (_gcb ,_fgb int )code {var _cffc code ;switch _fgb -_gcb {case -1:_cffc =_cg ;case -2:_cffc =_ea ;case -3:_cffc =_ce ;case 0:_cffc =_ab ;case 1:_cffc =_aa ;case 2:_cffc =_cf ;case 3:_cffc =_gb ;};return _cffc ;};func _feb (_agg []byte ,_dbfd bool ,_egfc int )(int ,int ){_aad :=0;for _egfc < len (_agg ){if _dbfd {if _agg [_egfc ]!=_fcd {break ;};}else {if _agg [_egfc ]!=_geb {break ;};};_aad ++;_egfc ++;};return _aad ,_egfc ;};func _gaa (_fdca ,_ddg []byte ,_ffbb ,_ffd ,_dgg int )([]byte ,int ,int ){_gfe :=_gacc (_fdca ,_dgg );_fdee :=_ffd >=0&&_fdca [_ffd ]==_fcd ||_ffd ==-1;_ddg ,_ffbb =_dbg (_ddg ,_ffbb ,_gg );var _becd int ;if _ffd > -1{_becd =_dgg -_ffd ;}else {_becd =_dgg -_ffd -1;};_ddg ,_ffbb =_fcdf (_ddg ,_ffbb ,_becd ,_fdee );_fdee =!_fdee ;_bcg :=_gfe -_dgg ;_ddg ,_ffbb =_fcdf (_ddg ,_ffbb ,_bcg ,_fdee );_ffd =_gfe ;return _ddg ,_ffbb ,_ffd ;};var (_bf =_a .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_ad =_a .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_fa =_a .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_ag =_a .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_db =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_cee =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func (_abf *Encoder )decodeRow1D (_fad []byte ,_bbac int )([]byte ,int ){var _fce []byte ;_gac :=true ;var _aac int ;_aac ,_bbac =_ba (_fad ,_bbac ,_gac );for _aac !=-1{_fce =_daf (_fce ,_gac ,_aac );if _aac < 64{if len (_fce )>=_abf .Columns {break ;};_gac =!_gac ;};_aac ,_bbac =_ba (_fad ,_bbac ,_gac );};return _fce ,_bbac ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _bbf (_fbdf []byte ,_dec int )(code ,int ,bool ){var (_dde uint16 ;_cgf int ;_cac int ;);_cac =_dec ;_dde ,_cgf ,_ =_dbd (_fbdf ,_dec );_gff ,_cdd :=_egdf (_dde ,_cgf );if !_cdd {return code {},_cac ,false ;};return _gff ,_cac +_gff .BitsWritten ,true ;};func _ebbg (_deb []byte ,_cfe int )(bool ,int ){return _bgg (_deb ,_cfe ,_c )};func _gacc (_gcce []byte ,_afbe int )int {if _afbe >=len (_gcce ){return _afbe ;};if _afbe < -1{_afbe =-1;};var _bag byte ;if _afbe > -1{_bag =_gcce [_afbe ];}else {_bag =_fcd ;};_fed :=_afbe +1;for _fed < len (_gcce ){if _gcce [_fed ]!=_bag {break ;};_fed ++;};return _fed ;};func (_aba *Encoder )encodeG32D (_bbfe [][]byte )[]byte {var _dg []byte ;var _gcga int ;for _efd :=0;_efd < len (_bbfe );_efd +=_aba .K {if _aba .Rows > 0&&!_aba .EndOfBlock &&_efd ==_aba .Rows {break ;};_fbea ,_dcd :=_bgba (_bbfe [_efd ],_gcga ,_eg );_dg =_aba .appendEncodedRow (_dg ,_fbea ,_gcga );if _aba .EncodedByteAlign {_dcd =0;};_gcga =_dcd ;for _bffa :=_efd +1;_bffa < (_efd +_aba .K )&&_bffa < len (_bbfe );_bffa ++{if _aba .Rows > 0&&!_aba .EndOfBlock &&_bffa ==_aba .Rows {break ;};_bgb ,_cacb :=_dbg (nil ,_gcga ,_c );var _adac ,_cacbd ,_gdg int ;_fcag :=-1;for _fcag < len (_bbfe [_bffa ]){_adac =_gacc (_bbfe [_bffa ],_fcag );_cacbd =_bcbc (_bbfe [_bffa ],_bbfe [_bffa -1],_fcag );_gdg =_gacc (_bbfe [_bffa -1],_cacbd );if _gdg < _adac {_bgb ,_cacb =_aecgd (_bgb ,_cacb );_fcag =_gdg ;}else {if _gd .Abs (float64 (_cacbd -_adac ))> 3{_bgb ,_cacb ,_fcag =_gaa (_bbfe [_bffa ],_bgb ,_cacb ,_fcag ,_adac );}else {_bgb ,_cacb =_gebe (_bgb ,_cacb ,_adac ,_cacbd );_fcag =_adac ;};};};_dg =_aba .appendEncodedRow (_dg ,_bgb ,_gcga );if _aba .EncodedByteAlign {_cacb =0;};_gcga =_cacb %8;};};if _aba .EndOfBlock {_fac ,_ :=_ggag (_gcga );_dg =_aba .appendEncodedRow (_dg ,_fac ,_gcga );};return _dg ;};func _gebe (_ccgd []byte ,_afabb ,_ccf ,_baf int )([]byte ,int ){_fffb :=_ecgd (_ccf ,_baf );_ccgd ,_afabb =_dbg (_ccgd ,_afabb ,_fffb );return _ccgd ,_afabb ;};func _daf (_eeg []byte ,_dag bool ,_fdg int )[]byte {if _fdg < 0{return _eeg ;};_cbc :=make ([]byte ,_fdg );if _dag {for _aced :=0;_aced < len (_cbc );_aced ++{_cbc [_aced ]=_fcd ;};}else {for _cbae :=0;_cbae < len (_cbc );_cbae ++{_cbc [_cbae ]=_geb ;};};_eeg =append (_eeg ,_cbc ...);return _eeg ;};var (_gf =&decodingTreeNode {Val :255};_bd =&decodingTreeNode {Val :255};_eb =&decodingTreeNode {Val :255};);func (_ecg *Encoder )encodeG31D (_ffc [][]byte )[]byte {var _agea []byte ;_cgfac :=0;for _dcf :=range _ffc {if _ecg .Rows > 0&&!_ecg .EndOfBlock &&_dcf ==_ecg .Rows {break ;};_dbe ,_bdf :=_bgba (_ffc [_dcf ],_cgfac ,_b );_agea =_ecg .appendEncodedRow (_agea ,_dbe ,_cgfac );if _ecg .EncodedByteAlign {_bdf =0;};_cgfac =_bdf ;};if _ecg .EndOfBlock {_add ,_ :=_ggb (_cgfac );_agea =_ecg .appendEncodedRow (_agea ,_add ,_cgfac );};return _agea ;};func _aga (_ddc []byte ,_eabf int )(bool ,int ,error ){_dda :=_eabf ;var _ccb bool ;_ccb ,_eabf =_adf (_ddc ,_eabf );if _ccb {_ccb ,_eabf =_adf (_ddc ,_eabf );if _ccb {return true ,_eabf ,nil ;};return false ,_dda ,_bf ;};return false ,_dda ,nil ;};func _ca (_efc [][]byte ,_ccg []byte ,_efb bool ,_ace ,_cfa int )([]byte ,int ){_bfb :=_dfb (_ccg ,_efc [len (_efc )-1],_ace ,_efb );_fca :=_bfb +_cfa ;if _ace ==-1{_ccg =_daf (_ccg ,_efb ,_fca -_ace -1);}else {_ccg =_daf (_ccg ,_efb ,_fca -_ace );};_ace =_fca ;return _ccg ,_ace ;};func _egdf (_gcg uint16 ,_afa int )(code ,bool ){_ ,_ada :=_cbe (_eb ,_gcg ,_afa );if _ada ==nil {return code {},false ;};return *_ada ,true ;};func _fcdf (_ecfa []byte ,_dgd int ,_edcd int ,_eeac bool )([]byte ,int ){var (_ggbd code ;_dafd bool ;);for !_dafd {_ggbd ,_edcd ,_dafd =_aecg (_edcd ,_eeac );_ecfa ,_dgd =_dbg (_ecfa ,_dgd ,_ggbd );};return _ecfa ,_dgd ;};func _dfb (_adfa ,_dabg []byte ,_dcc int ,_eaed bool )int {_ceea :=_gacc (_dabg ,_dcc );if _ceea < len (_dabg )&&(_dcc ==-1&&_dabg [_ceea ]==_fcd ||_dcc >=0&&_dcc < len (_adfa )&&_adfa [_dcc ]==_dabg [_ceea ]||_dcc >=len (_adfa )&&_eaed &&_dabg [_ceea ]==_fcd ||_dcc >=len (_adfa )&&!_eaed &&_dabg [_ceea ]==_geb ){_ceea =_gacc (_dabg ,_ceea );};return _ceea ;};func _ggb (_edfg int )([]byte ,int ){var _bgd []byte ;for _efg :=0;_efg < 6;_efg ++{_bgd ,_edfg =_dbg (_bgd ,_edfg ,_b );};return _bgd ,_edfg %8;};func (_bge *Encoder )encodeG4 (_gcgg [][]byte )[]byte {_gcf :=make ([][]byte ,len (_gcgg ));copy (_gcf ,_gcgg );_gcf =_aadc (_gcf );var _bec []byte ;var _baec int ;for _fba :=1;_fba < len (_gcf );_fba ++{if _bge .Rows > 0&&!_bge .EndOfBlock &&_fba ==(_bge .Rows +1){break ;};var _efbd []byte ;var _gcc ,_dga ,_ddbe int ;_geg :=_baec ;_fdc :=-1;for _fdc < len (_gcf [_fba ]){_gcc =_gacc (_gcf [_fba ],_fdc );_dga =_bcbc (_gcf [_fba ],_gcf [_fba -1],_fdc );_ddbe =_gacc (_gcf [_fba -1],_dga );if _ddbe < _gcc {_efbd ,_geg =_dbg (_efbd ,_geg ,_bb );_fdc =_ddbe ;}else {if _gd .Abs (float64 (_dga -_gcc ))> 3{_efbd ,_geg ,_fdc =_gaa (_gcf [_fba ],_efbd ,_geg ,_fdc ,_gcc );}else {_efbd ,_geg =_gebe (_efbd ,_geg ,_gcc ,_dga );_fdc =_gcc ;};};};_bec =_bge .appendEncodedRow (_bec ,_efbd ,_baec );if _bge .EncodedByteAlign {_geg =0;};_baec =_geg %8;};if _bge .EndOfBlock {_afe ,_ :=_bbea (_baec );_bec =_bge .appendEncodedRow (_bec ,_afe ,_baec );};return _bec ;};func _aecg (_cfee int ,_fcb bool )(code ,int ,bool ){if _cfee < 64{if _fcb {return _f [_cfee ],0,true ;};return _e [_cfee ],0,true ;};_ecfe :=_cfee /64;if _ecfe > 40{return _d [2560],_cfee -2560,false ;};if _ecfe > 27{return _d [_ecfe *64],_cfee -_ecfe *64,false ;};if _fcb {return _gdf [_ecfe *64],_cfee -_ecfe *64,false ;};return _ec [_ecfe *64],_cfee -_ecfe *64,false ;};func _abd (_bae []byte ,_ddb int )(bool ,int ){return _bgg (_bae ,_ddb ,_eg )};func _bcb (_ade *decodingTreeNode ,_ced code ,_eegd int ,_beb int ){_eae :=_bfbf (_ced .Code ,_eegd );_eegd ++;if _eae ==1{if _ade .Right ==nil {_ade .Right =&decodingTreeNode {Val :_eae };};if _eegd ==_ced .BitsWritten {_ade .Right .RunLen =&_beb ;_ade .Right .Code =&_ced ;}else {_bcb (_ade .Right ,_ced ,_eegd ,_beb );};}else {if _ade .Left ==nil {_ade .Left =&decodingTreeNode {Val :_eae };};if _eegd ==_ced .BitsWritten {_ade .Left .RunLen =&_beb ;_ade .Left .Code =&_ced ;}else {_bcb (_ade .Left ,_ced ,_eegd ,_beb );};};};func (_fde *Encoder )Encode (pixels [][]byte )[]byte {if _fde .BlackIs1 {_fcd =0;_geb =1;}else {_fcd =1;_geb =0;};if _fde .K ==0{return _fde .encodeG31D (pixels );};if _fde .K > 0{return _fde .encodeG32D (pixels );};if _fde .K < 0{return _fde .encodeG4 (pixels );};return nil ;};func _fcae (_cff ,_dbfc []byte ,_eafd int ,_age bool ,_ffa int )([]byte ,int ,int ,error ){_eca :=_eafd ;var _fbd error ;_dbfc ,_eafd ,_fbd =_fage (_cff ,_dbfc ,_eafd ,_age );if _fbd !=nil {return _dbfc ,_eca ,_ffa ,_fbd ;};_age =!_age ;_dbfc ,_eafd ,_fbd =_fage (_cff ,_dbfc ,_eafd ,_age );if _fbd !=nil {return _dbfc ,_eca ,_ffa ,_fbd ;};_ffa =len (_dbfc );return _dbfc ,_eafd ,_ffa ,nil ;};func _cec (_fbe [][]byte ,_dd []byte ,_dab bool ,_aaa int )([]byte ,int ){_fe :=_dfb (_dd ,_fbe [len (_fbe )-1],_aaa ,_dab );_dbb :=_gacc (_fbe [len (_fbe )-1],_fe );if _aaa ==-1{_dd =_daf (_dd ,_dab ,_dbb -_aaa -1);}else {_dd =_daf (_dd ,_dab ,_dbb -_aaa );};_aaa =_dbb ;return _dd ,_aaa ;};func _cbe (_acgf *decodingTreeNode ,_dee uint16 ,_ggg int )(*int ,*code ){if _acgf ==nil {return nil ,nil ;};if _ggg ==16{return _acgf .RunLen ,_acgf .Code ;};_bfgb :=_bfbf (_dee ,_ggg );_ggg ++;var _bbef *int ;var _afab *code ;if _bfgb ==1{_bbef ,_afab =_cbe (_acgf .Right ,_dee ,_ggg );}else {_bbef ,_afab =_cbe (_acgf .Left ,_dee ,_ggg );};if _bbef ==nil {_bbef =_acgf .RunLen ;_afab =_acgf .Code ;};return _bbef ,_afab ;};func _fage (_cfb ,_eec []byte ,_fcg int ,_ecab bool )([]byte ,int ,error ){_de :=_fcg ;var _eea int ;for _eea ,_fcg =_ba (_cfb ,_fcg ,_ecab );_eea !=-1;_eea ,_fcg =_ba (_cfb ,_fcg ,_ecab ){_eec =_daf (_eec ,_ecab ,_eea );if _eea < 64{break ;};};if _eea ==-1{return _eec ,_de ,_fa ;};return _eec ,_fcg ,nil ;};func (_fag *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fag .BlackIs1 {_fcd =0;_geb =1;}else {_fcd =1;_geb =0;};if _fag .K ==0{return _fag .decodeG31D (encoded );};if _fag .K > 0{return _fag .decodeG32D (encoded );};if _fag .K < 4{return _fag .decodeG4 (encoded );};return nil ,nil ;};var (_fcd byte =1;_geb byte =0;);var (_e map[int ]code ;_f map[int ]code ;_ec map[int ]code ;_gdf map[int ]code ;_d map[int ]code ;_ae map[int ]byte ;_b =code {Code :1<<4,BitsWritten :12};_eg =code {Code :3<<3,BitsWritten :13};_c =code {Code :2<<3,BitsWritten :13};_bb =code {Code :1<<12,BitsWritten :4};_gg =code {Code :1<<13,BitsWritten :3};_ab =code {Code :1<<15,BitsWritten :1};_cg =code {Code :3<<13,BitsWritten :3};_ea =code {Code :3<<10,BitsWritten :6};_ce =code {Code :3<<9,BitsWritten :7};_aa =code {Code :2<<13,BitsWritten :3};_cf =code {Code :2<<10,BitsWritten :6};_gb =code {Code :2<<9,BitsWritten :7};);func (_gef *Encoder )decodeG4 (_gbgc []byte )([][]byte ,error ){_cbd :=make ([]byte ,_gef .Columns );for _gga :=range _cbd {_cbd [_gga ]=_fcd ;};_acg :=make ([][]byte ,1);_acg [0]=_cbd ;var (_gbcd bool ;_bfg error ;_egf int ;);for (_egf /8)< len (_gbgc ){_gbcd ,_egf ,_bfg =_aga (_gbgc ,_egf );if _bfg !=nil {return nil ,_bfg ;};if _gbcd {break ;};var (_dbc code ;_ga bool ;);_cc :=true ;var _cba []byte ;_abc :=-1;for _abc < _gef .Columns {_dbc ,_egf ,_ga =_bbf (_gbgc ,_egf );if !_ga {return nil ,_cee ;};switch _dbc {case _bb :_cba ,_abc =_cec (_acg ,_cba ,_cc ,_abc );case _gg :_cba ,_egf ,_abc ,_bfg =_fcae (_gbgc ,_cba ,_egf ,_cc ,_abc );if _bfg !=nil {return nil ,_bfg ;};case _ab :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,0);_cc =!_cc ;case _cg :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,1);_cc =!_cc ;case _ea :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,2);_cc =!_cc ;case _ce :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,3);_cc =!_cc ;case _aa :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,-1);_cc =!_cc ;case _cf :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,-2);_cc =!_cc ;case _gb :_cba ,_abc =_ca (_acg ,_cba ,_cc ,_abc ,-3);_cc =!_cc ;};if len (_cba )>=_gef .Columns {break ;};};if _gef .EncodedByteAlign &&_egf %8!=0{_egf +=8-_egf %8;};_acg =append (_acg ,_cba );if _gef .Rows > 0&&!_gef .EndOfBlock &&len (_acg )>=(_gef .Rows +1){break ;};};_acg =_acg [1:];return _acg ,nil ;};func _dbg (_gcggd []byte ,_caa int ,_aab code )([]byte ,int ){_bee :=0;for _bee < _aab .BitsWritten {_ddbb :=_caa /8;_eba :=_caa %8;if _ddbb >=len (_gcggd ){_gcggd =append (_gcggd ,0);};_fae :=8-_eba ;_ddf :=_aab .BitsWritten -_bee ;if _fae > _ddf {_fae =_ddf ;};if _bee < 8{_gcggd [_ddbb ]=_gcggd [_ddbb ]|byte (_aab .Code >>uint (8+_eba -_bee ))&_ae [8-_fae -_eba ];}else {_gcggd [_ddbb ]=_gcggd [_ddbb ]|(byte (_aab .Code <<uint (_bee -8))&_ae [8-_fae ])>>uint (_eba );};_caa +=_fae ;_bee +=_fae ;};return _gcggd ,_caa ;};func _ggag (_gee int )([]byte ,int ){var _cgc []byte ;for _bda :=0;_bda < 6;_bda ++{_cgc ,_gee =_dbg (_cgc ,_gee ,_eg );};return _cgc ,_gee %8;};func _bgg (_ccge []byte ,_gde int ,_gdcb code )(bool ,int ){_fcec :=_gde ;var (_begfe uint16 ;_bfc int ;);_begfe ,_bfc ,_gde =_dbd (_ccge ,_gde );if _bfc > 3{return false ,_fcec ;};_begfe >>=uint (3-_bfc );_begfe <<=3;if _begfe !=_gdcb .Code {return false ,_fcec ;};return true ,_gde -3+_bfc ;};