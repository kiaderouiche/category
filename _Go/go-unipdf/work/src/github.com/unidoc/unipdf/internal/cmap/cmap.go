//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_gag "bufio";_ga "bytes";_f "encoding/hex";_ed "errors";_c "fmt";_fg "github.com/unidoc/unipdf/v3/common";_cc "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ff "io";_ac "sort";_a "strconv";_aa "strings";_e "unicode/utf16";);func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_ca :=_ccb (name );if _ca !=nil {return nil ,_ca ;};if cmap ._dd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_eef ,_ca :=_ccb (cmap ._dd );if _ca !=nil {return nil ,_ca ;};for _dfe ,_ab :=range _eef ._edg {if _ ,_dag :=cmap ._edg [_dfe ];!_dag {cmap ._edg [_dfe ]=_ab ;};};cmap ._fab =append (cmap ._fab ,_eef ._fab ...);cmap .computeInverseMappings ();return cmap ,nil ;};func _dba ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )NBits ()int {return cmap ._da };func (cmap *CMap )Bytes ()[]byte {_fg .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._fbe )> 0{return cmap ._fbe ;};cmap ._fbe =[]byte (_aa .Join ([]string {_bedg ,cmap .toBfData (),_fbc },"\u000a"));return cmap ._fbe ;};func (cmap *CMap )computeInverseMappings (){for _cb ,_aec :=range cmap ._edg {if _cab ,_eff :=cmap ._fac [_aec ];!_eff ||(_eff &&_cab > _cb ){cmap ._fac [_aec ]=_cb ;};};for _fgcf ,_dae :=range cmap ._df {if _gge ,_bb :=cmap ._dfd [_dae ];!_bb ||(_bb &&_gge > _fgcf ){cmap ._dfd [_dae ]=_fgcf ;};};_ac .Slice (cmap ._fab ,func (_cabc ,_gb int )bool {return cmap ._fab [_cabc ].Low < cmap ._fab [_gb ].Low });};type CharCode uint32 ;func (cmap *CMap )String ()string {_bbgd :=cmap ._ea ;_acf :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._da ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._gab )};if cmap ._dg !=""{_acf =append (_acf ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._dg ));};if cmap ._dd !=""{_acf =append (_acf ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._dd ));};_acf =append (_acf ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_bbgd .String ()));if len (cmap ._fab )> 0{_acf =append (_acf ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._fab )));};if len (cmap ._df )> 0{_acf =append (_acf ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._df )));};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bg ,_aa .Join (_acf ,"\u0020"));};func (cmap *CMap )Name ()string {return cmap ._bg };func _cdfa (_badb cmapHexString )[]rune {if len (_badb ._cdgf )==1{return []rune {rune (_badb ._cdgf [0])};};_fec :=_badb ._cdgf ;if len (_fec )%2!=0{_fec =append (_fec ,0);_fg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_badb ,_fec );};_ebdb :=len (_fec )>>1;_bbd :=make ([]uint16 ,_ebdb );for _cbed :=0;_cbed < _ebdb ;_cbed ++{_bbd [_cbed ]=uint16 (_fec [_cbed <<1])<<8+uint16 (_fec [_cbed <<1+1]);};_adgd :=_e .Decode (_bbd );return _adgd ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _bfd ,_gf :=cmap ._df [code ];_gf {return _bfd ,true ;};return MissingCodeString ,false ;};var (ErrBadCMap =_ed .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ed .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_ed .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func _aaf (_bc bool )*CMap {_ee :=16;if _bc {_ee =8;};return &CMap {_da :_ee ,_edg :make (map[CharCode ]CharCode ),_fac :make (map[CharCode ]CharCode ),_df :make (map[CharCode ]string ),_dfd :make (map[string ]CharCode )};};func _ccb (_edc string )(*CMap ,error ){_ad ,_efgc :=_b .Asset (_edc );if _efgc !=nil {return nil ,_efgc ;};return LoadCmapFromDataCID (_ad );};func (_acg *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_acg .Registry ,_acg .Ordering ,_acg .Supplement );};type fbRange struct{_ace CharCode ;_fb CharCode ;_ae string ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type cmapName struct{Name string ;};type cmapHexString struct{_cceb int ;_cdgf []byte ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )parse ()error {var _dcda cmapObject ;for {_aedc ,_gfb :=cmap .parseObject ();if _gfb !=nil {if _gfb ==_ff .EOF {break ;};_fg .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_gfb );return _gfb ;};switch _aag :=_aedc .(type ){case cmapOperand :_faca :=_aag ;switch _faca .Operand {case _bab :_cea :=cmap .parseCodespaceRange ();if _cea !=nil {return _cea ;};case _gcca :_caa :=cmap .parseCIDRange ();if _caa !=nil {return _caa ;};case _egg :_bda :=cmap .parseBfchar ();if _bda !=nil {return _bda ;};case _dac :_aga :=cmap .parseBfrange ();if _aga !=nil {return _aga ;};case _gccd :if _dcda ==nil {_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_cae ,_bff :=_dcda .(cmapName );if !_bff {_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_dcda );return ErrBadCMap ;};cmap ._dd =_cae .Name ;case _aaa :_baa :=cmap .parseSystemInfo ();if _baa !=nil {return _baa ;};};case cmapName :_gbb :=_aag ;switch _gbb .Name {case _aaa :_gagf :=cmap .parseSystemInfo ();if _gagf !=nil {return _gagf ;};case _gce :_bee :=cmap .parseName ();if _bee !=nil {return _bee ;};case _acd :_bcb :=cmap .parseType ();if _bcb !=nil {return _bcb ;};case _abf :_fgfa :=cmap .parseVersion ();if _fgfa !=nil {return _fgfa ;};};};_dcda =_aedc ;};return nil ;};func (cmap *CMap )parseName ()error {_cbf :="";_agg :=false ;for _ggee :=0;_ggee < 20&&!_agg ;_ggee ++{_fged ,_cf :=cmap .parseObject ();if _cf !=nil {return _cf ;};switch _fbd :=_fged .(type ){case cmapOperand :switch _fbd .Operand {case "\u0064\u0065\u0066":_agg =true ;default:_fg .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_fged ,_cbf );if _cbf !=""{_cbf =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_cbf ,_fbd .Operand );};_fg .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_cbf );};case cmapName :_cbf =_fbd .Name ;};};if !_agg {_fg .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bg =_cbf ;return nil ;};func (_fcd *cMapParser )parseDict ()(cmapDict ,error ){_fg .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_acc :=_dba ();_aabb ,_ :=_fcd ._bcbe .ReadByte ();if _aabb !='<'{return _acc ,ErrBadCMapDict ;};_aabb ,_ =_fcd ._bcbe .ReadByte ();if _aabb !='<'{return _acc ,ErrBadCMapDict ;};for {_fcd .skipSpaces ();_cbga ,_ffbb :=_fcd ._bcbe .Peek (2);if _ffbb !=nil {return _acc ,_ffbb ;};if (_cbga [0]=='>')&&(_cbga [1]=='>'){_fcd ._bcbe .ReadByte ();_fcd ._bcbe .ReadByte ();break ;};_abd ,_ffbb :=_fcd .parseName ();_fg .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_abd .Name );if _ffbb !=nil {_fg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_ffbb );return _acc ,_ffbb ;};_fcd .skipSpaces ();_bedf ,_ffbb :=_fcd .parseObject ();if _ffbb !=nil {return _acc ,_ffbb ;};_acc .Dict [_abd .Name ]=_bedf ;_fcd .skipSpaces ();_cbga ,_ffbb =_fcd ._bcbe .Peek (3);if _ffbb !=nil {return _acc ,_ffbb ;};if string (_cbga )=="\u0064\u0065\u0066"{_fcd ._bcbe .Discard (3);};};return _acc ,nil ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gbc ,_eb :=cmap ._edg [code ];return _gbc ,_eb ;};func (cmap *CMap )parseBfrange ()error {for {var _adf CharCode ;_dabc ,_efag :=cmap .parseObject ();if _efag !=nil {if _efag ==_ff .EOF {break ;};return _efag ;};switch _aebc :=_dabc .(type ){case cmapOperand :if _aebc .Operand ==_dgc {return nil ;};return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_adf =_acce (_aebc );default:return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _caeb CharCode ;_dabc ,_efag =cmap .parseObject ();if _efag !=nil {if _efag ==_ff .EOF {break ;};return _efag ;};switch _gee :=_dabc .(type ){case cmapOperand :_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_caeb =_acce (_gee );default:_fg .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dabc );return ErrBadCMap ;};_dabc ,_efag =cmap .parseObject ();if _efag !=nil {if _efag ==_ff .EOF {break ;};return _efag ;};switch _fad :=_dabc .(type ){case cmapArray :if len (_fad .Array )!=int (_caeb -_adf )+1{_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _bbb :=_adf ;_bbb <=_caeb ;_bbb ++{_fgea :=_fad .Array [_bbb -_adf ];_ffa ,_cgde :=_fgea .(cmapHexString );if !_cgde {return _ed .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_fed :=_cdfa (_ffa );cmap ._df [_bbb ]=string (_fed );};case cmapHexString :_bagg :=_cdfa (_fad );_ebe :=len (_bagg );for _aeed :=_adf ;_aeed <=_caeb ;_aeed ++{cmap ._df [_aeed ]=string (_bagg );if _ebe > 0{_bagg [_ebe -1]++;}else {_fg .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_aeed );};};default:_fg .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dabc );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_fbec ,_ccd :=cmap .BytesToCharcodes (data );if !_ccd {_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_agc :=make ([]string ,len (_fbec ));var _fe []CharCode ;for _aed ,_ggc :=range _fbec {_ge ,_bgac :=cmap ._df [_ggc ];if !_bgac {_fe =append (_fe ,_ggc );_ge =MissingCodeString ;};_agc [_aed ]=_ge ;};_fge :=_aa .Join (_agc ,"");if len (_fe )> 0{_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_fbec ,len (_fe ),_fe ,_fge ,cmap );};return _fge ,len (_fe );};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_fef ,_bdg :=cmap ._fac [cid ];return _fef ,_bdg ;};type CMap struct{*cMapParser ;_bg string ;_da int ;_gab int ;_dg string ;_dd string ;_ea CIDSystemInfo ;_fab []Codespace ;_edg map[CharCode ]CharCode ;_fac map[CharCode ]CharCode ;_df map[CharCode ]string ;_dfd map[string ]CharCode ;_fbe []byte ;_cca *_cc .PdfObjectStream ;};func (cmap *CMap )parseBfchar ()error {for {_eab ,_gccb :=cmap .parseObject ();if _gccb !=nil {if _gccb ==_ff .EOF {break ;};return _gccb ;};var _ceg CharCode ;switch _fbb :=_eab .(type ){case cmapOperand :if _fbb .Operand ==_ddb {return nil ;};return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ceg =_acce (_fbb );default:return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_eab ,_gccb =cmap .parseObject ();if _gccb !=nil {if _gccb ==_ff .EOF {break ;};return _gccb ;};var _eaf []rune ;switch _ada :=_eab .(type ){case cmapOperand :if _ada .Operand ==_ddb {return nil ;};_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ada );return ErrBadCMap ;case cmapHexString :_eaf =_cdfa (_ada );case cmapName :_fg .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ada );_eaf =[]rune {MissingCodeRune };default:_fg .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_eab );return ErrBadCMap ;};cmap ._df [_ceg ]=string (_eaf );};return nil ;};func (_aaag *cMapParser )parseOperand ()(cmapOperand ,error ){_bfdaa :=cmapOperand {};_beg :=_ga .Buffer {};for {_dgb ,_bfa :=_aaag ._bcbe .Peek (1);if _bfa !=nil {if _bfa ==_ff .EOF {break ;};return _bfdaa ,_bfa ;};if _cc .IsDelimiter (_dgb [0]){break ;};if _cc .IsWhiteSpace (_dgb [0]){break ;};_fabg ,_ :=_aaag ._bcbe .ReadByte ();_beg .WriteByte (_fabg );};if _beg .Len ()==0{return _bfdaa ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_bfdaa .Operand =_beg .String ();return _bfdaa ,nil ;};func (cmap *CMap )parseType ()error {_ffe :=0;_aedg :=false ;for _afd :=0;_afd < 3&&!_aedg ;_afd ++{_cfg ,_eed :=cmap .parseObject ();if _eed !=nil {return _eed ;};switch _eg :=_cfg .(type ){case cmapOperand :switch _eg .Operand {case "\u0064\u0065\u0066":_aedg =true ;default:_fg .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_cfg );return ErrBadCMap ;};case cmapInt :_ffe =int (_eg ._ece );};};cmap ._gab =_ffe ;return nil ;};const (_bf =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (_gec *cMapParser )parseObject ()(cmapObject ,error ){_gec .skipSpaces ();for {_bae ,_acec :=_gec ._bcbe .Peek (2);if _acec !=nil {return nil ,_acec ;};if _bae [0]=='%'{_gec .parseComment ();_gec .skipSpaces ();continue ;}else if _bae [0]=='/'{_cfeg ,_aff :=_gec .parseName ();return _cfeg ,_aff ;}else if _bae [0]=='('{_ffeb ,_cbe :=_gec .parseString ();return _ffeb ,_cbe ;}else if _bae [0]=='['{_ggefe ,_fcac :=_gec .parseArray ();return _ggefe ,_fcac ;}else if (_bae [0]=='<')&&(_bae [1]=='<'){_gabe ,_dcee :=_gec .parseDict ();return _gabe ,_dcee ;}else if _bae [0]=='<'{_agff ,_beb :=_gec .parseHexString ();return _agff ,_beb ;}else if _cc .IsDecimalDigit (_bae [0])||(_bae [0]=='-'&&_cc .IsDecimalDigit (_bae [1])){_gaa ,_dbe :=_gec .parseNumber ();if _dbe !=nil {return nil ,_dbe ;};return _gaa ,nil ;}else {_gfe ,_gbe :=_gec .parseOperand ();if _gbe !=nil {return nil ,_gbe ;};return _gfe ,nil ;};};};func (_cdb *cMapParser )parseComment ()(string ,error ){var _faba _ga .Buffer ;_ ,_aggb :=_cdb .skipSpaces ();if _aggb !=nil {return _faba .String (),_aggb ;};_fbeb :=true ;for {_acb ,_fcf :=_cdb ._bcbe .Peek (1);if _fcf !=nil {_fg .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_fcf );return _faba .String (),_fcf ;};if _fbeb &&_acb [0]!='%'{return _faba .String (),ErrBadCMapComment ;};_fbeb =false ;if (_acb [0]!='\r')&&(_acb [0]!='\n'){_gfc ,_ :=_cdb ._bcbe .ReadByte ();_faba .WriteByte (_gfc );}else {break ;};};return _faba .String (),nil ;};type charRange struct{_gd CharCode ;_d CharCode ;};func (cmap *CMap )parseSystemInfo ()error {_cdg :=false ;_ebb :=false ;_eag :="";_cgf :=false ;_fbcd :=CIDSystemInfo {};for _ega :=0;_ega < 50&&!_cgf ;_ega ++{_caf ,_bag :=cmap .parseObject ();if _bag !=nil {return _bag ;};switch _cfc :=_caf .(type ){case cmapDict :_adg :=_cfc .Dict ;_cdf ,_fcg :=_adg ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_fcg {_fg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gcg ,_fcg :=_cdf .(cmapString );if !_fcg {_fg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fbcd .Registry =_gcg .String ;_cdf ,_fcg =_adg ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fcg {_fg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gcg ,_fcg =_cdf .(cmapString );if !_fcg {_fg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fbcd .Ordering =_gcg .String ;_ccbg ,_fcg :=_adg ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_fcg {_fg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cac ,_fcg :=_ccbg .(cmapInt );if !_fcg {_fg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fbcd .Supplement =int (_cac ._ece );_cgf =true ;case cmapOperand :switch _cfc .Operand {case "\u0062\u0065\u0067i\u006e":_cdg =true ;case "\u0065\u006e\u0064":_cgf =true ;case "\u0064\u0065\u0066":_ebb =false ;};case cmapName :if _cdg {_eag =_cfc .Name ;_ebb =true ;};case cmapString :if _ebb {switch _eag {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_fbcd .Registry =_cfc .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_fbcd .Ordering =_cfc .String ;};};case cmapInt :if _ebb {switch _eag {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_fbcd .Supplement =int (_cfc ._ece );};};};};if !_cgf {_fg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._ea =_fbcd ;return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_fced ,_cfe :=cmap .parseObject ();if _cfe !=nil {if _cfe ==_ff .EOF {break ;};return _cfe ;};_aafd ,_adef :=_fced .(cmapHexString );if !_adef {if _cacg ,_bdb :=_fced .(cmapOperand );_bdb {if _cacg .Operand ==_fgde {return nil ;};return _ed .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_egd :=_acce (_aafd );_fced ,_cfe =cmap .parseObject ();if _cfe !=nil {if _cfe ==_ff .EOF {break ;};return _cfe ;};_aabe ,_adef :=_fced .(cmapHexString );if !_adef {return _ed .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_aafd ._cdgf )!=len (_aabe ._cdgf ){return _ed .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_aeef :=_acce (_aabe );if _egd > _aeef {_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_egd ,_aeef );return ErrBadCMap ;};_fced ,_cfe =cmap .parseObject ();if _cfe !=nil {if _cfe ==_ff .EOF {break ;};return _cfe ;};_eba ,_adef :=_fced .(cmapInt );if !_adef {return _ed .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _eba ._ece < 0{return _ed .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cbg :=_eba ._ece ;for _gdg :=_egd ;_gdg <=_aeef ;_gdg ++{cmap ._edg [_gdg ]=CharCode (_cbg );_cbg ++;};_fg .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_egd ,_aeef ,_eba ._ece );};return nil ;};type cmapInt struct{_ece int64 };func (_fdc *cMapParser )skipSpaces ()(int ,error ){_cega :=0;for {_dgae ,_ceb :=_fdc ._bcbe .Peek (1);if _ceb !=nil {return 0,_ceb ;};if _cc .IsWhiteSpace (_dgae [0]){_fdc ._bcbe .ReadByte ();_cega ++;}else {break ;};};return _cega ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _def []CharCode ;if cmap ._da ==8{for _ ,_fc :=range data {_def =append (_def ,CharCode (_fc ));};return _def ,true ;};for _cgg :=0;_cgg < len (data );{_bbg ,_af ,_bfeg :=cmap .matchCode (data [_cgg :]);if !_bfeg {_fg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_cgg ,data ,string (data ));return _def ,false ;};_def =append (_def ,_bbg );_cgg +=_af ;};return _def ,true ;};type cmapObject interface{};func (cmap *CMap )Stream ()(*_cc .PdfObjectStream ,error ){if cmap ._cca !=nil {return cmap ._cca ,nil ;};_ce ,_bfg :=_cc .MakeStream (cmap .Bytes (),_cc .NewFlateEncoder ());if _bfg !=nil {return nil ,_bfg ;};cmap ._cca =_ce ;return cmap ._cca ,nil ;};func (cmap *CMap )Type ()int {return cmap ._gab };func (cmap *CMap )parseVersion ()error {_bef :="";_ggef :=false ;for _bedgc :=0;_bedgc < 3&&!_ggef ;_bedgc ++{_dcca ,_fca :=cmap .parseObject ();if _fca !=nil {return _fca ;};switch _eea :=_dcca .(type ){case cmapOperand :switch _eea .Operand {case "\u0064\u0065\u0066":_ggef =true ;default:_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_dcca );return ErrBadCMap ;};case cmapInt :_bef =_c .Sprintf ("\u0025\u0064",_eea ._ece );case cmapFloat :_bef =_c .Sprintf ("\u0025\u0066",_eea ._gfeg );case cmapString :_bef =_eea .String ;default:_fg .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_dcca );};};cmap ._dg =_bef ;return nil ;};func (_gdbb *cMapParser )parseString ()(cmapString ,error ){_gdbb ._bcbe .ReadByte ();_fbf :=_ga .Buffer {};_dgcd :=1;for {_ffaf ,_gbcc :=_gdbb ._bcbe .Peek (1);if _gbcc !=nil {return cmapString {_fbf .String ()},_gbcc ;};if _ffaf [0]=='\\'{_gdbb ._bcbe .ReadByte ();_ddda ,_gaae :=_gdbb ._bcbe .ReadByte ();if _gaae !=nil {return cmapString {_fbf .String ()},_gaae ;};if _cc .IsOctalDigit (_ddda ){_ffb ,_fbfc :=_gdbb ._bcbe .Peek (2);if _fbfc !=nil {return cmapString {_fbf .String ()},_fbfc ;};var _bdc []byte ;_bdc =append (_bdc ,_ddda );for _ ,_bdbd :=range _ffb {if _cc .IsOctalDigit (_bdbd ){_bdc =append (_bdc ,_bdbd );}else {break ;};};_gdbb ._bcbe .Discard (len (_bdc )-1);_fg .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bdc );_dfa ,_fbfc :=_a .ParseUint (string (_bdc ),8,32);if _fbfc !=nil {return cmapString {_fbf .String ()},_fbfc ;};_fbf .WriteByte (byte (_dfa ));continue ;};switch _ddda {case 'n':_fbf .WriteByte ('\n');case 'r':_fbf .WriteByte ('\r');case 't':_fbf .WriteByte ('\t');case 'b':_fbf .WriteByte ('\b');case 'f':_fbf .WriteByte ('\f');case '(':_fbf .WriteByte ('(');case ')':_fbf .WriteByte (')');case '\\':_fbf .WriteByte ('\\');};continue ;}else if _ffaf [0]=='('{_dgcd ++;}else if _ffaf [0]==')'{_dgcd --;if _dgcd ==0{_gdbb ._bcbe .ReadByte ();break ;};};_fbbe ,_ :=_gdbb ._bcbe .ReadByte ();_fbf .WriteByte (_fbbe );};return cmapString {_fbf .String ()},nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_fg .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_aaf (isSimple );cmap .cMapParser =_ec (data );_age :=cmap .parse ();if _age !=nil {return nil ,_age ;};if len (cmap ._fab )==0{if cmap ._dd !=""{return cmap ,nil ;};_fg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};const (_cbc =100;_bedg ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_fbc ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func (cmap *CMap )inCodespace (_daa CharCode ,_efa int )bool {for _ ,_ade :=range cmap ._fab {if _ade .Low <=_daa &&_daa <=_ade .High &&_efa ==_ade .NumBytes {return true ;};};return false ;};func _acbb (_aacg ,_edgd int )int {if _aacg < _edgd {return _aacg ;};return _edgd ;};func _ddbb (_fea cmapHexString )rune {_dge :=_cdfa (_fea );if _dee :=len (_dge );_dee ==0{_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_fea );return MissingCodeRune ;};if len (_dge )> 1{_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_fea ,_dge );};return _dge [0];};func (_ccec *cMapParser )parseNumber ()(cmapObject ,error ){_aba ,_ebac :=_cc .ParseNumber (_ccec ._bcbe );if _ebac !=nil {return nil ,_ebac ;};switch _cdc :=_aba .(type ){case *_cc .PdfObjectFloat :return cmapFloat {float64 (*_cdc )},nil ;case *_cc .PdfObjectInteger :return cmapInt {int64 (*_cdc )},nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aba );};type cmapOperand struct{Operand string ;};type cmapString struct{String string ;};func IsPredefinedCMap (name string )bool {return _b .AssetExists (name )};func (cmap *CMap )parseCodespaceRange ()error {for {_agf ,_dce :=cmap .parseObject ();if _dce !=nil {if _dce ==_ff .EOF {break ;};return _dce ;};_deb ,_ged :=_agf .(cmapHexString );if !_ged {if _cce ,_db :=_agf .(cmapOperand );_db {if _cce .Operand ==_beec {return nil ;};return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_agf ,_dce =cmap .parseObject ();if _dce !=nil {if _dce ==_ff .EOF {break ;};return _dce ;};_fcee ,_ged :=_agf .(cmapHexString );if !_ged {return _ed .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_deb ._cdgf )!=len (_fcee ._cdgf ){return _ed .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_afa :=_acce (_deb );_cge :=_acce (_fcee );if _cge < _afa {_fg .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_afa ,_cge );return ErrBadCMap ;};_aca :=_fcee ._cceb ;_egc :=Codespace {NumBytes :_aca ,Low :_afa ,High :_cge };cmap ._fab =append (cmap ._fab ,_egc );_fg .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_afa ,_cge );};if len (cmap ._fab )==0{_fg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )matchCode (_dea []byte )(_acgc CharCode ,_dga int ,_be bool ){for _bed :=0;_bed < _bf ;_bed ++{if _bed < len (_dea ){_acgc =_acgc <<8|CharCode (_dea [_bed ]);_dga ++;};_be =cmap .inCodespace (_acgc ,_bed +1);if _be {return _acgc ,_dga ,true ;};};_fg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dea ,string (_dea ),cmap );return 0,0,false ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gg :=make (map[CharCode ]string ,len (codeToRune ));for _dc ,_fd :=range codeToRune {_gg [_dc ]=string (_fd );};cmap :=&CMap {_bg :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_gab :2,_da :16,_ea :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_fab :[]Codespace {{Low :0,High :0xffff}},_df :_gg ,_dfd :make (map[string ]CharCode ,len (codeToRune )),_edg :make (map[CharCode ]CharCode ,len (codeToRune )),_fac :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};func _ec (_befd []byte )*cMapParser {_aagb :=cMapParser {};_fdd :=_ga .NewBuffer (_befd );_aagb ._bcbe =_gag .NewReader (_fdd );return &_aagb ;};func (_dabg *cMapParser )parseName ()(cmapName ,error ){_gdb :="";_fgbc :=false ;for {_gfa ,_fgbb :=_dabg ._bcbe .Peek (1);if _fgbb ==_ff .EOF {break ;};if _fgbb !=nil {return cmapName {_gdb },_fgbb ;};if !_fgbc {if _gfa [0]=='/'{_fgbc =true ;_dabg ._bcbe .ReadByte ();}else {_fg .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_gfa ,_gfa );return cmapName {_gdb },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gfa [0]);};}else {if _cc .IsWhiteSpace (_gfa [0]){break ;}else if (_gfa [0]=='/')||(_gfa [0]=='[')||(_gfa [0]=='(')||(_gfa [0]==']')||(_gfa [0]=='<')||(_gfa [0]=='>'){break ;}else if _gfa [0]=='#'{_cga ,_ecd :=_dabg ._bcbe .Peek (3);if _ecd !=nil {return cmapName {_gdb },_ecd ;};_dabg ._bcbe .Discard (3);_bbc ,_ecd :=_f .DecodeString (string (_cga [1:3]));if _ecd !=nil {return cmapName {_gdb },_ecd ;};_gdb +=string (_bbc );}else {_fccc ,_ :=_dabg ._bcbe .ReadByte ();_gdb +=string (_fccc );};};};return cmapName {_gdb },nil ;};type cmapFloat struct{_gfeg float64 };func _acce (_gfab cmapHexString )CharCode {_bad :=CharCode (0);for _ ,_egdc :=range _gfab ._cdgf {_bad <<=8;_bad |=CharCode (_egdc );};return _bad ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gc ,_cd :=cmap ._dfd [s ];return _gc ,_cd };type cMapParser struct{_bcbe *_gag .Reader };func (_ccdb *cMapParser )parseHexString ()(cmapHexString ,error ){_ccdb ._bcbe .ReadByte ();_cafc :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_fbeba :=_ga .Buffer {};for {_ccdb .skipSpaces ();_cbge ,_ecdb :=_ccdb ._bcbe .Peek (1);if _ecdb !=nil {return cmapHexString {},_ecdb ;};if _cbge [0]=='>'{_ccdb ._bcbe .ReadByte ();break ;};_agag ,_ :=_ccdb ._bcbe .ReadByte ();if _ga .IndexByte (_cafc ,_agag )>=0{_fbeba .WriteByte (_agag );};};if _fbeba .Len ()%2==1{_fg .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fbeba .String ());_fbeba .WriteByte ('0');};_cbcd :=_fbeba .Len ()/2;_gdgg ,_ :=_f .DecodeString (_fbeba .String ());return cmapHexString {_cceb :_cbcd ,_cdgf :_gdgg },nil ;};const (_aaa ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_agab ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_bge ="\u0065n\u0064\u0063\u006d\u0061\u0070";_bab ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_beec ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_egg ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_ddb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_dac ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dgc ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_gcca ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fgde ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gccd ="\u0075s\u0065\u0063\u006d\u0061\u0070";_gce ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_acd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_abf ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func _gde (_dff string )string {_aab :=[]rune (_dff );_fcc :=make ([]string ,len (_aab ));for _effd ,_cda :=range _aab {_fcc [_effd ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_cda );};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_aa .Join (_fcc ,""));};func (cmap *CMap )toBfData ()string {if len (cmap ._df )==0{return "";};_fgb :=make ([]CharCode ,0,len (cmap ._df ));for _eadc :=range cmap ._df {_fgb =append (_fgb ,_eadc );};_ac .Slice (_fgb ,func (_bbge ,_feb int )bool {return _fgb [_bbge ]< _fgb [_feb ]});var _bbgf []charRange ;_eade :=charRange {_fgb [0],_fgb [0]};_ebd :=cmap ._df [_fgb [0]];for _ ,_bgg :=range _fgb [1:]{_ffg :=cmap ._df [_bgg ];if _bgg ==_eade ._d +1&&_fgf (_ffg )==_fgf (_ebd )+1{_eade ._d =_bgg ;}else {_bbgf =append (_bbgf ,_eade );_eade ._gd ,_eade ._d =_bgg ,_bgg ;};_ebd =_ffg ;};_bbgf =append (_bbgf ,_eade );var _efde []CharCode ;var _bec []fbRange ;for _ ,_gfg :=range _bbgf {if _gfg ._gd ==_gfg ._d {_efde =append (_efde ,_gfg ._gd );}else {_bec =append (_bec ,fbRange {_ace :_gfg ._gd ,_fb :_gfg ._d ,_ae :cmap ._df [_gfg ._gd ]});};};_fg .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_bbgf ),len (_efde ),len (_bec ));var _bgfa []string ;if len (_efde )> 0{_ccc :=(len (_efde )+_cbc -1)/_cbc ;for _dcc :=0;_dcc < _ccc ;_dcc ++{_facf :=_acbb (len (_efde )-_dcc *_cbc ,_cbc );_bgfa =append (_bgfa ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_facf ));for _faa :=0;_faa < _facf ;_faa ++{_cdd :=_efde [_dcc *_cbc +_faa ];_cgd :=cmap ._df [_cdd ];_bgfa =append (_bgfa ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_cdd ,_gde (_cgd )));};_bgfa =append (_bgfa ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_bec )> 0{_bcf :=(len (_bec )+_cbc -1)/_cbc ;for _eda :=0;_eda < _bcf ;_eda ++{_dcd :=_acbb (len (_bec )-_eda *_cbc ,_cbc );_bgfa =append (_bgfa ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_dcd ));for _edb :=0;_edb < _dcd ;_edb ++{_aeb :=_bec [_eda *_cbc +_edb ];_bgfa =append (_bgfa ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_aeb ._ace ,_aeb ._fb ,_gde (_aeb ._ae )));};_bgfa =append (_bgfa ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _aa .Join (_bgfa ,"\u000a");};func (_faf *cMapParser )parseArray ()(cmapArray ,error ){_fdg :=cmapArray {};_fdg .Array =[]cmapObject {};_faf ._bcbe .ReadByte ();for {_faf .skipSpaces ();_faaa ,_cabcg :=_faf ._bcbe .Peek (1);if _cabcg !=nil {return _fdg ,_cabcg ;};if _faaa [0]==']'{_faf ._bcbe .ReadByte ();break ;};_gdeg ,_cabcg :=_faf .parseObject ();if _cabcg !=nil {return _fdg ,_cabcg ;};_fdg .Array =append (_fdg .Array ,_gdeg );};return _fdg ,nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func _fgf (_cba string )rune {_ba :=[]rune (_cba );return _ba [len (_ba )-1]};type cmapArray struct{Array []cmapObject ;};func NewCIDSystemInfo (obj _cc .PdfObject )(_bfe CIDSystemInfo ,_ef error ){_efd ,_efg :=_cc .GetDict (obj );if !_efg {return CIDSystemInfo {},_cc .ErrTypeError ;};_aee ,_efg :=_cc .GetStringVal (_efd .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_efg {return CIDSystemInfo {},_cc .ErrTypeError ;};_bd ,_efg :=_cc .GetStringVal (_efd .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_efg {return CIDSystemInfo {},_cc .ErrTypeError ;};_fa ,_efg :=_cc .GetIntVal (_efd .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_efg {return CIDSystemInfo {},_cc .ErrTypeError ;};return CIDSystemInfo {Registry :_aee ,Ordering :_bd ,Supplement :_fa },nil ;};