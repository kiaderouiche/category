//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _ac "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_f IntsMap )Add (key uint64 ,value int ){_f [key ]=append (_f [key ],value )};type IntsMap map[uint64 ][]int ;func (_bgc *NumSlice )AddInt (v int ){*_bgc =append (*_bgc ,float32 (v ))};func (_df NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_df )-1{return 0,_ac .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _df [i ],nil ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_ca NumSlice )GetIntSlice ()[]int {_bd :=make ([]int ,len (_ca ));for _acb ,_dcb :=range _ca {_bd [_acb ]=int (_dcb );};return _bd ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_bc *Stack )top ()int {return len (_bc .Data )-1};func (_c IntsMap )GetSlice (key uint64 )([]int ,bool ){_d ,_af :=_c [key ];if !_af {return nil ,false ;};return _d ,true ;};type IntSlice []int ;func (_fc NumSlice )GetInt (i int )(int ,error ){const _cg ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_fc )-1{return 0,_ac .Errorf (_cg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_dd :=_fc [i ];return int (_dd +Sign (_dd )*0.5),nil ;};func (_g IntsMap )Delete (key uint64 ){delete (_g ,key )};func (_adf *Stack )peek ()(interface{},bool ){_abd :=_adf .top ();if _abd ==-1{return nil ,false ;};return _adf .Data [_abd ],true ;};func (_e *Stack )Peek ()(_gbd interface{},_caa bool ){return _e .peek ()};func (_ef *Stack )Push (v interface{}){_ef .Data =append (_ef .Data ,v )};func (_cb *Stack )Len ()int {return len (_cb .Data )};func (_aff *NumSlice )Add (v float32 ){*_aff =append (*_aff ,v )};func (_ad *IntSlice )Add (v int )error {if _ad ==nil {return _ac .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_ad =append (*_ad ,v );return nil ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_fg IntSlice )Get (index int )(int ,error ){if index > len (_fg )-1{return 0,_ac .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _fg [index ],nil ;};type NumSlice []float32 ;type Stack struct{Data []interface{};Aux *Stack ;};func (_fa *Stack )Pop ()(_cbg interface{},_bda bool ){_cbg ,_bda =_fa .peek ();if !_bda {return nil ,_bda ;};_fa .Data =_fa .Data [:_fa .top ()];return _cbg ,true ;};func (_b IntsMap )Get (key uint64 )(int ,bool ){_ba ,_bg :=_b [key ];if !_bg {return 0,false ;};if len (_ba )==0{return 0,false ;};return _ba [0],true ;};func NewIntSlice (i int )*IntSlice {_gb :=IntSlice (make ([]int ,i ));return &_gb };func NewNumSlice (i int )*NumSlice {_ab :=NumSlice (make ([]float32 ,i ));return &_ab };func (_dc IntSlice )Size ()int {return len (_dc )};func (_fb *IntSlice )Copy ()*IntSlice {_fe :=IntSlice (make ([]int ,len (*_fb )));copy (_fe ,*_fb );return &_fe ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};