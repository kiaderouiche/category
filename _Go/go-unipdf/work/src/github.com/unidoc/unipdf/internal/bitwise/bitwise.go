//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitwise ;import (_f "encoding/binary";_a "errors";_fe "github.com/unidoc/unipdf/v3/common";_fec "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ee "io";);func (_fgga *Writer )writeBit (_cadg uint8 )error {if len (_fgga ._aaab )-1< _fgga ._bcab {return _ee .EOF ;};_gdbc :=_fgga ._ggb ;if _fgga ._gbdg {_gdbc =7-_fgga ._ggb ;};_fgga ._aaab [_fgga ._bcab ]|=byte (uint16 (_cadg <<_gdbc )&0xff);_fgga ._ggb ++;if _fgga ._ggb ==8{_fgga ._bcab ++;_fgga ._ggb =0;};return nil ;};type Reader struct{_edad []byte ;_defc byte ;_ga byte ;_cfb int64 ;_fbb int ;_ce int ;_gd int64 ;_ceb byte ;};func NewReader (data []byte )*Reader {return &Reader {_edad :data }};func (_bgae *Reader )Reset (){_bgae ._cfb =_bgae ._gd ;_bgae ._ga =_bgae ._ceb };func (_ebff *SubstreamReader )Reset (){_ebff ._bfb =_ebff ._bfg ;_ebff ._fbbe =_ebff ._gbc };func NewWriter (data []byte )*Writer {return &Writer {_aaab :data }};func (_fb *BufferedWriter )SkipBits (skip int )error {if skip ==0{return nil ;};_edg :=int (_fb ._eb )+skip ;if _edg >=0&&_edg < 8{_fb ._eb =uint8 (_edg );return nil ;};_edg =int (_fb ._eb )+_fb ._ed *8+skip ;if _edg < 0{return _fec .Errorf ("\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_da :=_edg /8;_ff :=_edg %8;_fb ._eb =uint8 (_ff );if _de :=_da -_fb ._ed ;_de > 0&&len (_fb ._af )-1< _da {if _fb ._eb !=0{_de ++;};_fb .expandIfNeeded (_de );};_fb ._ed =_da ;return nil ;};func (_eed *BufferedWriter )Len ()int {return _eed .byteCapacity ()};func (_bf *Reader )readUnalignedByte ()(_afga byte ,_bce error ){_afa :=_bf ._ga ;_afga =_bf ._defc <<(8-_afa );_bf ._defc ,_bce =_bf .readBufferByte ();if _bce !=nil {return 0,_bce ;};_afga |=_bf ._defc >>_afa ;_bf ._defc &=1<<_afa -1;return _afga ,nil ;};func (_cbd *Writer )FinishByte (){if _cbd ._ggb ==0{return ;};_cbd ._ggb =0;_cbd ._bcab ++;};func (_bff *SubstreamReader )Offset ()uint64 {return _bff ._dag };func (_cd *Reader )BitPosition ()int {return int (_cd ._ga )};var _ BinaryWriter =&Writer {};func (_dgg *Writer )writeByte (_ddg byte )error {if _dgg ._bcab > len (_dgg ._aaab )-1{return _ee .EOF ;};if _dgg ._bcab ==len (_dgg ._aaab )-1&&_dgg ._ggb !=0{return _ee .EOF ;};if _dgg ._ggb ==0{_dgg ._aaab [_dgg ._bcab ]=_ddg ;_dgg ._bcab ++;return nil ;};if _dgg ._gbdg {_dgg ._aaab [_dgg ._bcab ]|=_ddg >>_dgg ._ggb ;_dgg ._bcab ++;_dgg ._aaab [_dgg ._bcab ]=byte (uint16 (_ddg )<<(8-_dgg ._ggb )&0xff);}else {_dgg ._aaab [_dgg ._bcab ]|=byte (uint16 (_ddg )<<_dgg ._ggb &0xff);_dgg ._bcab ++;_dgg ._aaab [_dgg ._bcab ]=_ddg >>(8-_dgg ._ggb );};return nil ;};func (_bcb *Reader )ReadBit ()(_eg int ,_ebf error ){_ffc ,_ebf :=_bcb .readBool ();if _ebf !=nil {return 0,_ebf ;};if _ffc {_eg =1;};return _eg ,nil ;};func _ffb (_bbb ,_dde uint64 )uint64 {if _bbb < _dde {return _bbb ;};return _dde ;};func (_ac *BufferedWriter )Data ()[]byte {return _ac ._af };type BitWriter interface{WriteBit (_ec int )error ;WriteBits (_dbd uint64 ,_eca int )(_dd int ,_cb error );FinishByte ();SkipBits (_cad int )error ;};func (_afb *Reader )ReadBool ()(bool ,error ){return _afb .readBool ()};func (_cg *SubstreamReader )Align ()(_bcd byte ){_bcd =_cg ._fbbe ;_cg ._fbbe =0;return _bcd };func (_ace *Reader )ConsumeRemainingBits (){if _ace ._ga !=0{_ ,_edab :=_ace .ReadBits (_ace ._ga );if _edab !=nil {_fe .Log .Debug ("\u0043\u006f\u006e\u0073\u0075\u006d\u0065\u0052\u0065\u006da\u0069\u006e\u0069\u0067\u0042\u0069\u0074s\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_edab );};};};func (_d *BufferedWriter )Reset (){_d ._af =_d ._af [:0];_d ._ed =0;_d ._eb =0};func (_bab *Reader )read (_ffe []byte )(int ,error ){if _bab ._cfb >=int64 (len (_bab ._edad )){return 0,_ee .EOF ;};_bab ._ce =-1;_ecc :=copy (_ffe ,_bab ._edad [_bab ._cfb :]);_bab ._cfb +=int64 (_ecc );return _ecc ,nil ;};func (_fdd *SubstreamReader )readBufferByte ()(byte ,error ){if _fdd ._bfb >=_fdd ._abe {return 0,_ee .EOF ;};if _fdd ._bfb >=_fdd ._ffec ||_fdd ._bfb < _fdd ._gba {if _dbgg :=_fdd .fillBuffer ();_dbgg !=nil {return 0,_dbgg ;};};_fedc :=_fdd ._cdg [_fdd ._bfb -_fdd ._gba ];_fdd ._bfb ++;return _fedc ,nil ;};func (_cc *Reader )ReadBits (n byte )(_gae uint64 ,_aee error ){if n < _cc ._ga {_cdb :=_cc ._ga -n ;_gae =uint64 (_cc ._defc >>_cdb );_cc ._defc &=1<<_cdb -1;_cc ._ga =_cdb ;return _gae ,nil ;};if n > _cc ._ga {if _cc ._ga > 0{_gae =uint64 (_cc ._defc );n -=_cc ._ga ;};for n >=8{_abg ,_cee :=_cc .readBufferByte ();if _cee !=nil {return 0,_cee ;};_gae =_gae <<8+uint64 (_abg );n -=8;};if n > 0{if _cc ._defc ,_aee =_cc .readBufferByte ();_aee !=nil {return 0,_aee ;};_bgc :=8-n ;_gae =_gae <<n +uint64 (_cc ._defc >>_bgc );_cc ._defc &=1<<_bgc -1;_cc ._ga =_bgc ;}else {_cc ._ga =0;};return _gae ,nil ;};_cc ._ga =0;return uint64 (_cc ._defc ),nil ;};func (_aaef *Writer )WriteBits (bits uint64 ,number int )(_fgd int ,_eefb error ){const _cgg ="\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065r\u0042\u0069\u0074\u0073";if number < 0||number > 64{return 0,_fec .Errorf (_cgg ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};if number ==0{return 0,nil ;};_fbg :=number /8;if _fbg > 0{_gda :=number -_fbg *8;for _cdba :=_fbg -1;_cdba >=0;_cdba --{_efa :=byte ((bits >>uint (_cdba *8+_gda ))&0xff);if _eefb =_aaef .WriteByte (_efa );_eefb !=nil {return _fgd ,_fec .Wrapf (_eefb ,_cgg ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_fbg -_cdba +1);};};number -=_fbg *8;if number ==0{return _fbg ,nil ;};};var _ecd int ;for _ebfb :=0;_ebfb < number ;_ebfb ++{if _aaef ._gbdg {_ecd =int ((bits >>uint (number -1-_ebfb ))&0x1);}else {_ecd =int (bits &0x1);bits >>=1;};if _eefb =_aaef .WriteBit (_ecd );_eefb !=nil {return _fgd ,_fec .Wrapf (_eefb ,_cgg ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_ebfb );};};return _fbg ,nil ;};func (_db *BufferedWriter )WriteByte (bt byte )error {if _db ._ed > len (_db ._af )-1||(_db ._ed ==len (_db ._af )-1&&_db ._eb !=0){_db .expandIfNeeded (1);};_db .writeByte (bt );return nil ;};func (_dcf *BufferedWriter )grow (_ae int ){if _dcf ._af ==nil &&_ae < _b {_dcf ._af =make ([]byte ,_ae ,_b );return ;};_gb :=len (_dcf ._af );if _dcf ._eb !=0{_gb ++;};_ag :=cap (_dcf ._af );switch {case _ae <=_ag /2-_gb :_fe .Log .Trace ("\u005b\u0042\u0075\u0066\u0066\u0065r\u0065\u0064\u0057\u0072\u0069t\u0065\u0072\u005d\u0020\u0067\u0072o\u0077\u0020\u002d\u0020\u0072e\u0073\u006c\u0069\u0063\u0065\u0020\u006f\u006e\u006c\u0079\u002e\u0020L\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0043\u0061\u0070\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u006e\u003a\u0020'\u0025\u0064\u0027",len (_dcf ._af ),cap (_dcf ._af ),_ae );_fe .Log .Trace ("\u0020\u006e\u0020\u003c\u003d\u0020\u0063\u0020\u002f\u0020\u0032\u0020\u002d\u006d\u002e \u0043:\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u006d\u003a\u0020\u0027\u0025\u0064\u0027",_ag ,_gb );copy (_dcf ._af ,_dcf ._af [_dcf .fullOffset ():]);case _ag > _fa -_ag -_ae :_fe .Log .Error ("\u0042\u0055F\u0046\u0045\u0052 \u0074\u006f\u006f\u0020\u006c\u0061\u0072\u0067\u0065");return ;default:_bdee :=make ([]byte ,2*_ag +_ae );copy (_bdee ,_dcf ._af );_dcf ._af =_bdee ;};_dcf ._af =_dcf ._af [:_gb +_ae ];};func (_bef *SubstreamReader )ReadBit ()(_ge int ,_ffea error ){_ggg ,_ffea :=_bef .readBool ();if _ffea !=nil {return 0,_ffea ;};if _ggg {_ge =1;};return _ge ,nil ;};func (_aca *BufferedWriter )expandIfNeeded (_dc int ){if !_aca .tryGrowByReslice (_dc ){_aca .grow (_dc );};};var _ _ee .Writer =&BufferedWriter {};const (_b =64;_fa =int (^uint (0)>>1););func (_bd *BufferedWriter )Write (d []byte )(int ,error ){_bd .expandIfNeeded (len (d ));if _bd ._eb ==0{return _bd .writeFullBytes (d ),nil ;};return _bd .writeShiftedBytes (d ),nil ;};func BufferedMSB ()*BufferedWriter {return &BufferedWriter {_g :true }};func (_bfd *SubstreamReader )readUnalignedByte ()(_ecf byte ,_ade error ){_cccf :=_bfd ._fbbe ;_ecf =_bfd ._abbd <<(8-_cccf );_bfd ._abbd ,_ade =_bfd .readBufferByte ();if _ade !=nil {return 0,_ade ;};_ecf |=_bfd ._abbd >>_cccf ;_bfd ._abbd &=1<<_cccf -1;return _ecf ,nil ;};func (_cgc *SubstreamReader )Mark (){_cgc ._bfg =_cgc ._bfb ;_cgc ._gbc =_cgc ._fbbe };func (_cfc *Writer )WriteByte (c byte )error {return _cfc .writeByte (c )};type SubstreamReader struct{_bfb uint64 ;_edee StreamReader ;_dag uint64 ;_abe uint64 ;_cdg []byte ;_gba uint64 ;_ffec uint64 ;_abbd byte ;_fbbe byte ;_bfg uint64 ;_gbc byte ;};var _ BinaryWriter =&BufferedWriter {};func (_bgb *Writer )UseMSB ()bool {return _bgb ._gbdg };func (_fg *BufferedWriter )WriteBit (bit int )error {if bit !=1&&bit !=0{return _fec .Errorf ("\u0042\u0075\u0066fe\u0072\u0065\u0064\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0062\u0069\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u006du\u0073\u0074\u0020\u0062e\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u007d\u0020\u0062\u0075\u0074\u0020\u0069\u0073\u003a\u0020\u0025\u0064",bit );};if len (_fg ._af )-1< _fg ._ed {_fg .expandIfNeeded (1);};_eba :=_fg ._eb ;if _fg ._g {_eba =7-_fg ._eb ;};_fg ._af [_fg ._ed ]|=byte (uint16 (bit <<_eba )&0xff);_fg ._eb ++;if _fg ._eb ==8{_fg ._ed ++;_fg ._eb =0;};return nil ;};func (_dbaf *BufferedWriter )fullOffset ()int {_be :=_dbaf ._ed ;if _dbaf ._eb !=0{_be ++;};return _be ;};type StreamReader interface{_ee .Reader ;_ee .ByteReader ;_ee .Seeker ;Align ()byte ;BitPosition ()int ;Mark ();Length ()uint64 ;ReadBit ()(int ,error );ReadBits (_agb byte )(uint64 ,error );ReadBool ()(bool ,error );ReadUint32 ()(uint32 ,error );Reset ();StreamPosition ()int64 ;};func (_cbea *SubstreamReader )ReadBool ()(bool ,error ){return _cbea .readBool ()};func (_gfb *SubstreamReader )ReadByte ()(byte ,error ){if _gfb ._fbbe ==0{return _gfb .readBufferByte ();};return _gfb .readUnalignedByte ();};func (_ccf *SubstreamReader )readBool ()(_ea bool ,_acf error ){if _ccf ._fbbe ==0{_ccf ._abbd ,_acf =_ccf .readBufferByte ();if _acf !=nil {return false ,_acf ;};_ea =(_ccf ._abbd &0x80)!=0;_ccf ._abbd ,_ccf ._fbbe =_ccf ._abbd &0x7f,7;return _ea ,nil ;};_ccf ._fbbe --;_ea =(_ccf ._abbd &(1<<_ccf ._fbbe ))!=0;_ccf ._abbd &=1<<_ccf ._fbbe -1;return _ea ,nil ;};func (_gbac *Writer )WriteBit (bit int )error {switch bit {case 0,1:return _gbac .writeBit (uint8 (bit ));};return _fec .Error ("\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0062\u0069\u0074\u0020v\u0061\u006c\u0075\u0065");};type BufferedWriter struct{_af []byte ;_eb uint8 ;_ed int ;_g bool ;};func (_gdb *Reader )Align ()(_cfa byte ){_cfa =_gdb ._ga ;_gdb ._ga =0;return _cfa };func (_bac *Reader )Read (p []byte )(_ffd int ,_bdd error ){if _bac ._ga ==0{return _bac .read (p );};for ;_ffd < len (p );_ffd ++{if p [_ffd ],_bdd =_bac .readUnalignedByte ();_bdd !=nil {return 0,_bdd ;};};return _ffd ,nil ;};func (_dgb *Reader )Seek (offset int64 ,whence int )(int64 ,error ){_dgb ._ce =-1;var _aad int64 ;switch whence {case _ee .SeekStart :_aad =offset ;case _ee .SeekCurrent :_aad =_dgb ._cfb +offset ;case _ee .SeekEnd :_aad =int64 (len (_dgb ._edad ))+offset ;default:return 0,_a .New ("\u0072\u0065\u0061de\u0072\u002e\u0052\u0065\u0061\u0064\u0065\u0072\u002eS\u0065e\u006b:\u0020i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};if _aad < 0{return 0,_a .New ("\u0072\u0065a\u0064\u0065\u0072\u002eR\u0065\u0061d\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u003a \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u006f\u006e");};_dgb ._cfb =_aad ;_dgb ._ga =0;return _aad ,nil ;};func (_eef *BufferedWriter )WriteBits (bits uint64 ,number int )(_ba int ,_c error ){const _fed ="\u0042u\u0066\u0066\u0065\u0072e\u0064\u0057\u0072\u0069\u0074e\u0072.\u0057r\u0069\u0074\u0065\u0072\u0042\u0069\u0074s";if number < 0||number > 64{return 0,_fec .Errorf (_fed ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};_abb :=number /8;if _abb > 0{_dba :=number -_abb *8;for _aaa :=_abb -1;_aaa >=0;_aaa --{_def :=byte ((bits >>uint (_aaa *8+_dba ))&0xff);if _c =_eef .WriteByte (_def );_c !=nil {return _ba ,_fec .Wrapf (_c ,_fed ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_abb -_aaa +1);};};number -=_abb *8;if number ==0{return _abb ,nil ;};};var _bb int ;for _edgb :=0;_edgb < number ;_edgb ++{if _eef ._g {_bb =int ((bits >>uint (number -1-_edgb ))&0x1);}else {_bb =int (bits &0x1);bits >>=1;};if _c =_eef .WriteBit (_bb );_c !=nil {return _ba ,_fec .Wrapf (_c ,_fed ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_edgb );};};return _abb ,nil ;};func (_aag *Reader )StreamPosition ()int64 {return _aag ._cfb };func (_ded *BufferedWriter )writeFullBytes (_gf []byte )int {_fc :=copy (_ded ._af [_ded .fullOffset ():],_gf );_ded ._ed +=_fc ;return _fc ;};func (_abd *Reader )Length ()uint64 {return uint64 (len (_abd ._edad ))};type BinaryWriter interface{BitWriter ;_ee .Writer ;_ee .ByteWriter ;Data ()[]byte ;};func (_ffdg *Writer )SkipBits (skip int )error {const _egg ="\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073";if skip ==0{return nil ;};_acef :=int (_ffdg ._ggb )+skip ;if _acef >=0&&_acef < 8{_ffdg ._ggb =uint8 (_acef );return nil ;};_acef =int (_ffdg ._ggb )+_ffdg ._bcab *8+skip ;if _acef < 0{return _fec .Errorf (_egg ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gbca :=_acef /8;_abde :=_acef %8;_fe .Log .Trace ("\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073");_fe .Log .Trace ("\u0042\u0069\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0042\u0079\u0074\u0065\u0049n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0046\u0075\u006c\u006c\u0042\u0069\u0074\u0073\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u004c\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027,\u0020\u0043\u0061p\u003a\u0020\u0027\u0025\u0064\u0027",_ffdg ._ggb ,_ffdg ._bcab ,int (_ffdg ._ggb )+(_ffdg ._bcab )*8,len (_ffdg ._aaab ),cap (_ffdg ._aaab ));_fe .Log .Trace ("S\u006b\u0069\u0070\u003a\u0020\u0027%\u0064\u0027\u002c\u0020\u0064\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062i\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025d\u0027",skip ,_acef ,_abde );_ffdg ._ggb =uint8 (_abde );if _babe :=_gbca -_ffdg ._bcab ;_babe > 0&&len (_ffdg ._aaab )-1< _gbca {_fe .Log .Trace ("\u0042\u0079\u0074e\u0044\u0069\u0066\u0066\u003a\u0020\u0025\u0064",_babe );return _fec .Errorf (_egg ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ffdg ._bcab =_gbca ;_fe .Log .Trace ("\u0042\u0069\u0074I\u006e\u0064\u0065\u0078:\u0020\u0027\u0025\u0064\u0027\u002c\u0020B\u0079\u0074\u0065\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027",_ffdg ._ggb ,_ffdg ._bcab );return nil ;};func (_ggbf *Writer )Data ()[]byte {return _ggbf ._aaab };func (_bgd *SubstreamReader )Length ()uint64 {return _bgd ._abe };func (_abec *Writer )byteCapacity ()int {_egb :=len (_abec ._aaab )-_abec ._bcab ;if _abec ._ggb !=0{_egb --;};return _egb ;};func (_fce *Reader )ReadUint32 ()(uint32 ,error ){_acc :=make ([]byte ,4);_ ,_deb :=_fce .Read (_acc );if _deb !=nil {return 0,_deb ;};return _f .BigEndian .Uint32 (_acc ),nil ;};func (_afg *BufferedWriter )FinishByte (){if _afg ._eb ==0{return ;};_afg ._eb =0;_afg ._ed ++;};func (_ede *Reader )readBufferByte ()(byte ,error ){if _ede ._cfb >=int64 (len (_ede ._edad )){return 0,_ee .EOF ;};_ede ._ce =-1;_fbf :=_ede ._edad [_ede ._cfb ];_ede ._cfb ++;_ede ._fbb =int (_fbf );return _fbf ,nil ;};var _ _ee .ByteWriter =&BufferedWriter {};func (_bde *BufferedWriter )byteCapacity ()int {_cf :=len (_bde ._af )-_bde ._ed ;if _bde ._eb !=0{_cf --;};return _cf ;};func (_aagd *SubstreamReader )ReadBits (n byte )(_cdc uint64 ,_ced error ){if n < _aagd ._fbbe {_gca :=_aagd ._fbbe -n ;_cdc =uint64 (_aagd ._abbd >>_gca );_aagd ._abbd &=1<<_gca -1;_aagd ._fbbe =_gca ;return _cdc ,nil ;};if n > _aagd ._fbbe {if _aagd ._fbbe > 0{_cdc =uint64 (_aagd ._abbd );n -=_aagd ._fbbe ;};var _cebd byte ;for n >=8{_cebd ,_ced =_aagd .readBufferByte ();if _ced !=nil {return 0,_ced ;};_cdc =_cdc <<8+uint64 (_cebd );n -=8;};if n > 0{if _aagd ._abbd ,_ced =_aagd .readBufferByte ();_ced !=nil {return 0,_ced ;};_fd :=8-n ;_cdc =_cdc <<n +uint64 (_aagd ._abbd >>_fd );_aagd ._abbd &=1<<_fd -1;_aagd ._fbbe =_fd ;}else {_aagd ._fbbe =0;};return _cdc ,nil ;};_aagd ._fbbe =0;return uint64 (_aagd ._abbd ),nil ;};func NewSubstreamReader (r StreamReader ,offset ,length uint64 )(*SubstreamReader ,error ){if r ==nil {return nil ,_a .New ("\u0072o\u006ft\u0020\u0072\u0065\u0061\u0064e\u0072\u0020i\u0073\u0020\u006e\u0069\u006c");};_fe .Log .Trace ("\u004e\u0065\u0077\u0053\u0075\u0062\u0073\u0074r\u0065\u0061\u006dRe\u0061\u0064\u0065\u0072\u0020\u0061t\u0020\u006f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0064\u0020\u0077\u0069\u0074h\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064",offset ,length );return &SubstreamReader {_edee :r ,_dag :offset ,_abe :length ,_cdg :make ([]byte ,length )},nil ;};func (_fea *SubstreamReader )ReadUint32 ()(uint32 ,error ){_eeg :=make ([]byte ,4);_ ,_ccc :=_fea .Read (_eeg );if _ccc !=nil {return 0,_ccc ;};return _f .BigEndian .Uint32 (_eeg ),nil ;};func (_abc *Writer )Write (p []byte )(int ,error ){if len (p )> _abc .byteCapacity (){return 0,_ee .EOF ;};for _ ,_afe :=range p {if _aada :=_abc .writeByte (_afe );_aada !=nil {return 0,_aada ;};};return len (p ),nil ;};type Writer struct{_aaab []byte ;_ggb uint8 ;_bcab int ;_gbdg bool ;};func (_aa *BufferedWriter )ResetBitIndex (){_aa ._eb =0};func (_bda *Reader )Mark (){_bda ._gd =_bda ._cfb ;_bda ._ceb =_bda ._ga };func (_gg *BufferedWriter )tryGrowByReslice (_bc int )bool {if _eeda :=len (_gg ._af );_bc <=cap (_gg ._af )-_eeda {_gg ._af =_gg ._af [:_eeda +_bc ];return true ;};return false ;};func (_bed *SubstreamReader )fillBuffer ()error {if uint64 (_bed ._edee .StreamPosition ())!=_bed ._bfb +_bed ._dag {_ ,_ggd :=_bed ._edee .Seek (int64 (_bed ._bfb +_bed ._dag ),_ee .SeekStart );if _ggd !=nil {return _ggd ;};};_bed ._gba =_bed ._bfb ;_gaa :=_ffb (uint64 (len (_bed ._cdg )),_bed ._abe -_bed ._bfb );_dbb :=make ([]byte ,_gaa );_bcda ,_fbbb :=_bed ._edee .Read (_dbb );if _fbbb !=nil {return _fbbb ;};for _adc :=uint64 (0);_adc < _gaa ;_adc ++{_bed ._cdg [_adc ]=_dbb [_adc ];};_bed ._ffec =_bed ._gba +uint64 (_bcda );return nil ;};func (_bbc *Reader )readBool ()(_aab bool ,_bdg error ){if _bbc ._ga ==0{_bbc ._defc ,_bdg =_bbc .readBufferByte ();if _bdg !=nil {return false ,_bdg ;};_aab =(_bbc ._defc &0x80)!=0;_bbc ._defc ,_bbc ._ga =_bbc ._defc &0x7f,7;return _aab ,nil ;};_bbc ._ga --;_aab =(_bbc ._defc &(1<<_bbc ._ga ))!=0;_bbc ._defc &=1<<_bbc ._ga -1;return _aab ,nil ;};func NewWriterMSB (data []byte )*Writer {return &Writer {_aaab :data ,_gbdg :true }};func (_bga *BufferedWriter )writeShiftedBytes (_fbd []byte )int {for _ ,_ca :=range _fbd {_bga .writeByte (_ca );};return len (_fbd );};func (_fee *SubstreamReader )StreamPosition ()int64 {return int64 (_fee ._bfb )};func (_dagd *Writer )ResetBit (){_dagd ._ggb =0};func (_cae *SubstreamReader )Seek (offset int64 ,whence int )(int64 ,error ){switch whence {case _ee .SeekStart :_cae ._bfb =uint64 (offset );case _ee .SeekCurrent :_cae ._bfb +=uint64 (offset );case _ee .SeekEnd :_cae ._bfb =_cae ._abe +uint64 (offset );default:return 0,_a .New ("\u0072\u0065\u0061d\u0065\u0072\u002e\u0053\u0075\u0062\u0073\u0074\u0072\u0065\u0061\u006d\u0052\u0065\u0061\u0064\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};_cae ._fbbe =0;return int64 (_cae ._bfb ),nil ;};func (_bcea *SubstreamReader )BitPosition ()int {return int (_bcea ._fbbe )};func (_fcd *SubstreamReader )Read (b []byte )(_gbd int ,_cbe error ){if _fcd ._bfb >=_fcd ._abe {_fe .Log .Trace ("\u0053\u0074\u0072e\u0061\u006d\u0050\u006fs\u003a\u0020\u0027\u0025\u0064\u0027\u0020>\u003d\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027",_fcd ._bfb ,_fcd ._abe );return 0,_ee .EOF ;};for ;_gbd < len (b );_gbd ++{if b [_gbd ],_cbe =_fcd .readUnalignedByte ();_cbe !=nil {if _cbe ==_ee .EOF {return _gbd ,nil ;};return 0,_cbe ;};};return _gbd ,nil ;};func (_eda *BufferedWriter )writeByte (_dbg byte ){switch {case _eda ._eb ==0:_eda ._af [_eda ._ed ]=_dbg ;_eda ._ed ++;case _eda ._g :_eda ._af [_eda ._ed ]|=_dbg >>_eda ._eb ;_eda ._ed ++;_eda ._af [_eda ._ed ]=byte (uint16 (_dbg )<<(8-_eda ._eb )&0xff);default:_eda ._af [_eda ._ed ]|=byte (uint16 (_dbg )<<_eda ._eb &0xff);_eda ._ed ++;_eda ._af [_eda ._ed ]=_dbg >>(8-_eda ._eb );};};func (_ada *Reader )ReadByte ()(byte ,error ){if _ada ._ga ==0{return _ada .readBufferByte ();};return _ada .readUnalignedByte ();};var (_ _ee .Reader =&Reader {};_ _ee .ByteReader =&Reader {};_ _ee .Seeker =&Reader {};_ StreamReader =&Reader {};);