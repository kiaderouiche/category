//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_f "encoding/binary";_g "github.com/stretchr/testify/require";_ef "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_df "github.com/unidoc/unipdf/v3/internal/imageutil";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_db "image";_ab "math";_be "sort";_d "strings";_a "testing";);func (_bea Points )XSorter ()func (_cegd ,_eac int )bool {return func (_ggae ,_bbeb int )bool {return _bea [_ggae ].X < _bea [_bbeb ].X };};func _fdefb ()[]int {_aacb :=make ([]int ,256);for _gaeeb :=0;_gaeeb <=0xff;_gaeeb ++{_ebbe :=byte (_gaeeb );_aacb [_ebbe ]=int (_ebbe &0x1)+(int (_ebbe >>1)&0x1)+(int (_ebbe >>2)&0x1)+(int (_ebbe >>3)&0x1)+(int (_ebbe >>4)&0x1)+(int (_ebbe >>5)&0x1)+(int (_ebbe >>6)&0x1)+(int (_ebbe >>7)&0x1);};return _aacb ;};type Point struct{X ,Y float32 ;};func _bcbc (_fcad *Bitmap ,_edfa int )(*Bitmap ,error ){const _fedg ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _fcad ==nil {return nil ,_b .Error (_fedg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _edfa <=0{return nil ,_b .Error (_fedg ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _edfa ==1{_ebae ,_dgb :=_ced (nil ,_fcad );if _dgb !=nil {return nil ,_b .Wrap (_dgb ,_fedg ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _ebae ,nil ;};_ffda ,_dagb :=_eeg (_fcad ,_edfa ,_edfa );if _dagb !=nil {return nil ,_b .Wrap (_dagb ,_fedg ,"");};return _ffda ,nil ;};func _ffc (_fcfa uint ,_gbeg byte )byte {return _gbeg >>_fcfa <<_fcfa };func _eaea ()(_ebe [256]uint16 ){for _fc :=0;_fc < 256;_fc ++{if _fc &0x01!=0{_ebe [_fc ]|=0x3;};if _fc &0x02!=0{_ebe [_fc ]|=0xc;};if _fc &0x04!=0{_ebe [_fc ]|=0x30;};if _fc &0x08!=0{_ebe [_fc ]|=0xc0;};if _fc &0x10!=0{_ebe [_fc ]|=0x300;};if _fc &0x20!=0{_ebe [_fc ]|=0xc00;};if _fc &0x40!=0{_ebe [_fc ]|=0x3000;};if _fc &0x80!=0{_ebe [_fc ]|=0xc000;};};return _ebe ;};func _edb (_eegc *Bitmap ,_cae int ,_ggf []byte )(_fggb *Bitmap ,_bcd error ){const _ddf ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _eegc ==nil {return nil ,_b .Error (_ddf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cae < 1||_cae > 4{return nil ,_b .Error (_ddf ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _eegc .Height <=1{return nil ,_b .Errorf (_ddf ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_eegc .Height );};_fggb =New (_eegc .Width /2,_eegc .Height /2);if _ggf ==nil {_ggf =_abbg ();};_cf :=_ebcb (_eegc .RowStride ,2*_fggb .RowStride );switch _cae {case 1:_bcd =_fdcc (_eegc ,_fggb ,_cae ,_ggf ,_cf );case 2:_bcd =_efgf (_eegc ,_fggb ,_cae ,_ggf ,_cf );case 3:_bcd =_bgbc (_eegc ,_fggb ,_cae ,_ggf ,_cf );case 4:_bcd =_bfe (_eegc ,_fggb ,_cae ,_ggf ,_cf );};if _bcd !=nil {return nil ,_bcd ;};return _fggb ,nil ;};func _fe (_ga *Bitmap ,_ggd ...int )(_aaf *Bitmap ,_ffd error ){const _bbe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _ga ==nil {return nil ,_b .Error (_bbe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ggd )==0||len (_ggd )> 4{return nil ,_b .Error (_bbe ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _ggd [0]<=0{_ef .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_aaf ,_ffd =_ced (nil ,_ga );if _ffd !=nil {return nil ,_b .Wrap (_ffd ,_bbe ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _aaf ,nil ;};_gab :=_abbg ();_aaf =_ga ;for _age ,_fdb :=range _ggd {if _fdb <=0{break ;};_aaf ,_ffd =_edb (_aaf ,_fdb ,_gab );if _ffd !=nil {return nil ,_b .Wrapf (_ffd ,_bbe ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_age );};};return _aaf ,nil ;};func _fdcb ()(_fgg [256]uint32 ){for _fcb :=0;_fcb < 256;_fcb ++{if _fcb &0x01!=0{_fgg [_fcb ]|=0xf;};if _fcb &0x02!=0{_fgg [_fcb ]|=0xf0;};if _fcb &0x04!=0{_fgg [_fcb ]|=0xf00;};if _fcb &0x08!=0{_fgg [_fcb ]|=0xf000;};if _fcb &0x10!=0{_fgg [_fcb ]|=0xf0000;};if _fcb &0x20!=0{_fgg [_fcb ]|=0xf00000;};if _fcb &0x40!=0{_fgg [_fcb ]|=0xf000000;};if _fcb &0x80!=0{_fgg [_fcb ]|=0xf0000000;};};return _fgg ;};func (_aab *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _aab .Copy (),nil ;};_ddfb ,_ffe :=_aab .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _ffe !=nil {return nil ,_b .Wrap (_ffe ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _ddfb ,nil ;};func (_aeag *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_cdada *Bitmaps ,_fdef *Boxes ,_egeee error ){const _cabgg ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _aeag ==nil {return nil ,nil ,_b .Error (_cabgg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_b .Error (_cabgg ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _aeag .Zero (){_fdef =&Boxes {};_cdada =&Bitmaps {};return _cdada ,_fdef ,nil ;};switch components {case ComponentConn :_cdada =&Bitmaps {};if _fdef ,_egeee =_aeag .ConnComponents (_cdada ,8);_egeee !=nil {return nil ,nil ,_b .Wrap (_egeee ,_cabgg ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_aage ,_adge :=MorphSequence (_aeag ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _adge !=nil {return nil ,nil ,_b .Wrap (_adge ,_cabgg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _ef .Log .IsLogLevel (_ef .LogLevelTrace ){_ef .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_aage .String ());};_fcaf :=&Bitmaps {};_fdef ,_adge =_aage .ConnComponents (_fcaf ,8);if _adge !=nil {return nil ,nil ,_b .Wrap (_adge ,_cabgg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _ef .Log .IsLogLevel (_ef .LogLevelTrace ){_ef .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_fcaf .String ());};if _cdada ,_adge =_fcaf .ClipToBitmap (_aeag );_adge !=nil {return nil ,nil ,_b .Wrap (_adge ,_cabgg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_gggb :=1;var _dec *Bitmap ;switch {case _aeag .XResolution <=200:_dec =_aeag ;case _aeag .XResolution <=400:_gggb =2;_dec ,_egeee =_fe (_aeag ,1,0,0,0);if _egeee !=nil {return nil ,nil ,_b .Wrap (_egeee ,_cabgg ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_gggb =4;_dec ,_egeee =_fe (_aeag ,1,1,0,0);if _egeee !=nil {return nil ,nil ,_b .Wrap (_egeee ,_cabgg ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_bgdg ,_ ,_aacg :=_gaadf (_dec );if _aacg !=nil {return nil ,nil ,_b .Wrap (_aacg ,_cabgg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_gged ,_aacg :=_bcbc (_bgdg ,_gggb );if _aacg !=nil {return nil ,nil ,_b .Wrap (_aacg ,_cabgg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_ffbf :=&Bitmaps {};if _fdef ,_aacg =_gged .ConnComponents (_ffbf ,4);_aacg !=nil {return nil ,nil ,_b .Wrap (_aacg ,_cabgg ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _cdada ,_aacg =_ffbf .ClipToBitmap (_aeag );_aacg !=nil {return nil ,nil ,_b .Wrap (_aacg ,_cabgg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_cdada ,_egeee =_cdada .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _egeee !=nil {return nil ,nil ,_b .Wrap (_egeee ,_cabgg ,"");};_fdef ,_egeee =_fdef .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _egeee !=nil {return nil ,nil ,_b .Wrap (_egeee ,_cabgg ,"");};return _cdada ,_fdef ,nil ;};func (_aggee *Bitmap )GetUnpaddedData ()([]byte ,error ){_efea :=uint (_aggee .Width &0x07);if _efea ==0{return _aggee .Data ,nil ;};_gded :=_aggee .Width *_aggee .Height ;if _gded %8!=0{_gded >>=3;_gded ++;}else {_gded >>=3;};_egde :=make ([]byte ,_gded );_gdbe :=_c .NewWriterMSB (_egde );const _bfa ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _ddge :=0;_ddge < _aggee .Height ;_ddge ++{for _febf :=0;_febf < _aggee .RowStride ;_febf ++{_afaef :=_aggee .Data [_ddge *_aggee .RowStride +_febf ];if _febf !=_aggee .RowStride -1{_fggd :=_gdbe .WriteByte (_afaef );if _fggd !=nil {return nil ,_b .Wrap (_fggd ,_bfa ,"");};continue ;};for _cgec :=uint (0);_cgec < _efea ;_cgec ++{_deaf :=_gdbe .WriteBit (int (_afaef >>(7-_cgec )&0x01));if _deaf !=nil {return nil ,_b .Wrap (_deaf ,_bfa ,"");};};};};return _egde ,nil ;};const _bbag =5000;func NewClassedPoints (points *Points ,classes _ea .IntSlice )(*ClassedPoints ,error ){const _fefag ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_b .Error (_fefag ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_b .Error (_fefag ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_egfef :=&ClassedPoints {Points :points ,IntSlice :classes };if _cega :=_egfef .validateIntSlice ();_cega !=nil {return nil ,_b .Wrap (_cega ,_fefag ,"");};return _egfef ,nil ;};func (_efcc *Boxes )Get (i int )(*_db .Rectangle ,error ){const _fceb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _efcc ==nil {return nil ,_b .Error (_fceb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_efcc )-1{return nil ,_b .Errorf (_fceb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_efcc )[i ],nil ;};func _cfbfa (_edcg *Bitmap ,_daaa *_ea .Stack ,_gcdc ,_geaff int )(_acfb *_db .Rectangle ,_adfd error ){const _cdfc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _edcg ==nil {return nil ,_b .Error (_cdfc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _daaa ==nil {return nil ,_b .Error (_cdfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_gbcb ,_dgdc :=_edcg .Width ,_edcg .Height ;_eabc :=_gbcb -1;_dgcac :=_dgdc -1;if _gcdc < 0||_gcdc > _eabc ||_geaff < 0||_geaff > _dgcac ||!_edcg .GetPixel (_gcdc ,_geaff ){return nil ,nil ;};_fbbe :=_db .Rect (100000,100000,0,0);if _adfd =_dcdb (_daaa ,_gcdc ,_gcdc ,_geaff ,1,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _adfd =_dcdb (_daaa ,_gcdc ,_gcdc ,_geaff +1,-1,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_fbbe .Min .X ,_fbbe .Max .X =_gcdc ,_gcdc ;_fbbe .Min .Y ,_fbbe .Max .Y =_geaff ,_geaff ;var (_cgdc *fillSegment ;_aegb int ;);for _daaa .Len ()> 0{if _cgdc ,_adfd =_gdecc (_daaa );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"");};_geaff =_cgdc ._gfcd ;for _gcdc =_cgdc ._abac -1;_gcdc >=0&&_edcg .GetPixel (_gcdc ,_geaff );_gcdc --{if _adfd =_edcg .SetPixel (_gcdc ,_geaff ,0);_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _gcdc >=_cgdc ._abac -1{for {for _gcdc ++;_gcdc <=_cgdc ._fagbc +1&&_gcdc <=_eabc &&!_edcg .GetPixel (_gcdc ,_geaff );_gcdc ++{};_aegb =_gcdc ;if !(_gcdc <=_cgdc ._fagbc +1&&_gcdc <=_eabc ){break ;};for ;_gcdc <=_eabc &&_edcg .GetPixel (_gcdc ,_geaff );_gcdc ++{if _adfd =_edcg .SetPixel (_gcdc ,_geaff ,0);_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _adfd =_dcdb (_daaa ,_aegb ,_gcdc -1,_cgdc ._gfcd ,_cgdc ._aaea ,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gcdc > _cgdc ._fagbc {if _adfd =_dcdb (_daaa ,_cgdc ._fagbc +1,_gcdc -1,_cgdc ._gfcd ,-_cgdc ._aaea ,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_aegb =_gcdc +1;if _aegb < _cgdc ._abac {if _adfd =_dcdb (_daaa ,_aegb ,_cgdc ._abac -1,_cgdc ._gfcd ,-_cgdc ._aaea ,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gcdc =_cgdc ._abac ;for {for ;_gcdc <=_eabc &&_edcg .GetPixel (_gcdc ,_geaff );_gcdc ++{if _adfd =_edcg .SetPixel (_gcdc ,_geaff ,0);_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _adfd =_dcdb (_daaa ,_aegb ,_gcdc -1,_cgdc ._gfcd ,_cgdc ._aaea ,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gcdc > _cgdc ._fagbc {if _adfd =_dcdb (_daaa ,_cgdc ._fagbc +1,_gcdc -1,_cgdc ._gfcd ,-_cgdc ._aaea ,_dgcac ,&_fbbe );_adfd !=nil {return nil ,_b .Wrap (_adfd ,_cdfc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gcdc ++;_gcdc <=_cgdc ._fagbc +1&&_gcdc <=_eabc &&!_edcg .GetPixel (_gcdc ,_geaff );_gcdc ++{};_aegb =_gcdc ;if !(_gcdc <=_cgdc ._fagbc +1&&_gcdc <=_eabc ){break ;};};};_fbbe .Max .X ++;_fbbe .Max .Y ++;return &_fbbe ,nil ;};func (_cagg *Bitmap )thresholdPixelSum (_gdgf int )bool {var (_cadg int ;_gaf uint8 ;_affdf byte ;_ccgb int ;);_cfe :=_cagg .RowStride ;_cdb :=uint (_cagg .Width &0x07);if _cdb !=0{_gaf =uint8 ((0xff<<(8-_cdb ))&0xff);_cfe --;};for _abf :=0;_abf < _cagg .Height ;_abf ++{for _ccgb =0;_ccgb < _cfe ;_ccgb ++{_affdf =_cagg .Data [_abf *_cagg .RowStride +_ccgb ];_cadg +=int (_caa [_affdf ]);};if _cdb !=0{_affdf =_cagg .Data [_abf *_cagg .RowStride +_ccgb ]&_gaf ;_cadg +=int (_caa [_affdf ]);};if _cadg > _gdgf {return true ;};};return false ;};func init (){for _bcec :=0;_bcec < 256;_bcec ++{_caa [_bcec ]=uint8 (_bcec &0x1)+(uint8 (_bcec >>1)&0x1)+(uint8 (_bcec >>2)&0x1)+(uint8 (_bcec >>3)&0x1)+(uint8 (_bcec >>4)&0x1)+(uint8 (_bcec >>5)&0x1)+(uint8 (_bcec >>6)&0x1)+(uint8 (_bcec >>7)&0x1);};};func _gfce (_eedb *Bitmap ,_fbccg ,_ebcaa int ,_beecd ,_eabd int ,_bafb RasterOperator ){var (_bfbcc int ;_fcca byte ;_ffdgf ,_aabb int ;_adedc int ;);_aaaec :=_beecd >>3;_gaag :=_beecd &7;if _gaag > 0{_fcca =_egbff [_gaag ];};_bfbcc =_eedb .RowStride *_ebcaa +(_fbccg >>3);switch _bafb {case PixClr :for _ffdgf =0;_ffdgf < _eabd ;_ffdgf ++{_adedc =_bfbcc +_ffdgf *_eedb .RowStride ;for _aabb =0;_aabb < _aaaec ;_aabb ++{_eedb .Data [_adedc ]=0x0;_adedc ++;};if _gaag > 0{_eedb .Data [_adedc ]=_aegf (_eedb .Data [_adedc ],0x0,_fcca );};};case PixSet :for _ffdgf =0;_ffdgf < _eabd ;_ffdgf ++{_adedc =_bfbcc +_ffdgf *_eedb .RowStride ;for _aabb =0;_aabb < _aaaec ;_aabb ++{_eedb .Data [_adedc ]=0xff;_adedc ++;};if _gaag > 0{_eedb .Data [_adedc ]=_aegf (_eedb .Data [_adedc ],0xff,_fcca );};};case PixNotDst :for _ffdgf =0;_ffdgf < _eabd ;_ffdgf ++{_adedc =_bfbcc +_ffdgf *_eedb .RowStride ;for _aabb =0;_aabb < _aaaec ;_aabb ++{_eedb .Data [_adedc ]=^_eedb .Data [_adedc ];_adedc ++;};if _gaag > 0{_eedb .Data [_adedc ]=_aegf (_eedb .Data [_adedc ],^_eedb .Data [_adedc ],_fcca );};};};};func _dbbb (_befc ,_bgd *Bitmap ,_cgecb ,_bbgd ,_dace ,_fge ,_gae int ,_ecbg CombinationOperator )error {var _aaee int ;_ecc :=func (){_aaee ++;_dace +=_bgd .RowStride ;_fge +=_befc .RowStride ;_gae +=_befc .RowStride };for _aaee =_cgecb ;_aaee < _bbgd ;_ecc (){_bbc :=_dace ;for _cabg :=_fge ;_cabg <=_gae ;_cabg ++{_ebca ,_cfb :=_bgd .GetByte (_bbc );if _cfb !=nil {return _cfb ;};_edag ,_cfb :=_befc .GetByte (_cabg );if _cfb !=nil {return _cfb ;};if _cfb =_bgd .SetByte (_bbc ,_efad (_ebca ,_edag ,_ecbg ));_cfb !=nil {return _cfb ;};_bbc ++;};};return nil ;};var (_egbf =_eaea ();_abfe =_fdcb ();_bed =_ae (););func (_cabf *Bitmap )SetDefaultPixel (){for _geb :=range _cabf .Data {_cabf .Data [_geb ]=byte (0xff);};};func _bdca (_gbaf ,_eeaf ,_fcfbe *Bitmap ,_bbfb int )(*Bitmap ,error ){const _ecgdc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _eeaf ==nil {return nil ,_b .Error (_ecgdc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fcfbe ==nil {return nil ,_b .Error (_ecgdc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bbfb !=4&&_bbfb !=8{return nil ,_b .Error (_ecgdc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _affe error ;_gbaf ,_affe =_ced (_gbaf ,_eeaf );if _affe !=nil {return nil ,_b .Wrap (_affe ,_ecgdc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_bfedb :=_eeaf .createTemplate ();_fcfbe .setPadBits (0);for _dgbe :=0;_dgbe < _bbag ;_dgbe ++{_bfedb ,_affe =_ced (_bfedb ,_gbaf );if _affe !=nil {return nil ,_b .Wrapf (_affe ,_ecgdc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_dgbe );};if _affe =_dece (_gbaf ,_fcfbe ,_bbfb );_affe !=nil {return nil ,_b .Wrapf (_affe ,_ecgdc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_dgbe );};if _bfedb .Equals (_gbaf ){break ;};};return _gbaf ,nil ;};func TstCSymbol (t *_a .T )*Bitmap {t .Helper ();_gaagb :=New (6,6);_g .NoError (t ,_gaagb .SetPixel (1,0,1));_g .NoError (t ,_gaagb .SetPixel (2,0,1));_g .NoError (t ,_gaagb .SetPixel (3,0,1));_g .NoError (t ,_gaagb .SetPixel (4,0,1));_g .NoError (t ,_gaagb .SetPixel (0,1,1));_g .NoError (t ,_gaagb .SetPixel (5,1,1));_g .NoError (t ,_gaagb .SetPixel (0,2,1));_g .NoError (t ,_gaagb .SetPixel (0,3,1));_g .NoError (t ,_gaagb .SetPixel (0,4,1));_g .NoError (t ,_gaagb .SetPixel (5,4,1));_g .NoError (t ,_gaagb .SetPixel (1,5,1));_g .NoError (t ,_gaagb .SetPixel (2,5,1));_g .NoError (t ,_gaagb .SetPixel (3,5,1));_g .NoError (t ,_gaagb .SetPixel (4,5,1));return _gaagb ;};type byWidth Bitmaps ;type SelectionValue int ;func (_fgba *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _deac ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _gdfb :=_fgba .validateIntSlice ();_gdfb !=nil {return nil ,_b .Wrap (_gdfb ,_deac ,"");};if _fgba .IntSlice .Size ()==0{return nil ,_b .Error (_deac ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fgba .SortByY ();var (_cabcd []*ClassedPoints ;_dgdeb int ;);_ddag :=-1;var _baea *ClassedPoints ;for _dbeec :=0;_dbeec < len (_fgba .IntSlice );_dbeec ++{_dgdeb =int (_fgba .YAtIndex (_dbeec ));if _dgdeb !=_ddag {_baea =&ClassedPoints {Points :_fgba .Points };_ddag =_dgdeb ;_cabcd =append (_cabcd ,_baea );};_baea .IntSlice =append (_baea .IntSlice ,_fgba .IntSlice [_dbeec ]);};for _ ,_dddc :=range _cabcd {_dddc .SortByX ();};return _cabcd ,nil ;};func (_cbf *Bitmap )setEightPartlyBytes (_cbfb ,_bff int ,_gec uint64 )(_eba error ){var (_bfd byte ;_eaad int ;);const _eaf ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _abd :=1;_abd <=_bff ;_abd ++{_eaad =64-_abd *8;_bfd =byte (_gec >>uint (_eaad )&0xff);_ef .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_bfd ,_cbfb ,_cbfb +_abd -1,_bff ,_eaad );if _eba =_cbf .SetByte (_cbfb +_abd -1,_bfd );_eba !=nil {return _b .Wrap (_eba ,_eaf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_fae :=_cbf .RowStride *8-_cbf .Width ;if _fae ==0{return nil ;};_eaad -=8;_bfd =byte (_gec >>uint (_eaad )&0xff)<<uint (_fae );if _eba =_cbf .SetByte (_cbfb +_bff ,_bfd );_eba !=nil {return _b .Wrap (_eba ,_eaf ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _dcdd (_bgccc ,_feeg *Bitmap ,_febfd ,_fdfbe int )(*Bitmap ,error ){const _bafeb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _feeg ==nil {return nil ,_b .Error (_bafeb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _febfd < 1||_fdfbe < 1{return nil ,_b .Error (_bafeb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _febfd ==1&&_fdfbe ==1{return _feeg .Copy (),nil ;};if _febfd ==1||_fdfbe ==1{_efaa :=SelCreateBrick (_fdfbe ,_febfd ,_fdfbe /2,_febfd /2,SelHit );var _bcgd error ;_bgccc ,_bcgd =_bbgdd (_bgccc ,_feeg ,_efaa );if _bcgd !=nil {return nil ,_b .Wrap (_bcgd ,_bafeb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _bgccc ,nil ;};_gdeca :=SelCreateBrick (1,_febfd ,0,_febfd /2,SelHit );_aagb :=SelCreateBrick (_fdfbe ,1,_fdfbe /2,0,SelHit );_gddf ,_ddcc :=_acffd (nil ,_feeg ,_gdeca );if _ddcc !=nil {return nil ,_b .Wrap (_ddcc ,_bafeb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _bgccc ,_ddcc =_acffd (_bgccc ,_gddf ,_aagb );_ddcc !=nil {return nil ,_b .Wrap (_ddcc ,_bafeb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ddcc =_cgddg (_gddf ,_bgccc ,_gdeca );_ddcc !=nil {return nil ,_b .Wrap (_ddcc ,_bafeb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_ddcc =_cgddg (_bgccc ,_gddf ,_aagb );_ddcc !=nil {return nil ,_b .Wrap (_ddcc ,_bafeb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bgccc ,nil ;};func (_ccbb *Bitmap )Equals (s *Bitmap )bool {if len (_ccbb .Data )!=len (s .Data )||_ccbb .Width !=s .Width ||_ccbb .Height !=s .Height {return false ;};for _beec :=0;_beec < _ccbb .Height ;_beec ++{_cge :=_beec *_ccbb .RowStride ;for _bcaag :=0;_bcaag < _ccbb .RowStride ;_bcaag ++{if _ccbb .Data [_cge +_bcaag ]!=s .Data [_cge +_bcaag ]{return false ;};};};return true ;};func (_eca *Bitmap )setBit (_dga int ){_eca .Data [(_dga >>3)]|=0x80>>uint (_dga &7)};func (_feb *Bitmap )GetChocolateData ()[]byte {if _feb .Color ==Vanilla {_feb .inverseData ();};return _feb .Data ;};type fillSegment struct{_abac int ;_fagbc int ;_gfcd int ;_aaea int ;};func TstWSymbol (t *_a .T ,scale ...int )*Bitmap {_agfc ,_dcag :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_g .NoError (t ,_dcag );return TstGetScaledSymbol (t ,_agfc ,scale ...);};func (_aggbg *Bitmap )removeBorderGeneral (_bbdg ,_bccb ,_ebgb ,_acdd int )(*Bitmap ,error ){const _bfgg ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _bbdg < 0||_bccb < 0||_ebgb < 0||_acdd < 0{return nil ,_b .Error (_bfgg ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_cgbb ,_fdfb :=_aggbg .Width ,_aggbg .Height ;_gbdb :=_cgbb -_bbdg -_bccb ;_adff :=_fdfb -_ebgb -_acdd ;if _gbdb <=0{return nil ,_b .Errorf (_bfgg ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_gbdb );};if _adff <=0{return nil ,_b .Errorf (_bfgg ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_adff );};_defd :=New (_gbdb ,_adff );_defd .Color =_aggbg .Color ;_gebb :=_defd .RasterOperation (0,0,_gbdb ,_adff ,PixSrc ,_aggbg ,_bbdg ,_ebgb );if _gebb !=nil {return nil ,_b .Wrap (_gebb ,_bfgg ,"");};return _defd ,nil ;};func _gdecc (_gcdf *_ea .Stack )(_gcba *fillSegment ,_agc error ){const _bgdgg ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _gcdf ==nil {return nil ,_b .Error (_bgdgg ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _gcdf .Aux ==nil {return nil ,_b .Error (_bgdgg ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_babb ,_ecee :=_gcdf .Pop ();if !_ecee {return nil ,nil ;};_fafc ,_ecee :=_babb .(*fillSegment );if !_ecee {return nil ,_b .Error (_bgdgg ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gcba =&fillSegment {_fafc ._abac ,_fafc ._fagbc ,_fafc ._gfcd +_fafc ._aaea ,_fafc ._aaea };_gcdf .Aux .Push (_fafc );return _gcba ,nil ;};func (_bbda *Bitmaps )GetBox (i int )(*_db .Rectangle ,error ){const _bgfc ="\u0047\u0065\u0074\u0042\u006f\u0078";if _bbda ==nil {return nil ,_b .Error (_bgfc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_bbda .Boxes )-1{return nil ,_b .Errorf (_bgfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbda .Boxes [i ],nil ;};func (_bcab Points )Size ()int {return len (_bcab )};func (_dgcd Points )GetIntY (i int )(int ,error ){if i >=len (_dgcd ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_dgcd [i ].Y ),nil ;};func (_cecd *byWidth )Less (i ,j int )bool {return _cecd .Values [i ].Width < _cecd .Values [j ].Width };var _gfcb =[5]int {1,2,3,0,4};func (_aacgf *ClassedPoints )ySortFunction ()func (_gfbd int ,_gaef int )bool {return func (_daae ,_ddce int )bool {return _aacgf .YAtIndex (_daae )< _aacgf .YAtIndex (_ddce )};};func (_gdec *Bitmap )SetByte (index int ,v byte )error {if index > len (_gdec .Data )-1||index < 0{return _b .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_gdec .Data [index ]=v ;return nil ;};func TstTSymbol (t *_a .T ,scale ...int )*Bitmap {_eeedg ,_aefga :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_g .NoError (t ,_aefga );return TstGetScaledSymbol (t ,_eeedg ,scale ...);};func _fggef (_bafdd *Bitmap ,_eadc ,_eddad ,_ggbg ,_egefc int ,_adefd RasterOperator ,_bfgf *Bitmap ,_agdbc ,_fcdfb int )error {var (_cgede bool ;_cdegc bool ;_bcda byte ;_gdda int ;_ddgb int ;_ggdf int ;_bdfgg int ;_fec bool ;_eeed int ;_ded int ;_egfd int ;_dgdebd bool ;_efgcf byte ;_gaeb int ;_caeg int ;_fefbe int ;_edcbf byte ;_fccb int ;_ffff int ;_fbfd uint ;_ceage uint ;_cccc byte ;_cgga shift ;_cdceg bool ;_dgca bool ;_aeagb ,_bfeeg int ;);if _agdbc &7!=0{_ffff =8-(_agdbc &7);};if _eadc &7!=0{_ddgb =8-(_eadc &7);};if _ffff ==0&&_ddgb ==0{_cccc =_ecgf [0];}else {if _ddgb > _ffff {_fbfd =uint (_ddgb -_ffff );}else {_fbfd =uint (8-(_ffff -_ddgb ));};_ceage =8-_fbfd ;_cccc =_ecgf [_fbfd ];};if (_eadc &7)!=0{_cgede =true ;_gdda =8-(_eadc &7);_bcda =_ecgf [_gdda ];_ggdf =_bafdd .RowStride *_eddad +(_eadc >>3);_bdfgg =_bfgf .RowStride *_fcdfb +(_agdbc >>3);_fccb =8-(_agdbc &7);if _gdda > _fccb {_cgga =_gfege ;if _ggbg >=_ffff {_cdceg =true ;};}else {_cgga =_bfacc ;};};if _ggbg < _gdda {_cdegc =true ;_bcda &=_egbff [8-_gdda +_ggbg ];};if !_cdegc {_eeed =(_ggbg -_gdda )>>3;if _eeed !=0{_fec =true ;_ded =_bafdd .RowStride *_eddad +((_eadc +_ddgb )>>3);_egfd =_bfgf .RowStride *_fcdfb +((_agdbc +_ddgb )>>3);};};_gaeb =(_eadc +_ggbg )&7;if !(_cdegc ||_gaeb ==0){_dgdebd =true ;_efgcf =_egbff [_gaeb ];_caeg =_bafdd .RowStride *_eddad +((_eadc +_ddgb )>>3)+_eeed ;_fefbe =_bfgf .RowStride *_fcdfb +((_agdbc +_ddgb )>>3)+_eeed ;if _gaeb > int (_ceage ){_dgca =true ;};};switch _adefd {case PixSrc :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],_edcbf ,_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],_edcbf ,_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixNotSrc :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],^_edcbf ,_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=^_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],^_edcbf ,_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixSrcOrDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],_edcbf |_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]|=_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],_edcbf |_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixSrcAndDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],_edcbf &_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]&=_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],_edcbf &_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixSrcXorDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],_edcbf ^_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]^=_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],_edcbf ^_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixNotSrcOrDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],^_edcbf |_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]|=^_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],^_edcbf |_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixNotSrcAndDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],^_edcbf &_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]&=^_edcbf ;};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],^_edcbf &_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixSrcOrNotDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],_edcbf |^_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=_edcbf |^_bafdd .Data [_ded +_bfeeg ];};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],_edcbf |^_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixSrcAndNotDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],_edcbf &^_bafdd .Data [_ggdf ],_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=_edcbf &^_bafdd .Data [_ded +_bfeeg ];};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],_edcbf &^_bafdd .Data [_caeg ],_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixNotPixSrcOrDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],^(_edcbf |_bafdd .Data [_ggdf ]),_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=^(_edcbf |_bafdd .Data [_ded +_bfeeg ]);};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],^(_edcbf |_bafdd .Data [_caeg ]),_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixNotPixSrcAndDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],^(_edcbf &_bafdd .Data [_ggdf ]),_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=^(_edcbf &_bafdd .Data [_ded +_bfeeg ]);};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],^(_edcbf &_bafdd .Data [_caeg ]),_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};case PixNotPixSrcXorDst :if _cgede {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{if _cgga ==_gfege {_edcbf =_bfgf .Data [_bdfgg ]<<_fbfd ;if _cdceg {_edcbf =_aegf (_edcbf ,_bfgf .Data [_bdfgg +1]>>_ceage ,_cccc );};}else {_edcbf =_bfgf .Data [_bdfgg ]>>_ceage ;};_bafdd .Data [_ggdf ]=_aegf (_bafdd .Data [_ggdf ],^(_edcbf ^_bafdd .Data [_ggdf ]),_bcda );_ggdf +=_bafdd .RowStride ;_bdfgg +=_bfgf .RowStride ;};};if _fec {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{for _bfeeg =0;_bfeeg < _eeed ;_bfeeg ++{_edcbf =_aegf (_bfgf .Data [_egfd +_bfeeg ]<<_fbfd ,_bfgf .Data [_egfd +_bfeeg +1]>>_ceage ,_cccc );_bafdd .Data [_ded +_bfeeg ]=^(_edcbf ^_bafdd .Data [_ded +_bfeeg ]);};_ded +=_bafdd .RowStride ;_egfd +=_bfgf .RowStride ;};};if _dgdebd {for _aeagb =0;_aeagb < _egefc ;_aeagb ++{_edcbf =_bfgf .Data [_fefbe ]<<_fbfd ;if _dgca {_edcbf =_aegf (_edcbf ,_bfgf .Data [_fefbe +1]>>_ceage ,_cccc );};_bafdd .Data [_caeg ]=_aegf (_bafdd .Data [_caeg ],^(_edcbf ^_bafdd .Data [_caeg ]),_efgcf );_caeg +=_bafdd .RowStride ;_fefbe +=_bfgf .RowStride ;};};default:_ef .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_adefd );return _b .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func (_ddgc *Bitmap )setEightFullBytes (_gdbgd int ,_fdg uint64 )error {if _gdbgd +7> len (_ddgc .Data )-1{return _b .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ddgc .Data [_gdbgd ]=byte ((_fdg &0xff00000000000000)>>56);_ddgc .Data [_gdbgd +1]=byte ((_fdg &0xff000000000000)>>48);_ddgc .Data [_gdbgd +2]=byte ((_fdg &0xff0000000000)>>40);_ddgc .Data [_gdbgd +3]=byte ((_fdg &0xff00000000)>>32);_ddgc .Data [_gdbgd +4]=byte ((_fdg &0xff000000)>>24);_ddgc .Data [_gdbgd +5]=byte ((_fdg &0xff0000)>>16);_ddgc .Data [_gdbgd +6]=byte ((_fdg &0xff00)>>8);_ddgc .Data [_gdbgd +7]=byte (_fdg &0xff);return nil ;};func _bcfg (_dee ,_ffec int )int {if _dee > _ffec {return _dee ;};return _ffec ;};func (_cage *Bitmap )setAll ()error {_gfbb :=_cfef (_cage ,0,0,_cage .Width ,_cage .Height ,PixSet ,nil ,0,0);if _gfbb !=nil {return _b .Wrap (_gfbb ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _dcdb (_dgbd *_ea .Stack ,_gagef ,_eadg ,_babd ,_gfbf ,_dgeb int ,_fgeb *_db .Rectangle )(_fdde error ){const _geff ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _dgbd ==nil {return _b .Error (_geff ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fgeb ==nil {return _b .Error (_geff ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_fgeb .Min .X =_ea .Min (_fgeb .Min .X ,_gagef );_fgeb .Max .X =_ea .Max (_fgeb .Max .X ,_eadg );_fgeb .Min .Y =_ea .Min (_fgeb .Min .Y ,_babd );_fgeb .Max .Y =_ea .Max (_fgeb .Max .Y ,_babd );if !(_babd +_gfbf >=0&&_babd +_gfbf <=_dgeb ){return nil ;};if _dgbd .Aux ==nil {return _b .Error (_geff ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _bfgcc *fillSegment ;_afdd ,_ecgfd :=_dgbd .Aux .Pop ();if _ecgfd {if _bfgcc ,_ecgfd =_afdd .(*fillSegment );!_ecgfd {return _b .Error (_geff ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_bfgcc =&fillSegment {};};_bfgcc ._abac =_gagef ;_bfgcc ._fagbc =_eadg ;_bfgcc ._gfcd =_babd ;_bfgcc ._aaea =_gfbf ;_dgbd .Push (_bfgcc );return nil ;};type Component int ;func (_fcgd *Bitmap )And (s *Bitmap )(_ceae *Bitmap ,_dbee error ){const _fdd ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _fcgd ==nil {return nil ,_b .Error (_fdd ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_b .Error (_fdd ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_fcgd .SizesEqual (s ){_ef .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_fdd );};if _ceae ,_dbee =_ced (_ceae ,_fcgd );_dbee !=nil {return nil ,_b .Wrap (_dbee ,_fdd ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dbee =_ceae .RasterOperation (0,0,_ceae .Width ,_ceae .Height ,PixSrcAndDst ,s ,0,0);_dbee !=nil {return nil ,_b .Wrap (_dbee ,_fdd ,"");};return _ceae ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_db .Rectangle ;};func (_ceed *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gbcc ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_bcead ,_afag :=_ceed .selectByIndexes (idx );if _afag !=nil {return nil ,_b .Wrap (_afag ,_gbcc ,"");};return _bcead ,nil ;};func (_fffdb *Bitmaps )AddBitmap (bm *Bitmap ){_fffdb .Values =append (_fffdb .Values ,bm )};func (_egfdg *Bitmaps )AddBox (box *_db .Rectangle ){_egfdg .Boxes =append (_egfdg .Boxes ,box )};func (_gedd *Bitmap )CountPixels ()int {return _gedd .countPixels ()};func _acffd (_cbga *Bitmap ,_cdeda *Bitmap ,_adb *Selection )(*Bitmap ,error ){var (_bbb *Bitmap ;_bdfd error ;);_cbga ,_bdfd =_beff (_cbga ,_cdeda ,_adb ,&_bbb );if _bdfd !=nil {return nil ,_bdfd ;};if _bdfd =_cbga .clearAll ();_bdfd !=nil {return nil ,_bdfd ;};var _ffee SelectionValue ;for _dbbg :=0;_dbbg < _adb .Height ;_dbbg ++{for _fdfe :=0;_fdfe < _adb .Width ;_fdfe ++{_ffee =_adb .Data [_dbbg ][_fdfe ];if _ffee ==SelHit {if _bdfd =_cbga .RasterOperation (_fdfe -_adb .Cx ,_dbbg -_adb .Cy ,_cdeda .Width ,_cdeda .Height ,PixSrcOrDst ,_bbb ,0,0);_bdfd !=nil {return nil ,_bdfd ;};};};};return _cbga ,nil ;};func (_gfe *Bitmap )InverseData (){_gfe .inverseData ()};func Extract (roi _db .Rectangle ,src *Bitmap )(*Bitmap ,error ){_egb :=New (roi .Dx (),roi .Dy ());_efccd :=roi .Min .X &0x07;_gadf :=8-_efccd ;_ebfg :=uint (8-_egb .Width &0x07);_fcebb :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_aed :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_bfge :=_egb .RowStride ==_aed +1-_fcebb ;var _bcga int ;for _bfag :=roi .Min .Y ;_bfag < roi .Max .Y ;_bfag ++{_eeba :=_fcebb ;_bcac :=_bcga ;switch {case _fcebb ==_aed :_gdee ,_aace :=src .GetByte (_eeba );if _aace !=nil {return nil ,_aace ;};_gdee <<=uint (_efccd );_aace =_egb .SetByte (_bcac ,_ffc (_ebfg ,_gdee ));if _aace !=nil {return nil ,_aace ;};case _efccd ==0:for _ffaa :=_fcebb ;_ffaa <=_aed ;_ffaa ++{_dbag ,_fced :=src .GetByte (_eeba );if _fced !=nil {return nil ,_fced ;};_eeba ++;if _ffaa ==_aed &&_bfge {_dbag =_ffc (_ebfg ,_dbag );};_fced =_egb .SetByte (_bcac ,_dbag );if _fced !=nil {return nil ,_fced ;};_bcac ++;};default:_feaf :=_fbcc (src ,_egb ,uint (_efccd ),uint (_gadf ),_ebfg ,_fcebb ,_aed ,_bfge ,_eeba ,_bcac );if _feaf !=nil {return nil ,_feaf ;};};_fcebb +=src .RowStride ;_aed +=src .RowStride ;_bcga +=_egb .RowStride ;};return _egb ,nil ;};func (_fag *Bitmap )inverseData (){if _bef :=_fag .RasterOperation (0,0,_fag .Width ,_fag .Height ,PixNotDst ,nil ,0,0);_bef !=nil {_ef .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_bef );};if _fag .Color ==Chocolate {_fag .Color =Vanilla ;}else {_fag .Color =Chocolate ;};};func (_edbfg *byHeight )Swap (i ,j int ){_edbfg .Values [i ],_edbfg .Values [j ]=_edbfg .Values [j ],_edbfg .Values [i ];if _edbfg .Boxes !=nil {_edbfg .Boxes [i ],_edbfg .Boxes [j ]=_edbfg .Boxes [j ],_edbfg .Boxes [i ];};};type CombinationOperator int ;type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_dcge *Bitmap )setTwoBytes (_gbce int ,_aac uint16 )error {if _gbce +1> len (_dcge .Data )-1{return _b .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gbce );};_dcge .Data [_gbce ]=byte ((_aac &0xff00)>>8);_dcge .Data [_gbce +1]=byte (_aac &0xff);return nil ;};func (_bcfgf *ClassedPoints )Less (i ,j int )bool {return _bcfgf ._ggaeg (i ,j )};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fcagd float64 ,_cecc error ){const _efff ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_b .Error (_efff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_b .Error (_efff ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_b .Error (_efff ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_adgae ,_bdfe :=bm1 .Width ,bm1 .Height ;_defba ,_gfff :=bm2 .Width ,bm2 .Height ;_bfae :=_cbfd (_adgae -_defba );if _bfae > maxDiffW {return 0,nil ;};_ddgf :=_cbfd (_bdfe -_gfff );if _ddgf > maxDiffH {return 0,nil ;};var _bfde ,_fdcba int ;if delX >=0{_bfde =int (delX +0.5);}else {_bfde =int (delX -0.5);};if delY >=0{_fdcba =int (delY +0.5);}else {_fdcba =int (delY -0.5);};_cgge :=_bcfg (_fdcba ,0);_fccd :=_ebcb (_gfff +_fdcba ,_bdfe );_cccg :=bm1 .RowStride *_cgge ;_dbab :=bm2 .RowStride *(_cgge -_fdcba );_caef :=_bcfg (_bfde ,0);_cbgf :=_ebcb (_defba +_bfde ,_adgae );_aba :=bm2 .RowStride ;var _cfeg ,_efgff int ;if _bfde >=8{_cfeg =_bfde >>3;_cccg +=_cfeg ;_caef -=_cfeg <<3;_cbgf -=_cfeg <<3;_bfde &=7;}else if _bfde <=-8{_efgff =-((_bfde +7)>>3);_dbab +=_efgff ;_aba -=_efgff ;_bfde +=_efgff <<3;};if _caef >=_cbgf ||_cgge >=_fccd {return 0,nil ;};_dbfg :=(_cbgf +7)>>3;var (_gbcee ,_cabd ,_eebc byte ;_fbcca ,_dbeg ,_bgfd int ;);switch {case _bfde ==0:for _bgfd =_cgge ;_bgfd < _fccd ;_bgfd ,_cccg ,_dbab =_bgfd +1,_cccg +bm1 .RowStride ,_dbab +bm2 .RowStride {for _dbeg =0;_dbeg < _dbfg ;_dbeg ++{_eebc =bm1 .Data [_cccg +_dbeg ]&bm2 .Data [_dbab +_dbeg ];_fbcca +=tab [_eebc ];};};case _bfde > 0:if _aba < _dbfg {for _bgfd =_cgge ;_bgfd < _fccd ;_bgfd ,_cccg ,_dbab =_bgfd +1,_cccg +bm1 .RowStride ,_dbab +bm2 .RowStride {_gbcee ,_cabd =bm1 .Data [_cccg ],bm2 .Data [_dbab ]>>uint (_bfde );_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];for _dbeg =1;_dbeg < _aba ;_dbeg ++{_gbcee ,_cabd =bm1 .Data [_cccg +_dbeg ],(bm2 .Data [_dbab +_dbeg ]>>uint (_bfde ))|(bm2 .Data [_dbab +_dbeg -1]<<uint (8-_bfde ));_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];};_gbcee =bm1 .Data [_cccg +_dbeg ];_cabd =bm2 .Data [_dbab +_dbeg -1]<<uint (8-_bfde );_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];};}else {for _bgfd =_cgge ;_bgfd < _fccd ;_bgfd ,_cccg ,_dbab =_bgfd +1,_cccg +bm1 .RowStride ,_dbab +bm2 .RowStride {_gbcee ,_cabd =bm1 .Data [_cccg ],bm2 .Data [_dbab ]>>uint (_bfde );_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];for _dbeg =1;_dbeg < _dbfg ;_dbeg ++{_gbcee =bm1 .Data [_cccg +_dbeg ];_cabd =(bm2 .Data [_dbab +_dbeg ]>>uint (_bfde ))|(bm2 .Data [_dbab +_dbeg -1]<<uint (8-_bfde ));_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];};};};default:if _dbfg < _aba {for _bgfd =_cgge ;_bgfd < _fccd ;_bgfd ,_cccg ,_dbab =_bgfd +1,_cccg +bm1 .RowStride ,_dbab +bm2 .RowStride {for _dbeg =0;_dbeg < _dbfg ;_dbeg ++{_gbcee =bm1 .Data [_cccg +_dbeg ];_cabd =bm2 .Data [_dbab +_dbeg ]<<uint (-_bfde );_cabd |=bm2 .Data [_dbab +_dbeg +1]>>uint (8+_bfde );_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];};};}else {for _bgfd =_cgge ;_bgfd < _fccd ;_bgfd ,_cccg ,_dbab =_bgfd +1,_cccg +bm1 .RowStride ,_dbab +bm2 .RowStride {for _dbeg =0;_dbeg < _dbfg -1;_dbeg ++{_gbcee =bm1 .Data [_cccg +_dbeg ];_cabd =bm2 .Data [_dbab +_dbeg ]<<uint (-_bfde );_cabd |=bm2 .Data [_dbab +_dbeg +1]>>uint (8+_bfde );_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];};_gbcee =bm1 .Data [_cccg +_dbeg ];_cabd =bm2 .Data [_dbab +_dbeg ]<<uint (-_bfde );_eebc =_gbcee &_cabd ;_fbcca +=tab [_eebc ];};};};_fcagd =float64 (_fbcca )*float64 (_fbcca )/(float64 (area1 )*float64 (area2 ));return _fcagd ,nil ;};func TstPSymbol (t *_a .T )*Bitmap {t .Helper ();_fgccb :=New (5,8);_g .NoError (t ,_fgccb .SetPixel (0,0,1));_g .NoError (t ,_fgccb .SetPixel (1,0,1));_g .NoError (t ,_fgccb .SetPixel (2,0,1));_g .NoError (t ,_fgccb .SetPixel (3,0,1));_g .NoError (t ,_fgccb .SetPixel (4,1,1));_g .NoError (t ,_fgccb .SetPixel (0,1,1));_g .NoError (t ,_fgccb .SetPixel (4,2,1));_g .NoError (t ,_fgccb .SetPixel (0,2,1));_g .NoError (t ,_fgccb .SetPixel (4,3,1));_g .NoError (t ,_fgccb .SetPixel (0,3,1));_g .NoError (t ,_fgccb .SetPixel (0,4,1));_g .NoError (t ,_fgccb .SetPixel (1,4,1));_g .NoError (t ,_fgccb .SetPixel (2,4,1));_g .NoError (t ,_fgccb .SetPixel (3,4,1));_g .NoError (t ,_fgccb .SetPixel (0,5,1));_g .NoError (t ,_fgccb .SetPixel (0,6,1));_g .NoError (t ,_fgccb .SetPixel (0,7,1));return _fgccb ;};func (_ceaff *BitmapsArray )AddBitmaps (bm *Bitmaps ){_ceaff .Values =append (_ceaff .Values ,bm )};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_agecb bool ,_cdgg error ){const _gdde ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_bafg ,_fad :=p1 .Width ,p1 .Height ;_eebcc ,_bgcb :=p3 .Width ,p3 .Height ;if _ea .Abs (_bafg -_eebcc )> maxDiffW {return false ,nil ;};if _ea .Abs (_fad -_bgcb )> maxDiffH {return false ,nil ;};_fgf :=int (float32 (area1 )*(1.0-rank )+0.5);_dfcg :=int (float32 (area3 )*(1.0-rank )+0.5);var _abaa ,_bfggf int ;if delX >=0{_abaa =int (delX +0.5);}else {_abaa =int (delX -0.5);};if delY >=0{_bfggf =int (delY +0.5);}else {_bfggf =int (delY -0.5);};_cgcc :=p1 .CreateTemplate ();if _cdgg =_cgcc .RasterOperation (0,0,_bafg ,_fad ,PixSrc ,p1 ,0,0);_cdgg !=nil {return false ,_b .Wrap (_cdgg ,_gdde ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cdgg =_cgcc .RasterOperation (_abaa ,_bfggf ,_bafg ,_fad ,PixNotSrcAndDst ,p4 ,0,0);_cdgg !=nil {return false ,_b .Wrap (_cdgg ,_gdde ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_agecb ,_cdgg =_cgcc .ThresholdPixelSum (_fgf ,tab8 );if _cdgg !=nil {return false ,_b .Wrap (_cdgg ,_gdde ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _agecb {return false ,nil ;};if _cdgg =_cgcc .RasterOperation (_abaa ,_bfggf ,_eebcc ,_bgcb ,PixSrc ,p3 ,0,0);_cdgg !=nil {return false ,_b .Wrap (_cdgg ,_gdde ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cdgg =_cgcc .RasterOperation (0,0,_eebcc ,_bgcb ,PixNotSrcAndDst ,p2 ,0,0);_cdgg !=nil {return false ,_b .Wrap (_cdgg ,_gdde ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_agecb ,_cdgg =_cgcc .ThresholdPixelSum (_dfcg ,tab8 );if _cdgg !=nil {return false ,_b .Wrap (_cdgg ,_gdde ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_agecb ,nil ;};func _fdcc (_bfc ,_gf *Bitmap ,_eag int ,_efg []byte ,_bd int )(_ffa error ){const _fa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_aafe ,_gee ,_adg ,_edbd ,_dfb ,_dbg ,_ebdf ,_fb int ;_cfd ,_efa uint32 ;_faf ,_afa byte ;_cgf uint16 ;);_dfd :=make ([]byte ,4);_cfa :=make ([]byte ,4);for _adg =0;_adg < _bfc .Height -1;_adg ,_edbd =_adg +2,_edbd +1{_aafe =_adg *_bfc .RowStride ;_gee =_edbd *_gf .RowStride ;for _dfb ,_dbg =0,0;_dfb < _bd ;_dfb ,_dbg =_dfb +4,_dbg +1{for _ebdf =0;_ebdf < 4;_ebdf ++{_fb =_aafe +_dfb +_ebdf ;if _fb <=len (_bfc .Data )-1&&_fb < _aafe +_bfc .RowStride {_dfd [_ebdf ]=_bfc .Data [_fb ];}else {_dfd [_ebdf ]=0x00;};_fb =_aafe +_bfc .RowStride +_dfb +_ebdf ;if _fb <=len (_bfc .Data )-1&&_fb < _aafe +(2*_bfc .RowStride ){_cfa [_ebdf ]=_bfc .Data [_fb ];}else {_cfa [_ebdf ]=0x00;};};_cfd =_f .BigEndian .Uint32 (_dfd );_efa =_f .BigEndian .Uint32 (_cfa );_efa |=_cfd ;_efa |=_efa <<1;_efa &=0xaaaaaaaa;_cfd =_efa |(_efa <<7);_faf =byte (_cfd >>24);_afa =byte ((_cfd >>8)&0xff);_fb =_gee +_dbg ;if _fb +1==len (_gf .Data )-1||_fb +1>=_gee +_gf .RowStride {_gf .Data [_fb ]=_efg [_faf ];}else {_cgf =(uint16 (_efg [_faf ])<<8)|uint16 (_efg [_afa ]);if _ffa =_gf .setTwoBytes (_fb ,_cgf );_ffa !=nil {return _b .Wrapf (_ffa ,_fa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fb );};_dbg ++;};};};return nil ;};func (_cgfd *Bitmap )connComponentsBB (_geed int )(_efga *Boxes ,_acde error ){const _fddd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _geed !=4&&_geed !=8{return nil ,_b .Error (_fddd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cgfd .Zero (){return &Boxes {},nil ;};_cgfd .setPadBits (0);_ggdg ,_acde :=_ced (nil ,_cgfd );if _acde !=nil {return nil ,_b .Wrap (_acde ,_fddd ,"\u0062\u006d\u0031");};_acaf :=&_ea .Stack {};_acaf .Aux =&_ea .Stack {};_efga =&Boxes {};var (_ccfd ,_bad int ;_cdbd _db .Point ;_ebcg bool ;_gcf *_db .Rectangle ;);for {if _cdbd ,_ebcg ,_acde =_ggdg .nextOnPixel (_bad ,_ccfd );_acde !=nil {return nil ,_b .Wrap (_acde ,_fddd ,"");};if !_ebcg {break ;};if _gcf ,_acde =_ebcd (_ggdg ,_acaf ,_cdbd .X ,_cdbd .Y ,_geed );_acde !=nil {return nil ,_b .Wrap (_acde ,_fddd ,"");};if _acde =_efga .Add (_gcf );_acde !=nil {return nil ,_b .Wrap (_acde ,_fddd ,"");};_bad =_cdbd .X ;_ccfd =_cdbd .Y ;};return _efga ,nil ;};func (_eddf *Bitmap )clearAll ()error {return _eddf .RasterOperation (0,0,_eddf .Width ,_eddf .Height ,PixClr ,nil ,0,0);};func _baaf (_aafea *Bitmap ,_dceb *_ea .Stack ,_afef ,_cgbc int )(_cafd *_db .Rectangle ,_aaaee error ){const _aefdd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _aafea ==nil {return nil ,_b .Error (_aefdd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dceb ==nil {return nil ,_b .Error (_aefdd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_fgea ,_abae :=_aafea .Width ,_aafea .Height ;_affeg :=_fgea -1;_edga :=_abae -1;if _afef < 0||_afef > _affeg ||_cgbc < 0||_cgbc > _edga ||!_aafea .GetPixel (_afef ,_cgbc ){return nil ,nil ;};var _bbad *_db .Rectangle ;_bbad ,_aaaee =Rect (100000,100000,0,0);if _aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"");};if _aaaee =_dcdb (_dceb ,_afef ,_afef ,_cgbc ,1,_edga ,_bbad );_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _aaaee =_dcdb (_dceb ,_afef ,_afef ,_cgbc +1,-1,_edga ,_bbad );_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bbad .Min .X ,_bbad .Max .X =_afef ,_afef ;_bbad .Min .Y ,_bbad .Max .Y =_cgbc ,_cgbc ;var (_ceccc *fillSegment ;_dbda int ;);for _dceb .Len ()> 0{if _ceccc ,_aaaee =_gdecc (_dceb );_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"");};_cgbc =_ceccc ._gfcd ;for _afef =_ceccc ._abac ;_afef >=0&&_aafea .GetPixel (_afef ,_cgbc );_afef --{if _aaaee =_aafea .SetPixel (_afef ,_cgbc ,0);_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"");};};if _afef >=_ceccc ._abac {for _afef ++;_afef <=_ceccc ._fagbc &&_afef <=_affeg &&!_aafea .GetPixel (_afef ,_cgbc );_afef ++{};_dbda =_afef ;if !(_afef <=_ceccc ._fagbc &&_afef <=_affeg ){continue ;};}else {_dbda =_afef +1;if _dbda < _ceccc ._abac -1{if _aaaee =_dcdb (_dceb ,_dbda ,_ceccc ._abac -1,_ceccc ._gfcd ,-_ceccc ._aaea ,_edga ,_bbad );_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_afef =_ceccc ._abac +1;};for {for ;_afef <=_affeg &&_aafea .GetPixel (_afef ,_cgbc );_afef ++{if _aaaee =_aafea .SetPixel (_afef ,_cgbc ,0);_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _aaaee =_dcdb (_dceb ,_dbda ,_afef -1,_ceccc ._gfcd ,_ceccc ._aaea ,_edga ,_bbad );_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afef > _ceccc ._fagbc +1{if _aaaee =_dcdb (_dceb ,_ceccc ._fagbc +1,_afef -1,_ceccc ._gfcd ,-_ceccc ._aaea ,_edga ,_bbad );_aaaee !=nil {return nil ,_b .Wrap (_aaaee ,_aefdd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _afef ++;_afef <=_ceccc ._fagbc &&_afef <=_affeg &&!_aafea .GetPixel (_afef ,_cgbc );_afef ++{};_dbda =_afef ;if !(_afef <=_ceccc ._fagbc &&_afef <=_affeg ){break ;};};};_bbad .Max .X ++;_bbad .Max .Y ++;return _bbad ,nil ;};func (_ccff *Bitmap )ClipRectangle (box *_db .Rectangle )(_cfg *Bitmap ,_bgcc *_db .Rectangle ,_ddc error ){const _egdg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_b .Error (_egdg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_agab ,_agb :=_ccff .Width ,_ccff .Height ;_ecbac :=_db .Rect (0,0,_agab ,_agb );if !box .Overlaps (_ecbac ){return nil ,nil ,_b .Error (_egdg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_ged :=box .Intersect (_ecbac );_dbb ,_dba :=_ged .Min .X ,_ged .Min .Y ;_gdbd ,_aee :=_ged .Dx (),_ged .Dy ();_cfg =New (_gdbd ,_aee );_cfg .Text =_ccff .Text ;if _ddc =_cfg .RasterOperation (0,0,_gdbd ,_aee ,PixSrc ,_ccff ,_dbb ,_dba );_ddc !=nil {return nil ,nil ,_b .Wrap (_ddc ,_egdg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_bgcc =&_ged ;return _cfg ,_bgcc ,nil ;};func _egaf (_cdcd *Bitmap ,_bfgc ,_egbd ,_abdc ,_bdafe int ,_ceceg RasterOperator ){if _bfgc < 0{_abdc +=_bfgc ;_bfgc =0;};_cfc :=_bfgc +_abdc -_cdcd .Width ;if _cfc > 0{_abdc -=_cfc ;};if _egbd < 0{_bdafe +=_egbd ;_egbd =0;};_afda :=_egbd +_bdafe -_cdcd .Height ;if _afda > 0{_bdafe -=_afda ;};if _abdc <=0||_bdafe <=0{return ;};if (_bfgc &7)==0{_gfce (_cdcd ,_bfgc ,_egbd ,_abdc ,_bdafe ,_ceceg );}else {_fdfed (_cdcd ,_bfgc ,_egbd ,_abdc ,_bdafe ,_ceceg );};};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _gbg ,_edae int ;_egaa :=src .RowStride -1;if x < 0{_edae =-x ;x =0;}else if x +src .Width > dst .Width {_egaa -=src .Width +x -dst .Width ;};if y < 0{_gbg =-y ;y =0;_edae +=src .RowStride ;_egaa +=src .RowStride ;}else if y +src .Height > dst .Height {_gbg =src .Height +y -dst .Height ;};var (_bbec int ;_fee error ;);_bfed :=x &0x07;_egef :=8-_bfed ;_abg :=src .Width &0x07;_aefa :=_egef -_abg ;_aebc :=_egef &0x07!=0;_efgb :=src .Width <=((_egaa -_edae )<<3)+_egef ;_cbbaa :=dst .GetByteIndex (x ,y );_dda :=_gbg +dst .Height ;if src .Height > _dda {_bbec =_dda ;}else {_bbec =src .Height ;};switch {case !_aebc :_fee =_dbbb (src ,dst ,_gbg ,_bbec ,_cbbaa ,_edae ,_egaa ,op );case _efgb :_fee =_eefa (src ,dst ,_gbg ,_bbec ,_cbbaa ,_edae ,_egaa ,_aefa ,_bfed ,_egef ,op );default:_fee =_bgg (src ,dst ,_gbg ,_bbec ,_cbbaa ,_edae ,_egaa ,_aefa ,_bfed ,_egef ,op ,_abg );};return _fee ;};func _ffg (_fd ,_bgf *Bitmap )(_cdac error ){const _bb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_adc :=_bgf .RowStride ;_ege :=_fd .RowStride ;var _cee ,_fdf ,_fg ,_cc ,_bec int ;for _fg =0;_fg < _bgf .Height ;_fg ++{_cee =_fg *_adc ;_fdf =8*_fg *_ege ;for _cc =0;_cc < _adc ;_cc ++{if _cdac =_fd .setEightBytes (_fdf +_cc *8,_bed [_bgf .Data [_cee +_cc ]]);_cdac !=nil {return _b .Wrap (_cdac ,_bb ,"");};};for _bec =1;_bec < 8;_bec ++{for _cc =0;_cc < _ege ;_cc ++{if _cdac =_fd .SetByte (_fdf +_bec *_ege +_cc ,_fd .Data [_fdf +_cc ]);_cdac !=nil {return _b .Wrap (_cdac ,_bb ,"");};};};};return nil ;};type MorphOperation int ;func _becec (_eccb *Bitmap ,_bebg ,_fgge int ,_gdga ,_acb int ,_cgcag RasterOperator ,_cbcd *Bitmap ,_agef ,_gage int )error {var _adcc ,_gabc ,_eagc ,_eecfc int ;if _bebg < 0{_agef -=_bebg ;_gdga +=_bebg ;_bebg =0;};if _agef < 0{_bebg -=_agef ;_gdga +=_agef ;_agef =0;};_adcc =_bebg +_gdga -_eccb .Width ;if _adcc > 0{_gdga -=_adcc ;};_gabc =_agef +_gdga -_cbcd .Width ;if _gabc > 0{_gdga -=_gabc ;};if _fgge < 0{_gage -=_fgge ;_acb +=_fgge ;_fgge =0;};if _gage < 0{_fgge -=_gage ;_acb +=_gage ;_gage =0;};_eagc =_fgge +_acb -_eccb .Height ;if _eagc > 0{_acb -=_eagc ;};_eecfc =_gage +_acb -_cbcd .Height ;if _eecfc > 0{_acb -=_eecfc ;};if _gdga <=0||_acb <=0{return nil ;};var _aebef error ;switch {case _bebg &7==0&&_agef &7==0:_aebef =_dadb (_eccb ,_bebg ,_fgge ,_gdga ,_acb ,_cgcag ,_cbcd ,_agef ,_gage );case _bebg &7==_agef &7:_aebef =_caaa (_eccb ,_bebg ,_fgge ,_gdga ,_acb ,_cgcag ,_cbcd ,_agef ,_gage );default:_aebef =_fggef (_eccb ,_bebg ,_fgge ,_gdga ,_acb ,_cgcag ,_cbcd ,_agef ,_gage );};if _aebef !=nil {return _b .Wrap (_aebef ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_dad *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_aff *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _aff .Copy (),nil ;};_cea ,_ebf :=_aff .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _ebf !=nil {return nil ,_b .Wrap (_ebf ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _cea ,nil ;};func (_gebe *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _adfdf ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _gebe ==nil {return nil ,_b .Error (_adfdf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_gebe .Values )-1{return nil ,_b .Errorf (_adfdf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gebe .Values [i ],nil ;};func TstDSymbol (t *_a .T ,scale ...int )*Bitmap {_fcfg ,_ddgca :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_g .NoError (t ,_ddgca );return TstGetScaledSymbol (t ,_fcfg ,scale ...);};func _bgb (_dbc ,_gc *Bitmap )(_eb error ){const _eea ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ag :=_gc .RowStride ;_gbd :=_dbc .RowStride ;_ebd :=_gc .RowStride *4-_dbc .RowStride ;var (_dbe ,_gcc byte ;_eae uint32 ;_cda ,_beg ,_bgbb ,_gbdg ,_abb ,_ff ,_bgbba int ;);for _bgbb =0;_bgbb < _gc .Height ;_bgbb ++{_cda =_bgbb *_ag ;_beg =4*_bgbb *_gbd ;for _gbdg =0;_gbdg < _ag ;_gbdg ++{_dbe =_gc .Data [_cda +_gbdg ];_eae =_abfe [_dbe ];_ff =_beg +_gbdg *4;if _ebd !=0&&(_gbdg +1)*4> _dbc .RowStride {for _abb =_ebd ;_abb > 0;_abb --{_gcc =byte ((_eae >>uint (_abb *8))&0xff);_bgbba =_ff +(_ebd -_abb );if _eb =_dbc .SetByte (_bgbba ,_gcc );_eb !=nil {return _b .Wrapf (_eb ,_eea ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_abb );};};}else if _eb =_dbc .setFourBytes (_ff ,_eae );_eb !=nil {return _b .Wrap (_eb ,_eea ,"");};if _eb =_dbc .setFourBytes (_beg +_gbdg *4,_abfe [_gc .Data [_cda +_gbdg ]]);_eb !=nil {return _b .Wrap (_eb ,_eea ,"");};};for _abb =1;_abb < 4;_abb ++{for _gbdg =0;_gbdg < _gbd ;_gbdg ++{if _eb =_dbc .SetByte (_beg +_abb *_gbd +_gbdg ,_dbc .Data [_beg +_gbdg ]);_eb !=nil {return _b .Wrapf (_eb ,_eea ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_abb ,_gbdg );};};};};return nil ;};func (_aeca *Bitmap )setEightBytes (_bbfd int ,_gccge uint64 )error {_egff :=_aeca .RowStride -(_bbfd %_aeca .RowStride );if _aeca .RowStride !=_aeca .Width >>3{_egff --;};if _egff >=8{return _aeca .setEightFullBytes (_bbfd ,_gccge );};return _aeca .setEightPartlyBytes (_bbfd ,_egff ,_gccge );};func (_fbd MorphProcess )getWidthHeight ()(_bgcbb ,_ffecf int ){return _fbd .Arguments [0],_fbd .Arguments [1];};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _cgcb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_faff :=_fba (width ,height );_faff .Data =data ;if _cdd :=((width *height )+7)>>3;len (data )< _cdd {return nil ,_b .Errorf (_cgcb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cdd );};if _feg :=_faff .addPadBits ();_feg !=nil {return nil ,_b .Wrap (_feg ,_cgcb ,"");};return _faff ,nil ;};func _ebcd (_decfg *Bitmap ,_gddbc *_ea .Stack ,_fafd ,_badg ,_fcbe int )(_dgcdb *_db .Rectangle ,_ccffg error ){const _cgee ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _decfg ==nil {return nil ,_b .Error (_cgee ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gddbc ==nil {return nil ,_b .Error (_cgee ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _fcbe {case 4:if _dgcdb ,_ccffg =_baaf (_decfg ,_gddbc ,_fafd ,_badg );_ccffg !=nil {return nil ,_b .Wrap (_ccffg ,_cgee ,"");};return _dgcdb ,nil ;case 8:if _dgcdb ,_ccffg =_cfbfa (_decfg ,_gddbc ,_fafd ,_badg );_ccffg !=nil {return nil ,_b .Wrap (_ccffg ,_cgee ,"");};return _dgcdb ,nil ;default:return nil ,_b .Errorf (_cgee ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_fcbe );};};func TstGetScaledSymbol (t *_a .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_dfcbag ,_abbc :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_g .NoError (t ,_abbc );return _dfcbag ;};type shift int ;func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cfef (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _cbfd (_fdba int )int {if _fdba < 0{return -_fdba ;};return _fdba ;};func TstWordBitmapWithSpaces (t *_a .T ,scale ...int )*Bitmap {_ggdd :=1;if len (scale )> 0{_ggdd =scale [0];};_aggbd :=3;_fgccc :=9+7+15+2*_aggbd +2*_aggbd ;_fedd :=5+_aggbd +5+2*_aggbd ;_cbef :=New (_fgccc *_ggdd ,_fedd *_ggdd );_bdagb :=&Bitmaps {};var _aeea *int ;_aggbd *=_ggdd ;_ggag :=_aggbd ;_aeea =&_ggag ;_bgbabb :=_aggbd ;_cgea :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,_aggbd );_cgea =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,_aggbd );_cgea =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,0);*_aeea =_aggbd ;_bgbabb =5*_ggdd +_aggbd ;_cgea =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,_aggbd );_cgea =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,1*_ggdd );_cgea =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bdagb ,_cgea ,_aeea ,_bgbabb ,0);TstWriteSymbols (t ,_bdagb ,_cbef );return _cbef ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _efad (oldByte ,newByte ,op );};func (_gbf *Bitmap )nextOnPixelLow (_dcac ,_gbe ,_cbbac ,_dbdd ,_gcd int )(_bafd _db .Point ,_aeef bool ,_fgga error ){const _gedc ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_bafe int ;_eed byte ;);_adgc :=_gcd *_cbbac ;_facbe :=_adgc +(_dbdd /8);if _eed ,_fgga =_gbf .GetByte (_facbe );_fgga !=nil {return _bafd ,false ,_b .Wrap (_fgga ,_gedc ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _eed !=0{_bba :=_dbdd -(_dbdd %8)+7;for _bafe =_dbdd ;_bafe <=_bba &&_bafe < _dcac ;_bafe ++{if _gbf .GetPixel (_bafe ,_gcd ){_bafd .X =_bafe ;_bafd .Y =_gcd ;return _bafd ,true ,nil ;};};};_dfbcf :=(_dbdd /8)+1;_bafe =8*_dfbcf ;var _eec int ;for _facbe =_adgc +_dfbcf ;_bafe < _dcac ;_facbe ,_bafe =_facbe +1,_bafe +8{if _eed ,_fgga =_gbf .GetByte (_facbe );_fgga !=nil {return _bafd ,false ,_b .Wrap (_fgga ,_gedc ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _eed ==0{continue ;};for _eec =0;_eec < 8&&_bafe < _dcac ;_eec ,_bafe =_eec +1,_bafe +1{if _gbf .GetPixel (_bafe ,_gcd ){_bafd .X =_bafe ;_bafd .Y =_gcd ;return _bafd ,true ,nil ;};};};for _ggeb :=_gcd +1;_ggeb < _gbe ;_ggeb ++{_adgc =_ggeb *_cbbac ;for _facbe ,_bafe =_adgc ,0;_bafe < _dcac ;_facbe ,_bafe =_facbe +1,_bafe +8{if _eed ,_fgga =_gbf .GetByte (_facbe );_fgga !=nil {return _bafd ,false ,_b .Wrap (_fgga ,_gedc ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _eed ==0{continue ;};for _eec =0;_eec < 8&&_bafe < _dcac ;_eec ,_bafe =_eec +1,_bafe +1{if _gbf .GetPixel (_bafe ,_ggeb ){_bafd .X =_bafe ;_bafd .Y =_ggeb ;return _bafd ,true ,nil ;};};};};return _bafd ,false ,nil ;};func _aegf (_gcb ,_bgec ,_gbegg byte )byte {return (_gcb &^(_gbegg ))|(_bgec &_gbegg )};func _bga (_cgfff *Bitmap ,_gadfe ...MorphProcess )(_bbge *Bitmap ,_cgeg error ){const _fggg ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _cgfff ==nil {return nil ,_b .Error (_fggg ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_gadfe )==0{return nil ,_b .Error (_fggg ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _cgeg =_bbbb (_gadfe ...);_cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};var _fead ,_cbce ,_fbf int ;_bbge =_cgfff .Copy ();for _ ,_bgbf :=range _gadfe {switch _bgbf .Operation {case MopDilation :_fead ,_cbce =_bgbf .getWidthHeight ();_bbge ,_cgeg =DilateBrick (nil ,_bbge ,_fead ,_cbce );if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};case MopErosion :_fead ,_cbce =_bgbf .getWidthHeight ();_bbge ,_cgeg =_aggcc (nil ,_bbge ,_fead ,_cbce );if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};case MopOpening :_fead ,_cbce =_bgbf .getWidthHeight ();_bbge ,_cgeg =_egae (nil ,_bbge ,_fead ,_cbce );if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};case MopClosing :_fead ,_cbce =_bgbf .getWidthHeight ();_bbge ,_cgeg =_bfbf (nil ,_bbge ,_fead ,_cbce );if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};case MopRankBinaryReduction :_bbge ,_cgeg =_fe (_bbge ,_bgbf .Arguments ...);if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};case MopReplicativeBinaryExpansion :_bbge ,_cgeg =_bcbc (_bbge ,_bgbf .Arguments [0]);if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};case MopAddBorder :_fbf =_bgbf .Arguments [0];_bbge ,_cgeg =_bbge .AddBorder (_fbf ,0);if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"");};default:return nil ,_b .Error (_fggg ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _fbf > 0{_bbge ,_cgeg =_bbge .RemoveBorder (_fbf );if _cgeg !=nil {return nil ,_b .Wrap (_cgeg ,_fggg ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _bbge ,nil ;};func (_cgbe Points )YSorter ()func (_ddgg ,_ebga int )bool {return func (_ecgd ,_gddb int )bool {return _cgbe [_ecgd ].Y < _cgbe [_gddb ].Y };};func (_gedag *Bitmap )centroid (_abca ,_dafc []int )(Point ,error ){_gdbc :=Point {};_gedag .setPadBits (0);if len (_abca )==0{_abca =_cdeb ();};if len (_dafc )==0{_dafc =_fdefb ();};var _egefb ,_efdd ,_dcgg ,_cfba ,_eeca ,_egag int ;var _ddbc byte ;for _eeca =0;_eeca < _gedag .Height ;_eeca ++{_aefg :=_gedag .RowStride *_eeca ;_cfba =0;for _egag =0;_egag < _gedag .RowStride ;_egag ++{_ddbc =_gedag .Data [_aefg +_egag ];if _ddbc !=0{_cfba +=_dafc [_ddbc ];_egefb +=_abca [_ddbc ]+_egag *8*_dafc [_ddbc ];};};_dcgg +=_cfba ;_efdd +=_cfba *_eeca ;};if _dcgg !=0{_gdbc .X =float32 (_egefb )/float32 (_dcgg );_gdbc .Y =float32 (_efdd )/float32 (_dcgg );};return _gdbc ,nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_ggb MorphProcess )verify (_cba int ,_gdf ,_eddgf *int )error {const _cdf ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _ggb .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ggb .Arguments )!=2{return _b .Error (_cdf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_agde ,_eeab :=_ggb .getWidthHeight ();if _agde <=0||_eeab <=0{return _b .Error (_cdf ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_cbac :=len (_ggb .Arguments );*_gdf +=_cbac ;if _cbac < 1||_cbac > 4{return _b .Error (_cdf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _dfad :=0;_dfad < _cbac ;_dfad ++{if _ggb .Arguments [_dfad ]< 1||_ggb .Arguments [_dfad ]> 4{return _b .Error (_cdf ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_ggb .Arguments )==0{return _b .Error (_cdf ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_effe :=_ggb .Arguments [0];if _effe !=2&&_effe !=4&&_effe !=8{return _b .Error (_cdf ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_gdf -=_gfcb [_effe /4];case MopAddBorder :if len (_ggb .Arguments )==0{return _b .Error (_cdf ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebegd :=_ggb .Arguments [0];if _cba > 0{return _b .Error (_cdf ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _ebegd < 1{return _b .Error (_cdf ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_eddgf =_ebegd ;};return nil ;};func (_dcdbf *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _aefdc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _dcdbf ==nil {return nil ,_b .Error (_aefdc ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_b .Error (_aefdc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_bbcb :=len (_dcdbf .Values );_gdgd :=&Bitmaps {Values :make ([]*Bitmap ,_bbcb ),Boxes :make ([]*_db .Rectangle ,_bbcb )};var (_gdecca ,_gcda *Bitmap ;_cdadf *_db .Rectangle ;_bfef error ;);for _eceee :=0;_eceee < _bbcb ;_eceee ++{if _gdecca ,_bfef =_dcdbf .GetBitmap (_eceee );_bfef !=nil {return nil ,_b .Wrap (_bfef ,_aefdc ,"");};if _cdadf ,_bfef =_dcdbf .GetBox (_eceee );_bfef !=nil {return nil ,_b .Wrap (_bfef ,_aefdc ,"");};if _gcda ,_bfef =s .clipRectangle (_cdadf ,nil );_bfef !=nil {return nil ,_b .Wrap (_bfef ,_aefdc ,"");};if _gcda ,_bfef =_gcda .And (_gdecca );_bfef !=nil {return nil ,_b .Wrap (_bfef ,_aefdc ,"");};_gdgd .Values [_eceee ]=_gcda ;_gdgd .Boxes [_eceee ]=_cdadf ;};return _gdgd ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);type SizeSelection int ;func (_bdb *Bitmap )countPixels ()int {var (_facb int ;_aged uint8 ;_fcc byte ;_bdg int ;);_cbb :=_bdb .RowStride ;_gefe :=uint (_bdb .Width &0x07);if _gefe !=0{_aged =uint8 ((0xff<<(8-_gefe ))&0xff);_cbb --;};for _agec :=0;_agec < _bdb .Height ;_agec ++{for _bdg =0;_bdg < _cbb ;_bdg ++{_fcc =_bdb .Data [_agec *_bdb .RowStride +_bdg ];_facb +=int (_caa [_fcc ]);};if _gefe !=0{_facb +=int (_caa [_bdb .Data [_agec *_bdb .RowStride +_bdg ]&_aged ]);};};return _facb ;};func (_dgc *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dgc .Data )-1||index < 0{return 0,_b .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _dgc .Data [index ],nil ;};func TstWordBitmap (t *_a .T ,scale ...int )*Bitmap {_ceafa :=1;if len (scale )> 0{_ceafa =scale [0];};_gegg :=3;_daga :=9+7+15+2*_gegg ;_eecfg :=5+_gegg +5;_cdfee :=New (_daga *_ceafa ,_eecfg *_ceafa );_ffbe :=&Bitmaps {};var _bdag *int ;_gegg *=_ceafa ;_fcbc :=0;_bdag =&_fcbc ;_fefd :=0;_afcgd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,_gegg );_afcgd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,_gegg );_afcgd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,0);*_bdag =0;_fefd =5*_ceafa +_gegg ;_afcgd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,_gegg );_afcgd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,1*_ceafa );_afcgd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ffbe ,_afcgd ,_bdag ,_fefd ,0);TstWriteSymbols (t ,_ffbe ,_cdfee );return _cdfee ;};type SizeComparison int ;func _dd (_bca *Bitmap ,_fdc *Bitmap ,_bcae int )(_cab error ){const _egc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _bcae {case 2:_cab =_aa (_bca ,_fdc );case 4:_cab =_bgb (_bca ,_fdc );case 8:_cab =_ffg (_bca ,_fdc );default:return _b .Error (_egc ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _cab !=nil {_cab =_b .Wrap (_cab ,_egc ,"");};return _cab ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gbfg float64 ,_begc error ){const _bcdf ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _gbfg ,_b .Error (_bcdf ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _gbfg ,_b .Error (_bcdf ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _gbfg ,_b .Error (_bcdf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_feed ,_bdea :=bm1 .Width ,bm1 .Height ;_bgbg ,_ceg :=bm2 .Width ,bm2 .Height ;if _cbfd (_feed -_bgbg )> maxDiffW {return 0,nil ;};if _cbfd (_bdea -_ceg )> maxDiffH {return 0,nil ;};var _gccgd ,_gcfb int ;if delX >=0{_gccgd =int (delX +0.5);}else {_gccgd =int (delX -0.5);};if delY >=0{_gcfb =int (delY +0.5);}else {_gcfb =int (delY -0.5);};_cfeb :=bm1 .createTemplate ();if _begc =_cfeb .RasterOperation (_gccgd ,_gcfb ,_bgbg ,_ceg ,PixSrc ,bm2 ,0,0);_begc !=nil {return _gbfg ,_b .Wrap (_begc ,_bcdf ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _begc =_cfeb .RasterOperation (0,0,_feed ,_bdea ,PixSrcAndDst ,bm1 ,0,0);_begc !=nil {return _gbfg ,_b .Wrap (_begc ,_bcdf ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_febd :=_cfeb .countPixels ();_gbfg =float64 (_febd )*float64 (_febd )/(float64 (area1 )*float64 (area2 ));return _gbfg ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func _bgg (_dfdd ,_cgfa *Bitmap ,_gbdd ,_deg ,_afgf ,_dde ,_bfb ,_afd ,_bdfg ,_abe int ,_dbdf CombinationOperator ,_dbgb int )error {var _debf int ;_feef :=func (){_debf ++;_afgf +=_cgfa .RowStride ;_dde +=_dfdd .RowStride ;_bfb +=_dfdd .RowStride };for _debf =_gbdd ;_debf < _deg ;_feef (){var _bfbc uint16 ;_accc :=_afgf ;for _dddb :=_dde ;_dddb <=_bfb ;_dddb ++{_adcf ,_dgge :=_cgfa .GetByte (_accc );if _dgge !=nil {return _dgge ;};_dgcf ,_dgge :=_dfdd .GetByte (_dddb );if _dgge !=nil {return _dgge ;};_bfbc =(_bfbc |(uint16 (_dgcf )&0xff))<<uint (_abe );_dgcf =byte (_bfbc >>8);if _dgge =_cgfa .SetByte (_accc ,_efad (_adcf ,_dgcf ,_dbdf ));_dgge !=nil {return _dgge ;};_accc ++;_bfbc <<=uint (_bdfg );if _dddb ==_bfb {_dgcf =byte (_bfbc >>(8-uint8 (_abe )));if _dbgb !=0{_dgcf =_ffc (uint (8+_afd ),_dgcf );};_adcf ,_dgge =_cgfa .GetByte (_accc );if _dgge !=nil {return _dgge ;};if _dgge =_cgfa .SetByte (_accc ,_efad (_adcf ,_dgcf ,_dbdf ));_dgge !=nil {return _dgge ;};};};};return nil ;};func _eefa (_gfeg ,_abc *Bitmap ,_ffea ,_cgg ,_bbaa ,_gacf ,_cgfg ,_abde ,_dcf ,_ggaf int ,_bccfa CombinationOperator )error {var _ade int ;_ffdf :=func (){_ade ++;_bbaa +=_abc .RowStride ;_gacf +=_gfeg .RowStride ;_cgfg +=_gfeg .RowStride };for _ade =_ffea ;_ade < _cgg ;_ffdf (){var _gcea uint16 ;_fdce :=_bbaa ;for _add :=_gacf ;_add <=_cgfg ;_add ++{_dgaa ,_bffe :=_abc .GetByte (_fdce );if _bffe !=nil {return _bffe ;};_bbgdc ,_bffe :=_gfeg .GetByte (_add );if _bffe !=nil {return _bffe ;};_gcea =(_gcea |uint16 (_bbgdc ))<<uint (_ggaf );_bbgdc =byte (_gcea >>8);if _add ==_cgfg {_bbgdc =_ffc (uint (_abde ),_bbgdc );};if _bffe =_abc .SetByte (_fdce ,_efad (_dgaa ,_bbgdc ,_bccfa ));_bffe !=nil {return _bffe ;};_fdce ++;_gcea <<=uint (_dcf );};};return nil ;};func _gcgdg (_afgg ,_ecagc *Bitmap ,_caefa *Selection )(*Bitmap ,error ){const _eecf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _bdac ,_ddeg int ;if _ecagc ==nil {return nil ,_b .Error (_eecf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _caefa ==nil {return nil ,_b .Error (_eecf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_bdac =_caefa .Width ;_ddeg =_caefa .Height ;if _bdac ==0||_ddeg ==0{return nil ,_b .Error (_eecf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _afgg ==nil {return _ecagc .createTemplate (),nil ;};if _bgbd :=_afgg .resizeImageData (_ecagc );_bgbd !=nil {return nil ,_bgbd ;};return _afgg ,nil ;};func (_dddg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _bcgeg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _dddg ==nil {return nil ,_b .Error (_bcgeg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_dddg .Values )-1{return nil ,_b .Errorf (_bcgeg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dddg .Values [i ],nil ;};type Color int ;func _aggcc (_efeb ,_aabf *Bitmap ,_ebbad ,_dacg int )(*Bitmap ,error ){const _aeaf ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _aabf ==nil {return nil ,_b .Error (_aeaf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ebbad < 1||_dacg < 1{return nil ,_b .Error (_aeaf ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _ebbad ==1&&_dacg ==1{_faabe ,_eddff :=_ced (_efeb ,_aabf );if _eddff !=nil {return nil ,_b .Wrap (_eddff ,_aeaf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _faabe ,nil ;};if _ebbad ==1||_dacg ==1{_dced :=SelCreateBrick (_dacg ,_ebbad ,_dacg /2,_ebbad /2,SelHit );_gdea ,_adbe :=_cgddg (_efeb ,_aabf ,_dced );if _adbe !=nil {return nil ,_b .Wrap (_adbe ,_aeaf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gdea ,nil ;};_ecf :=SelCreateBrick (1,_ebbad ,0,_ebbad /2,SelHit );_bddb :=SelCreateBrick (_dacg ,1,_dacg /2,0,SelHit );_efcf ,_aefd :=_cgddg (nil ,_aabf ,_ecf );if _aefd !=nil {return nil ,_b .Wrap (_aefd ,_aeaf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_efeb ,_aefd =_cgddg (_efeb ,_efcf ,_bddb );if _aefd !=nil {return nil ,_b .Wrap (_aefd ,_aeaf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _efeb ,nil ;};func (_agge *Bitmap )Equivalent (s *Bitmap )bool {return _agge .equivalent (s )};func _efgf (_gfb ,_aeg *Bitmap ,_bde int ,_fgb []byte ,_ddg int )(_efgg error ){const _afg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_fcf ,_bbff ,_ggfb ,_fafb ,_efe ,_dgd ,_efc ,_ega int ;_fed ,_gdb ,_fdfa ,_eaa uint32 ;_cb ,_gaa byte ;_aec uint16 ;);_bdf :=make ([]byte ,4);_ecb :=make ([]byte ,4);for _ggfb =0;_ggfb < _gfb .Height -1;_ggfb ,_fafb =_ggfb +2,_fafb +1{_fcf =_ggfb *_gfb .RowStride ;_bbff =_fafb *_aeg .RowStride ;for _efe ,_dgd =0,0;_efe < _ddg ;_efe ,_dgd =_efe +4,_dgd +1{for _efc =0;_efc < 4;_efc ++{_ega =_fcf +_efe +_efc ;if _ega <=len (_gfb .Data )-1&&_ega < _fcf +_gfb .RowStride {_bdf [_efc ]=_gfb .Data [_ega ];}else {_bdf [_efc ]=0x00;};_ega =_fcf +_gfb .RowStride +_efe +_efc ;if _ega <=len (_gfb .Data )-1&&_ega < _fcf +(2*_gfb .RowStride ){_ecb [_efc ]=_gfb .Data [_ega ];}else {_ecb [_efc ]=0x00;};};_fed =_f .BigEndian .Uint32 (_bdf );_gdb =_f .BigEndian .Uint32 (_ecb );_fdfa =_fed &_gdb ;_fdfa |=_fdfa <<1;_eaa =_fed |_gdb ;_eaa &=_eaa <<1;_gdb =_fdfa |_eaa ;_gdb &=0xaaaaaaaa;_fed =_gdb |(_gdb <<7);_cb =byte (_fed >>24);_gaa =byte ((_fed >>8)&0xff);_ega =_bbff +_dgd ;if _ega +1==len (_aeg .Data )-1||_ega +1>=_bbff +_aeg .RowStride {if _efgg =_aeg .SetByte (_ega ,_fgb [_cb ]);_efgg !=nil {return _b .Wrapf (_efgg ,_afg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ega );};}else {_aec =(uint16 (_fgb [_cb ])<<8)|uint16 (_fgb [_gaa ]);if _efgg =_aeg .setTwoBytes (_ega ,_aec );_efgg !=nil {return _b .Wrapf (_efgg ,_afg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ega );};_dgd ++;};};};return nil ;};func (_fdddd *byHeight )Len ()int {return len (_fdddd .Values )};func (_cdfbb *Points )AddPoint (x ,y float32 ){*_cdfbb =append (*_cdfbb ,Point {x ,y })};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _bga (src ,sequence ...);};func (_ebfe *ClassedPoints )YAtIndex (i int )float32 {return (*_ebfe .Points )[_ebfe .IntSlice [i ]].Y };func Centroids (bms []*Bitmap )(*Points ,error ){_dfbb :=make ([]Point ,len (bms ));_gdag :=_cdeb ();_febe :=_fdefb ();var _cbcf error ;for _eceg ,_cdgb :=range bms {_dfbb [_eceg ],_cbcf =_cdgb .centroid (_gdag ,_febe );if _cbcf !=nil {return nil ,_cbcf ;};};_fdge :=Points (_dfbb );return &_fdge ,nil ;};func (_ceaf *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _dfag ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_ceaf .IntSlice .Size (){return 0,_b .Errorf (_dfag ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_ceaf .YAtIndex (i )),nil ;};func (_cddga *Bitmap )connComponentsBitmapsBB (_ddca *Bitmaps ,_acccd int )(_geec *Boxes ,_dfge error ){const _fcag ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _acccd !=4&&_acccd !=8{return nil ,_b .Error (_fcag ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ddca ==nil {return nil ,_b .Error (_fcag ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_ddca .Values )> 0{return nil ,_b .Error (_fcag ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _cddga .Zero (){return &Boxes {},nil ;};var (_affc ,_cdgag ,_befb ,_bgfb *Bitmap ;);_cddga .setPadBits (0);if _affc ,_dfge =_ced (nil ,_cddga );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"\u0062\u006d\u0031");};if _cdgag ,_dfge =_ced (nil ,_cddga );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"\u0062\u006d\u0032");};_gbfa :=&_ea .Stack {};_gbfa .Aux =&_ea .Stack {};_geec =&Boxes {};var (_dgde ,_gadg int ;_bgef _db .Point ;_ffdd bool ;_cggc *_db .Rectangle ;);for {if _bgef ,_ffdd ,_dfge =_affc .nextOnPixel (_dgde ,_gadg );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"");};if !_ffdd {break ;};if _cggc ,_dfge =_ebcd (_affc ,_gbfa ,_bgef .X ,_bgef .Y ,_acccd );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"");};if _dfge =_geec .Add (_cggc );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"");};if _befb ,_dfge =_affc .clipRectangle (_cggc ,nil );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"\u0062\u006d\u0033");};if _bgfb ,_dfge =_cdgag .clipRectangle (_cggc ,nil );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"\u0062\u006d\u0034");};if _ ,_dfge =_gdgb (_befb ,_befb ,_bgfb );_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _dfge =_cdgag .RasterOperation (_cggc .Min .X ,_cggc .Min .Y ,_cggc .Dx (),_cggc .Dy (),PixSrcXorDst ,_befb ,0,0);_dfge !=nil {return nil ,_b .Wrap (_dfge ,_fcag ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_ddca .AddBitmap (_befb );_dgde =_bgef .X ;_gadg =_bgef .Y ;};_ddca .Boxes =*_geec ;return _geec ,nil ;};func _bfbf (_bdge ,_ebgf *Bitmap ,_ecbd ,_aad int )(*Bitmap ,error ){const _ddec ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _ebgf ==nil {return nil ,_b .Error (_ddec ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ecbd < 1||_aad < 1{return nil ,_b .Error (_ddec ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _ecbd ==1&&_aad ==1{return _ced (_bdge ,_ebgf );};if MorphBC ==SymmetricMorphBC {_eead ,_dbfd :=_dcdd (_bdge ,_ebgf ,_ecbd ,_aad );if _dbfd !=nil {return nil ,_b .Wrap (_dbfd ,_ddec ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _eead ,nil ;};_cggd :=_bcfg (_ecbd /2,_aad /2);_bgefg :=8*((_cggd +7)/8);_bfad ,_faed :=_ebgf .AddBorder (_bgefg ,0);if _faed !=nil {return nil ,_b .Wrapf (_faed ,_ddec ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_bgefg );};var _bdgb ,_cdfe *Bitmap ;if _ecbd ==1||_aad ==1{_baac :=SelCreateBrick (_aad ,_ecbd ,_aad /2,_ecbd /2,SelHit );_bdgb ,_faed =_bbgdd (nil ,_bfad ,_baac );if _faed !=nil {return nil ,_b .Wrap (_faed ,_ddec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_dgab :=SelCreateBrick (1,_ecbd ,0,_ecbd /2,SelHit );_fcdd ,_feea :=_acffd (nil ,_bfad ,_dgab );if _feea !=nil {return nil ,_b .Wrap (_feea ,_ddec ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_abea :=SelCreateBrick (_aad ,1,_aad /2,0,SelHit );_bdgb ,_feea =_acffd (nil ,_fcdd ,_abea );if _feea !=nil {return nil ,_b .Wrap (_feea ,_ddec ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_feea =_cgddg (_fcdd ,_bdgb ,_dgab );_feea !=nil {return nil ,_b .Wrap (_feea ,_ddec ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_feea =_cgddg (_bdgb ,_fcdd ,_abea );_feea !=nil {return nil ,_b .Wrap (_feea ,_ddec ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _cdfe ,_faed =_bdgb .RemoveBorder (_bgefg );_faed !=nil {return nil ,_b .Wrap (_faed ,_ddec ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _bdge ==nil {return _cdfe ,nil ;};if _ ,_faed =_ced (_bdge ,_cdfe );_faed !=nil {return nil ,_faed ;};return _bdge ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _abgb ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_b .Error (_abgb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_b .Error (_abgb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_b .Error (_abgb ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_b .Error (_abgb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_b .Error (_abgb ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_dfdb ,_afcd :=bm1 .Width ,bm1 .Height ;_aacc ,_ebaf :=bm2 .Width ,bm2 .Height ;if _ea .Abs (_dfdb -_aacc )> maxDiffW {return false ,nil ;};if _ea .Abs (_afcd -_ebaf )> maxDiffH {return false ,nil ;};_dcbe :=int (delX +_ea .Sign (delX )*0.5);_fdcg :=int (delY +_ea .Sign (delY )*0.5);_bfaa :=int (_ab .Ceil (_ab .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_geda :=bm2 .RowStride ;_aeae :=_bcfg (_fdcg ,0);_ebgg :=_ebcb (_ebaf +_fdcg ,_afcd );_gcfc :=bm1 .RowStride *_aeae ;_ccaf :=bm2 .RowStride *(_aeae -_fdcg );var _bcb int ;if _ebgg <=_afcd {_bcb =downcount [_ebgg -1];};_ccbe :=_bcfg (_dcbe ,0);_fdae :=_ebcb (_aacc +_dcbe ,_dfdb );var _abfa ,_gefc int ;if _dcbe >=8{_abfa =_dcbe >>3;_gcfc +=_abfa ;_ccbe -=_abfa <<3;_fdae -=_abfa <<3;_dcbe &=7;}else if _dcbe <=-8{_gefc =-((_dcbe +7)>>3);_ccaf +=_gefc ;_geda -=_gefc ;_dcbe +=_gefc <<3;};var (_dcaf ,_aege ,_fbca int ;_fgbc ,_agabe ,_egfeg byte ;);if _ccbe >=_fdae ||_aeae >=_ebgg {return false ,nil ;};_bfgb :=(_fdae +7)>>3;switch {case _dcbe ==0:for _aege =_aeae ;_aege < _ebgg ;_aege ,_gcfc ,_ccaf =_aege +1,_gcfc +bm1 .RowStride ,_ccaf +bm2 .RowStride {for _fbca =0;_fbca < _bfgb ;_fbca ++{_fgbc =bm1 .Data [_gcfc +_fbca ]&bm2 .Data [_ccaf +_fbca ];_dcaf +=tab [_fgbc ];};if _dcaf >=_bfaa {return true ,nil ;};if _acaa :=_dcaf +downcount [_aege ]-_bcb ;_acaa < _bfaa {return false ,nil ;};};case _dcbe > 0&&_geda < _bfgb :for _aege =_aeae ;_aege < _ebgg ;_aege ,_gcfc ,_ccaf =_aege +1,_gcfc +bm1 .RowStride ,_ccaf +bm2 .RowStride {_agabe =bm1 .Data [_gcfc ];_egfeg =bm2 .Data [_ccaf ]>>uint (_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];for _fbca =1;_fbca < _geda ;_fbca ++{_agabe =bm1 .Data [_gcfc +_fbca ];_egfeg =bm2 .Data [_ccaf +_fbca ]>>uint (_dcbe )|bm2 .Data [_ccaf +_fbca -1]<<uint (8-_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];};_agabe =bm1 .Data [_gcfc +_fbca ];_egfeg =bm2 .Data [_ccaf +_fbca -1]<<uint (8-_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];if _dcaf >=_bfaa {return true ,nil ;}else if _dcaf +downcount [_aege ]-_bcb < _bfaa {return false ,nil ;};};case _dcbe > 0&&_geda >=_bfgb :for _aege =_aeae ;_aege < _ebgg ;_aege ,_gcfc ,_ccaf =_aege +1,_gcfc +bm1 .RowStride ,_ccaf +bm2 .RowStride {_agabe =bm1 .Data [_gcfc ];_egfeg =bm2 .Data [_ccaf ]>>uint (_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];for _fbca =1;_fbca < _bfgb ;_fbca ++{_agabe =bm1 .Data [_gcfc +_fbca ];_egfeg =bm2 .Data [_ccaf +_fbca ]>>uint (_dcbe );_egfeg |=bm2 .Data [_ccaf +_fbca -1]<<uint (8-_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];};if _dcaf >=_bfaa {return true ,nil ;}else if _dcaf +downcount [_aege ]-_bcb < _bfaa {return false ,nil ;};};case _bfgb < _geda :for _aege =_aeae ;_aege < _ebgg ;_aege ,_gcfc ,_ccaf =_aege +1,_gcfc +bm1 .RowStride ,_ccaf +bm2 .RowStride {for _fbca =0;_fbca < _bfgb ;_fbca ++{_agabe =bm1 .Data [_gcfc +_fbca ];_egfeg =bm2 .Data [_ccaf +_fbca ]<<uint (-_dcbe );_egfeg |=bm2 .Data [_ccaf +_fbca +1]>>uint (8+_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];};if _dcaf >=_bfaa {return true ,nil ;}else if _cac :=_dcaf +downcount [_aege ]-_bcb ;_cac < _bfaa {return false ,nil ;};};case _geda >=_bfgb :for _aege =_aeae ;_aege < _ebgg ;_aege ,_gcfc ,_ccaf =_aege +1,_gcfc +bm1 .RowStride ,_ccaf +bm2 .RowStride {for _fbca =0;_fbca < _bfgb ;_fbca ++{_agabe =bm1 .Data [_gcfc +_fbca ];_egfeg =bm2 .Data [_ccaf +_fbca ]<<uint (-_dcbe );_egfeg |=bm2 .Data [_ccaf +_fbca +1]>>uint (8+_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];};_agabe =bm1 .Data [_gcfc +_fbca ];_egfeg =bm2 .Data [_ccaf +_fbca ]<<uint (-_dcbe );_fgbc =_agabe &_egfeg ;_dcaf +=tab [_fgbc ];if _dcaf >=_bfaa {return true ,nil ;}else if _dcaf +downcount [_aege ]-_bcb < _bfaa {return false ,nil ;};};};_aded :=float32 (_dcaf )*float32 (_dcaf )/(float32 (area1 )*float32 (area2 ));if _aded >=scoreThreshold {_ef .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dcaf ,_bfaa ,_aded ,scoreThreshold );};return false ,nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _bddd (_eafg ,_efgaf *Bitmap ,_gffa *Selection )(*Bitmap ,error ){const _cfgeg ="\u006f\u0070\u0065\u006e";var _fcdf error ;_eafg ,_fcdf =_gcgdg (_eafg ,_efgaf ,_gffa );if _fcdf !=nil {return nil ,_b .Wrap (_fcdf ,_cfgeg ,"");};_bcfe ,_fcdf :=_cgddg (nil ,_efgaf ,_gffa );if _fcdf !=nil {return nil ,_b .Wrap (_fcdf ,_cfgeg ,"");};_ ,_fcdf =_acffd (_eafg ,_bcfe ,_gffa );if _fcdf !=nil {return nil ,_b .Wrap (_fcdf ,_cfgeg ,"");};return _eafg ,nil ;};func _bgbc (_aggc ,_aeb *Bitmap ,_bcf int ,_bbd []byte ,_cgc int )(_ccgd error ){const _afae ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_defb ,_dffc ,_ecba ,_gad ,_efgc ,_fga ,_aga ,_bcaa int ;_cag ,_efb ,_gdbg ,_gabf uint32 ;_gda ,_fcg byte ;_gff uint16 ;);_gga :=make ([]byte ,4);_ccb :=make ([]byte ,4);for _ecba =0;_ecba < _aggc .Height -1;_ecba ,_gad =_ecba +2,_gad +1{_defb =_ecba *_aggc .RowStride ;_dffc =_gad *_aeb .RowStride ;for _efgc ,_fga =0,0;_efgc < _cgc ;_efgc ,_fga =_efgc +4,_fga +1{for _aga =0;_aga < 4;_aga ++{_bcaa =_defb +_efgc +_aga ;if _bcaa <=len (_aggc .Data )-1&&_bcaa < _defb +_aggc .RowStride {_gga [_aga ]=_aggc .Data [_bcaa ];}else {_gga [_aga ]=0x00;};_bcaa =_defb +_aggc .RowStride +_efgc +_aga ;if _bcaa <=len (_aggc .Data )-1&&_bcaa < _defb +(2*_aggc .RowStride ){_ccb [_aga ]=_aggc .Data [_bcaa ];}else {_ccb [_aga ]=0x00;};};_cag =_f .BigEndian .Uint32 (_gga );_efb =_f .BigEndian .Uint32 (_ccb );_gdbg =_cag &_efb ;_gdbg |=_gdbg <<1;_gabf =_cag |_efb ;_gabf &=_gabf <<1;_efb =_gdbg &_gabf ;_efb &=0xaaaaaaaa;_cag =_efb |(_efb <<7);_gda =byte (_cag >>24);_fcg =byte ((_cag >>8)&0xff);_bcaa =_dffc +_fga ;if _bcaa +1==len (_aeb .Data )-1||_bcaa +1>=_dffc +_aeb .RowStride {if _ccgd =_aeb .SetByte (_bcaa ,_bbd [_gda ]);_ccgd !=nil {return _b .Wrapf (_ccgd ,_afae ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bcaa );};}else {_gff =(uint16 (_bbd [_gda ])<<8)|uint16 (_bbd [_fcg ]);if _ccgd =_aeb .setTwoBytes (_bcaa ,_gff );_ccgd !=nil {return _b .Wrapf (_ccgd ,_afae ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bcaa );};_fga ++;};};};return nil ;};type ClassedPoints struct{*Points ;_ea .IntSlice ;_ggaeg func (_ggbe ,_ccbd int )bool ;};func ClipBoxToRectangle (box *_db .Rectangle ,wi ,hi int )(_gfd *_db .Rectangle ,_eagg error ){const _aabe ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_b .Error (_aabe ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_b .Error (_aabe ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_adec :=*box ;_gfd =&_adec ;if _gfd .Min .X < 0{_gfd .Max .X +=_gfd .Min .X ;_gfd .Min .X =0;};if _gfd .Min .Y < 0{_gfd .Max .Y +=_gfd .Min .Y ;_gfd .Min .Y =0;};if _gfd .Max .X > wi {_gfd .Max .X =wi ;};if _gfd .Max .Y > hi {_gfd .Max .Y =hi ;};return _gfd ,nil ;};func (_fbgde *Selection )findMaxTranslations ()(_eada ,_ffgf ,_agdd ,_fffa int ){for _fefbef :=0;_fefbef < _fbgde .Height ;_fefbef ++{for _gdeg :=0;_gdeg < _fbgde .Width ;_gdeg ++{if _fbgde .Data [_fefbef ][_gdeg ]==SelHit {_eada =_bcfg (_eada ,_fbgde .Cx -_gdeg );_ffgf =_bcfg (_ffgf ,_fbgde .Cy -_fefbef );_agdd =_bcfg (_agdd ,_gdeg -_fbgde .Cx );_fffa =_bcfg (_fffa ,_fefbef -_fbgde .Cy );};};};return _eada ,_ffgf ,_agdd ,_fffa ;};func (_eaee *ClassedPoints )Len ()int {return _eaee .IntSlice .Size ()};func (_cdec *Bitmap )equivalent (_eef *Bitmap )bool {if _cdec ==_eef {return true ;};if !_cdec .SizesEqual (_eef ){return false ;};_aaa :=_bfeg (_cdec ,_eef ,CmbOpXor );_ceb :=_cdec .countPixels ();_gccc :=int (0.25*float32 (_ceb ));if _aaa .thresholdPixelSum (_gccc ){return false ;};var (_cdce [9][9]int ;_bcdg [18][9]int ;_cbba [9][18]int ;_bebb int ;_afcg int ;);_cgeb :=9;_bge :=_cdec .Height /_cgeb ;_egeb :=_cdec .Width /_cgeb ;_fbb ,_egg :=_bge /2,_egeb /2;if _bge < _egeb {_fbb =_egeb /2;_egg =_bge /2;};_afaa :=float64 (_fbb )*float64 (_egg )*_ab .Pi ;_bgfee :=int (float64 (_bge *_egeb /2)*0.9);_bacc :=int (float64 (_egeb *_bge /2)*0.9);for _bfg :=0;_bfg < _cgeb ;_bfg ++{_fefb :=_egeb *_bfg +_bebb ;var _dfce int ;if _bfg ==_cgeb -1{_bebb =0;_dfce =_cdec .Width ;}else {_dfce =_fefb +_egeb ;if ((_cdec .Width -_bebb )%_cgeb )> 0{_bebb ++;_dfce ++;};};for _fbbb :=0;_fbbb < _cgeb ;_fbbb ++{_gcgb :=_bge *_fbbb +_afcg ;var _dbge int ;if _fbbb ==_cgeb -1{_afcg =0;_dbge =_cdec .Height ;}else {_dbge =_gcgb +_bge ;if (_cdec .Height -_afcg )%_cgeb > 0{_afcg ++;_dbge ++;};};var _deb ,_cdedb ,_gfga ,_fdea int ;_gea :=(_fefb +_dfce )/2;_dbd :=(_gcgb +_dbge )/2;for _fbgd :=_fefb ;_fbgd < _dfce ;_fbgd ++{for _bgce :=_gcgb ;_bgce < _dbge ;_bgce ++{if _aaa .GetPixel (_fbgd ,_bgce ){if _fbgd < _gea {_deb ++;}else {_cdedb ++;};if _bgce < _dbd {_fdea ++;}else {_gfga ++;};};};};_cdce [_bfg ][_fbbb ]=_deb +_cdedb ;_bcdg [_bfg *2][_fbbb ]=_deb ;_bcdg [_bfg *2+1][_fbbb ]=_cdedb ;_cbba [_bfg ][_fbbb *2]=_fdea ;_cbba [_bfg ][_fbbb *2+1]=_gfga ;};};for _afe :=0;_afe < _cgeb *2-1;_afe ++{for _aea :=0;_aea < (_cgeb -1);_aea ++{var _dadd int ;for _cbc :=0;_cbc < 2;_cbc ++{for _fefa :=0;_fefa < 2;_fefa ++{_dadd +=_bcdg [_afe +_cbc ][_aea +_fefa ];};};if _dadd > _bacc {return false ;};};};for _dge :=0;_dge < (_cgeb -1);_dge ++{for _cdga :=0;_cdga < ((_cgeb *2)-1);_cdga ++{var _dcg int ;for _cec :=0;_cec < 2;_cec ++{for _dacf :=0;_dacf < 2;_dacf ++{_dcg +=_cbba [_dge +_cec ][_cdga +_dacf ];};};if _dcg > _bgfee {return false ;};};};for _bab :=0;_bab < (_cgeb -2);_bab ++{for _afbe :=0;_afbe < (_cgeb -2);_afbe ++{var _efdb ,_bfga int ;for _agd :=0;_agd < 3;_agd ++{for _ggg :=0;_ggg < 3;_ggg ++{if _agd ==_ggg {_efdb +=_cdce [_bab +_agd ][_afbe +_ggg ];};if (2-_agd )==_ggg {_bfga +=_cdce [_bab +_agd ][_afbe +_ggg ];};};};if _efdb > _bacc ||_bfga > _bacc {return false ;};};};for _egfe :=0;_egfe < (_cgeb -1);_egfe ++{for _edggf :=0;_edggf < (_cgeb -1);_edggf ++{var _gfbg int ;for _dcba :=0;_dcba < 2;_dcba ++{for _cagb :=0;_cagb < 2;_cagb ++{_gfbg +=_cdce [_egfe +_dcba ][_edggf +_cagb ];};};if float64 (_gfbg )> _afaa {return false ;};};};return true ;};func TstAddSymbol (t *_a .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_efbf :=_db .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_efbf );*x +=sym .Width +space ;};func (_fab *Bitmap )GetPixel (x ,y int )bool {_caae :=_fab .GetByteIndex (x ,y );_ebef :=_fab .GetBitOffset (x );_cfdg :=uint (7-_ebef );if _caae > len (_fab .Data )-1{_ef .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_fab );return false ;};if (_fab .Data [_caae ]>>_cfdg )&0x01>=1{return true ;};return false ;};func (_ggbb Points )Get (i int )(Point ,error ){if i > len (_ggbb )-1{return Point {},_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ggbb [i ],nil ;};func (_degda Points )GetGeometry (i int )(_gdeec ,_agbb float32 ,_eceb error ){if i > len (_degda )-1{return 0,0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_fadg :=_degda [i ];return _fadg .X ,_fadg .Y ,nil ;};const (_gfege shift =iota ;_bfacc ;);func (_eebf Points )GetIntX (i int )(int ,error ){if i >=len (_eebf ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_eebf [i ].X ),nil ;};func TstImageBitmapData ()[]byte {return _eege .Data };func (_ceag *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cfef (_ceag ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_afb *Bitmap )addPadBits ()(_fbg error ){const _adga ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_ffga :=_afb .Width %8;if _ffga ==0{return nil ;};_fce :=_afb .Width /8;_dadf :=_c .NewReader (_afb .Data );_bccd :=make ([]byte ,_afb .Height *_afb .RowStride );_faba :=_c .NewWriterMSB (_bccd );_fcff :=make ([]byte ,_fce );var (_edgb int ;_fca uint64 ;);for _edgb =0;_edgb < _afb .Height ;_edgb ++{if _ ,_fbg =_dadf .Read (_fcff );_fbg !=nil {return _b .Wrap (_fbg ,_adga ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_fbg =_faba .Write (_fcff );_fbg !=nil {return _b .Wrap (_fbg ,_adga ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _fca ,_fbg =_dadf .ReadBits (byte (_ffga ));_fbg !=nil {return _b .Wrap (_fbg ,_adga ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _fbg =_faba .WriteByte (byte (_fca )<<uint (8-_ffga ));_fbg !=nil {return _b .Wrap (_fbg ,_adga ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_afb .Data =_faba .Data ();return nil ;};func _bbgdd (_gfdd ,_ecg *Bitmap ,_cgff *Selection )(*Bitmap ,error ){const _ffdb ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _ffeaf error ;if _gfdd ,_ffeaf =_gcgdg (_gfdd ,_ecg ,_cgff );_ffeaf !=nil {return nil ,_ffeaf ;};_dfcb ,_ffeaf :=_acffd (nil ,_ecg ,_cgff );if _ffeaf !=nil {return nil ,_b .Wrap (_ffeaf ,_ffdb ,"");};if _ ,_ffeaf =_cgddg (_gfdd ,_dfcb ,_cgff );_ffeaf !=nil {return nil ,_b .Wrap (_ffeaf ,_ffdb ,"");};return _gfdd ,nil ;};func (_effeb *byWidth )Len ()int {return len (_effeb .Values )};func (_bbae *Bitmaps )SortByWidth (){_dgbf :=(*byWidth )(_bbae );_be .Sort (_dgbf )};func (_cece *Bitmap )nextOnPixel (_cdad ,_caga int )(_dca _db .Point ,_dagd bool ,_caba error ){const _afab ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_dca ,_dagd ,_caba =_cece .nextOnPixelLow (_cece .Width ,_cece .Height ,_cece .RowStride ,_cdad ,_caga );if _caba !=nil {return _dca ,false ,_b .Wrap (_caba ,_afab ,"");};return _dca ,_dagd ,nil ;};type LocationFilter int ;func (_ffdg *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ffdg .Width ,Height :_ffdg .Height ,RowStride :_ffdg .RowStride ,Color :_ffdg .Color ,Text :_ffdg .Text ,BitmapNumber :_ffdg .BitmapNumber ,Special :_ffdg .Special ,Data :make ([]byte ,len (_ffdg .Data ))};};func TstFrameBitmap ()*Bitmap {return _aegc .Copy ()};func _ae ()(_adf [256]uint64 ){for _bbf :=0;_bbf < 256;_bbf ++{if _bbf &0x01!=0{_adf [_bbf ]|=0xff;};if _bbf &0x02!=0{_adf [_bbf ]|=0xff00;};if _bbf &0x04!=0{_adf [_bbf ]|=0xff0000;};if _bbf &0x08!=0{_adf [_bbf ]|=0xff000000;};if _bbf &0x10!=0{_adf [_bbf ]|=0xff00000000;};if _bbf &0x20!=0{_adf [_bbf ]|=0xff0000000000;};if _bbf &0x40!=0{_adf [_bbf ]|=0xff000000000000;};if _bbf &0x80!=0{_adf [_bbf ]|=0xff00000000000000;};};return _adf ;};func _dece (_fbda *Bitmap ,_dfddg *Bitmap ,_abfea int )(_bfbcb error ){const _fffd ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_fege :=_ebcb (_fbda .Height ,_dfddg .Height );_bcdff :=_ebcb (_fbda .RowStride ,_dfddg .RowStride );switch _abfea {case 4:_bfbcb =_fbcd (_fbda ,_dfddg ,_fege ,_bcdff );case 8:_bfbcb =_bcdfc (_fbda ,_dfddg ,_fege ,_bcdff );default:return _b .Errorf (_fffd ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_abfea );};if _bfbcb !=nil {return _b .Wrap (_bfbcb ,_fffd ,"");};return nil ;};func (_efgd *Bitmap )CreateTemplate ()*Bitmap {return _efgd .createTemplate ()};func _bfee (_dfced ,_ece ,_adcg *Bitmap )(*Bitmap ,error ){const _gfgd ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _ece ==nil {return nil ,_b .Error (_gfgd ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _adcg ==nil {return nil ,_b .Error (_gfgd ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ead error ;switch {case _dfced ==_ece :if _ead =_dfced .RasterOperation (0,0,_ece .Width ,_ece .Height ,PixNotSrcAndDst ,_adcg ,0,0);_ead !=nil {return nil ,_b .Wrap (_ead ,_gfgd ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _dfced ==_adcg :if _ead =_dfced .RasterOperation (0,0,_ece .Width ,_ece .Height ,PixNotSrcAndDst ,_ece ,0,0);_ead !=nil {return nil ,_b .Wrap (_ead ,_gfgd ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_dfced ,_ead =_ced (_dfced ,_ece );if _ead !=nil {return nil ,_b .Wrap (_ead ,_gfgd ,"");};if _ead =_dfced .RasterOperation (0,0,_ece .Width ,_ece .Height ,PixNotSrcAndDst ,_adcg ,0,0);_ead !=nil {return nil ,_b .Wrap (_ead ,_gfgd ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _dfced ,nil ;};func _abbg ()(_cdc []byte ){_cdc =make ([]byte ,256);for _fef :=0;_fef < 256;_fef ++{_baa :=byte (_fef );_cdc [_baa ]=(_baa &0x01)|((_baa &0x04)>>1)|((_baa &0x10)>>2)|((_baa &0x40)>>3)|((_baa &0x02)<<3)|((_baa &0x08)<<2)|((_baa &0x20)<<1)|(_baa &0x80);};return _cdc ;};func (_dcgc *Points )Add (pt *Points )error {const _dccd ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _dcgc ==nil {return _b .Error (_dccd ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _b .Error (_dccd ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_dcgc =append (*_dcgc ,*pt ...);return nil ;};func (_ebfgc CombinationOperator )String ()string {var _agebf string ;switch _ebfgc {case CmbOpOr :_agebf ="\u004f\u0052";case CmbOpAnd :_agebf ="\u0041\u004e\u0044";case CmbOpXor :_agebf ="\u0058\u004f\u0052";case CmbOpXNor :_agebf ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_agebf ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_agebf ="\u004e\u004f\u0054";};return _agebf ;};func TstImageBitmap ()*Bitmap {return _eege .Copy ()};func (_ggaa *ClassedPoints )xSortFunction ()func (_adgaf int ,_ace int )bool {return func (_adef ,_ccfa int )bool {return _ggaa .XAtIndex (_adef )< _ggaa .XAtIndex (_ccfa )};};func _fdfed (_fcfae *Bitmap ,_egafc ,_eede int ,_faaf ,_edab int ,_cdbf RasterOperator ){var (_ccgff bool ;_bgee bool ;_geaf int ;_fcdg int ;_ebafa int ;_ccgdb int ;_afcdf bool ;_bggc byte ;);_acbf :=8-(_egafc &7);_abdf :=_ecgf [_acbf ];_fgcc :=_fcfae .RowStride *_eede +(_egafc >>3);if _faaf < _acbf {_ccgff =true ;_abdf &=_egbff [8-_acbf +_faaf ];};if !_ccgff {_geaf =(_faaf -_acbf )>>3;if _geaf !=0{_bgee =true ;_fcdg =_fgcc +1;};};_ebafa =(_egafc +_faaf )&7;if !(_ccgff ||_ebafa ==0){_afcdf =true ;_bggc =_egbff [_ebafa ];_ccgdb =_fgcc +1+_geaf ;};var _beda ,_afabe int ;switch _cdbf {case PixClr :for _beda =0;_beda < _edab ;_beda ++{_fcfae .Data [_fgcc ]=_aegf (_fcfae .Data [_fgcc ],0x0,_abdf );_fgcc +=_fcfae .RowStride ;};if _bgee {for _beda =0;_beda < _edab ;_beda ++{for _afabe =0;_afabe < _geaf ;_afabe ++{_fcfae .Data [_fcdg +_afabe ]=0x0;};_fcdg +=_fcfae .RowStride ;};};if _afcdf {for _beda =0;_beda < _edab ;_beda ++{_fcfae .Data [_ccgdb ]=_aegf (_fcfae .Data [_ccgdb ],0x0,_bggc );_ccgdb +=_fcfae .RowStride ;};};case PixSet :for _beda =0;_beda < _edab ;_beda ++{_fcfae .Data [_fgcc ]=_aegf (_fcfae .Data [_fgcc ],0xff,_abdf );_fgcc +=_fcfae .RowStride ;};if _bgee {for _beda =0;_beda < _edab ;_beda ++{for _afabe =0;_afabe < _geaf ;_afabe ++{_fcfae .Data [_fcdg +_afabe ]=0xff;};_fcdg +=_fcfae .RowStride ;};};if _afcdf {for _beda =0;_beda < _edab ;_beda ++{_fcfae .Data [_ccgdb ]=_aegf (_fcfae .Data [_ccgdb ],0xff,_bggc );_ccgdb +=_fcfae .RowStride ;};};case PixNotDst :for _beda =0;_beda < _edab ;_beda ++{_fcfae .Data [_fgcc ]=_aegf (_fcfae .Data [_fgcc ],^_fcfae .Data [_fgcc ],_abdf );_fgcc +=_fcfae .RowStride ;};if _bgee {for _beda =0;_beda < _edab ;_beda ++{for _afabe =0;_afabe < _geaf ;_afabe ++{_fcfae .Data [_fcdg +_afabe ]=^(_fcfae .Data [_fcdg +_afabe ]);};_fcdg +=_fcfae .RowStride ;};};if _afcdf {for _beda =0;_beda < _edab ;_beda ++{_fcfae .Data [_ccgdb ]=_aegf (_fcfae .Data [_ccgdb ],^_fcfae .Data [_ccgdb ],_bggc );_ccgdb +=_fcfae .RowStride ;};};};};func _cfef (_acg *Bitmap ,_fcfc ,_cfed ,_gdfe ,_dagbd int ,_gggf RasterOperator ,_decf *Bitmap ,_bgefe ,_ffgb int )error {const _ceeb ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _acg ==nil {return _b .Error (_ceeb ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _gggf ==PixDst {return nil ;};switch _gggf {case PixClr ,PixSet ,PixNotDst :_egaf (_acg ,_fcfc ,_cfed ,_gdfe ,_dagbd ,_gggf );return nil ;};if _decf ==nil {_ef .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _b .Error (_ceeb ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ddae :=_becec (_acg ,_fcfc ,_cfed ,_gdfe ,_dagbd ,_gggf ,_decf ,_bgefe ,_ffgb );_ddae !=nil {return _b .Wrap (_ddae ,_ceeb ,"");};return nil ;};func (_fcfd *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ccag *Bitmaps ,_eceea error ){const _edbf ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _fcfd ==nil {return nil ,_b .Error (_edbf ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_edbf ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_edbf ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_aedd ,_eceea :=_fcfd .makeSizeIndicator (width ,height ,tp ,relation );if _eceea !=nil {return nil ,_b .Wrap (_eceea ,_edbf ,"");};_ccag ,_eceea =_fcfd .selectByIndicator (_aedd );if _eceea !=nil {return nil ,_b .Wrap (_eceea ,_edbf ,"");};return _ccag ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _acffd (d ,s ,sel )};func (_ecgdd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _aaae ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_ecgdd .IntSlice .Size (){return 0,_b .Errorf (_aaae ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_ecgdd .XAtIndex (i )),nil ;};func _aa (_ac ,_ce *Bitmap )(_dfg error ){const _bg ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ad :=_ce .RowStride ;_da :=_ac .RowStride ;var (_eg byte ;_cd uint16 ;_ec ,_ee ,_bgc ,_gb ,_ca int ;);for _bgc =0;_bgc < _ce .Height ;_bgc ++{_ec =_bgc *_ad ;_ee =2*_bgc *_da ;for _gb =0;_gb < _ad ;_gb ++{_eg =_ce .Data [_ec +_gb ];_cd =_egbf [_eg ];_ca =_ee +_gb *2;if _ac .RowStride !=_ce .RowStride *2&&(_gb +1)*2> _ac .RowStride {_dfg =_ac .SetByte (_ca ,byte (_cd >>8));}else {_dfg =_ac .setTwoBytes (_ca ,_cd );};if _dfg !=nil {return _b .Wrap (_dfg ,_bg ,"");};};for _gb =0;_gb < _da ;_gb ++{_ca =_ee +_da +_gb ;_eg =_ac .Data [_ee +_gb ];if _dfg =_ac .SetByte (_ca ,_eg );_dfg !=nil {return _b .Wrapf (_dfg ,_bg ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ee +_gb ,_ee +_da +_gb );};};};return nil ;};func (_dadc *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bac bool ,_daa error ){const _bae ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_fdefb ();};_bgcd :=_dadc .Width >>3;_feff :=_dadc .Width &7;_bgff :=byte (0xff<<uint (8-_feff ));var (_daf ,_dfe ,_bccf ,_gag int ;_efbg byte ;);for _daf =0;_daf < _dadc .Height ;_daf ++{_bccf =_dadc .RowStride *_daf ;for _dfe =0;_dfe < _bgcd ;_dfe ++{_efbg ,_daa =_dadc .GetByte (_bccf +_dfe );if _daa !=nil {return false ,_b .Wrap (_daa ,_bae ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_gag +=tab8 [_efbg ];};if _feff !=0{_efbg ,_daa =_dadc .GetByte (_bccf +_dfe );if _daa !=nil {return false ,_b .Wrap (_daa ,_bae ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_efbg &=_bgff ;_gag +=tab8 [_efbg ];};if _gag > thresh {return true ,nil ;};};return _bac ,nil ;};func _cgddg (_gaded ,_cdfb *Bitmap ,_gcgd *Selection )(*Bitmap ,error ){const _cggg ="\u0065\u0072\u006fd\u0065";var (_faef error ;_affa *Bitmap ;);_gaded ,_faef =_beff (_gaded ,_cdfb ,_gcgd ,&_affa );if _faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"");};if _faef =_gaded .setAll ();_faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"");};var _aebe SelectionValue ;for _ddbg :=0;_ddbg < _gcgd .Height ;_ddbg ++{for _bccg :=0;_bccg < _gcgd .Width ;_bccg ++{_aebe =_gcgd .Data [_ddbg ][_bccg ];if _aebe ==SelHit {_faef =_cfef (_gaded ,_gcgd .Cx -_bccg ,_gcgd .Cy -_ddbg ,_cdfb .Width ,_cdfb .Height ,PixSrcAndDst ,_affa ,0,0);if _faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"");};};};};if MorphBC ==SymmetricMorphBC {return _gaded ,nil ;};_geg ,_bfgd ,_faab ,_dcff :=_gcgd .findMaxTranslations ();if _geg > 0{if _faef =_gaded .RasterOperation (0,0,_geg ,_cdfb .Height ,PixClr ,nil ,0,0);_faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _faab > 0{if _faef =_gaded .RasterOperation (_cdfb .Width -_faab ,0,_faab ,_cdfb .Height ,PixClr ,nil ,0,0);_faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _bfgd > 0{if _faef =_gaded .RasterOperation (0,0,_cdfb .Width ,_bfgd ,PixClr ,nil ,0,0);_faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _dcff > 0{if _faef =_gaded .RasterOperation (0,_cdfb .Height -_dcff ,_cdfb .Width ,_dcff ,PixClr ,nil ,0,0);_faef !=nil {return nil ,_b .Wrap (_faef ,_cggg ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _gaded ,nil ;};func (_bdgc *Selection )setOrigin (_fafaf ,_bggd int ){_bdgc .Cy ,_bdgc .Cx =_fafaf ,_bggd };func _fba (_eda ,_gfg int )*Bitmap {return &Bitmap {Width :_eda ,Height :_gfg ,RowStride :(_eda +7)>>3};};func _fbcc (_cfbf ,_dcd *Bitmap ,_gaee ,_dce ,_cbfa uint ,_ebeg ,_gcgc int ,_afaf bool ,_ffb ,_afeg int )error {for _efcb :=_ebeg ;_efcb < _gcgc ;_efcb ++{if _ffb +1< len (_cfbf .Data ){_gfc :=_efcb +1==_gcgc ;_ffdfc ,_eabe :=_cfbf .GetByte (_ffb );if _eabe !=nil {return _eabe ;};_ffb ++;_ffdfc <<=_gaee ;_aabd ,_eabe :=_cfbf .GetByte (_ffb );if _eabe !=nil {return _eabe ;};_aabd >>=_dce ;_dae :=_ffdfc |_aabd ;if _gfc &&!_afaf {_dae =_ffc (_cbfa ,_dae );};_eabe =_dcd .SetByte (_afeg ,_dae );if _eabe !=nil {return _eabe ;};_afeg ++;if _gfc &&_afaf {_eafe ,_bdcd :=_cfbf .GetByte (_ffb );if _bdcd !=nil {return _bdcd ;};_eafe <<=_gaee ;_dae =_ffc (_cbfa ,_eafe );if _bdcd =_dcd .SetByte (_afeg ,_dae );_bdcd !=nil {return _bdcd ;};};continue ;};_fcfb ,_ccc :=_cfbf .GetByte (_ffb );if _ccc !=nil {_ef .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_ffb ,_ccc );return _ccc ;};_fcfb <<=_gaee ;_ffb ++;_ccc =_dcd .SetByte (_afeg ,_fcfb );if _ccc !=nil {return _ccc ;};_afeg ++;};return nil ;};func (_faafa *BitmapsArray )AddBox (box *_db .Rectangle ){_faafa .Boxes =append (_faafa .Boxes ,box )};func (_cddg *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bgde *Boxes ,_cdege error ){const _gacg ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _cddg ==nil {return nil ,_b .Error (_gacg ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_b .Error (_gacg ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _bgde ,_cdege =_cddg .connComponentsBB (connectivity );_cdege !=nil {return nil ,_b .Wrap (_cdege ,_gacg ,"");};}else {if _bgde ,_cdege =_cddg .connComponentsBitmapsBB (bms ,connectivity );_cdege !=nil {return nil ,_b .Wrap (_cdege ,_gacg ,"");};};return _bgde ,nil ;};func MakePixelSumTab8 ()[]int {return _fdefb ()};func _dabg (_abcd ,_ceafc int ,_dddca string )*Selection {_feadf :=&Selection {Height :_abcd ,Width :_ceafc ,Name :_dddca };_feadf .Data =make ([][]SelectionValue ,_abcd );for _bfab :=0;_bfab < _abcd ;_bfab ++{_feadf .Data [_bfab ]=make ([]SelectionValue ,_ceafc );};return _feadf ;};func (_fbc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_efd :=_fbc .GetByteIndex (x ,y );if _efd > len (_fbc .Data )-1{return _b .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_efd );};_bda :=_fbc .GetBitOffset (x );_fabg :=uint (7-_bda );_ggeg :=_fbc .Data [_efd ];var _ccef byte ;if pixel ==1{_ccef =_ggeg |(pixel &0x01<<_fabg );}else {_ccef =_ggeg &^(1<<_fabg );};_fbc .Data [_efd ]=_ccef ;return nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_cedg *Bitmaps )CountPixels ()*_ea .NumSlice {_edfgf :=&_ea .NumSlice {};for _ ,_cfgea :=range _cedg .Values {_edfgf .AddInt (_cfgea .CountPixels ());};return _edfgf ;};func (_bece *Bitmap )String ()string {var _ecd ="\u000a";for _eeb :=0;_eeb < _bece .Height ;_eeb ++{var _dag string ;for _cgd :=0;_cgd < _bece .Width ;_cgd ++{_gdg :=_bece .GetPixel (_cgd ,_eeb );if _gdg {_dag +="\u0031";}else {_dag +="\u0030";};};_ecd +=_dag +"\u000a";};return _ecd ;};func MakePixelCentroidTab8 ()[]int {return _cdeb ()};const (Vanilla Color =iota ;Chocolate ;);type BoundaryCondition int ;func _gaadf (_gbb *Bitmap )(_dfda *Bitmap ,_ddb int ,_cedc error ){const _ebda ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _gbb ==nil {return nil ,0,_b .Errorf (_ebda ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _dab ,_dega *Bitmap ;if _dab ,_cedc =_ced (nil ,_gbb );_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_egcf [13]int ;_bdaf ,_beeb int ;);_ggebb :=12;_dfae :=_ea .NewNumSlice (_ggebb +1);_gfcg :=_ea .NewNumSlice (_ggebb +1);var _febc *Boxes ;for _cbg :=0;_cbg <=_ggebb ;_cbg ++{if _cbg ==0{if _dega ,_cedc =_ced (nil ,_dab );_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _dega ,_cedc =_bga (_dab ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _febc ,_cedc =_dega .connComponentsBB (4);_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"");};_egcf [_cbg ]=len (*_febc );_dfae .AddInt (_egcf [_cbg ]);switch _cbg {case 0:_bdaf =_egcf [0];default:_beeb =_egcf [_cbg -1]-_egcf [_cbg ];_gfcg .AddInt (_beeb );};_dab =_dega ;};_dbec :=true ;_fda :=2;var _ddeb ,_fefg int ;for _ccfff :=1;_ccfff < len (*_gfcg );_ccfff ++{if _ddeb ,_cedc =_dfae .GetInt (_ccfff );_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _dbec &&_ddeb < int (0.3*float32 (_bdaf )){_fda =_ccfff +1;_dbec =false ;};if _beeb ,_cedc =_gfcg .GetInt (_ccfff );_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _beeb > _fefg {_fefg =_beeb ;};};_bcce :=_gbb .XResolution ;if _bcce ==0{_bcce =150;};if _bcce > 110{_fda ++;};if _fda < 2{_ef .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_fda =2;};_ddb =_fda +1;if _dfda ,_cedc =_dcdd (nil ,_gbb ,_fda +1,1);_cedc !=nil {return nil ,0,_b .Wrap (_cedc ,_ebda ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _dfda ,_ddb ,nil ;};func _dadb (_befa *Bitmap ,_dbcg ,_dgddc ,_aafec ,_dfeb int ,_cggeb RasterOperator ,_bfcd *Bitmap ,_agefe ,_cgab int )error {var (_gdaa byte ;_ebgfe int ;_bdfec int ;_eedf ,_efca int ;_dccde ,_acbe int ;);_eadb :=_aafec >>3;_begb :=_aafec &7;if _begb > 0{_gdaa =_egbff [_begb ];};_ebgfe =_bfcd .RowStride *_cgab +(_agefe >>3);_bdfec =_befa .RowStride *_dgddc +(_dbcg >>3);switch _cggeb {case PixSrc :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=_bfcd .Data [_eedf ];_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],_bfcd .Data [_eedf ],_gdaa );};};case PixNotSrc :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=^(_bfcd .Data [_eedf ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],^_bfcd .Data [_eedf ],_gdaa );};};case PixSrcOrDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]|=_bfcd .Data [_eedf ];_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],_bfcd .Data [_eedf ]|_befa .Data [_efca ],_gdaa );};};case PixSrcAndDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]&=_bfcd .Data [_eedf ];_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],_bfcd .Data [_eedf ]&_befa .Data [_efca ],_gdaa );};};case PixSrcXorDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]^=_bfcd .Data [_eedf ];_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],_bfcd .Data [_eedf ]^_befa .Data [_efca ],_gdaa );};};case PixNotSrcOrDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]|=^(_bfcd .Data [_eedf ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],^(_bfcd .Data [_eedf ])|_befa .Data [_efca ],_gdaa );};};case PixNotSrcAndDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]&=^(_bfcd .Data [_eedf ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],^(_bfcd .Data [_eedf ])&_befa .Data [_efca ],_gdaa );};};case PixSrcOrNotDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=_bfcd .Data [_eedf ]|^(_befa .Data [_efca ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],_bfcd .Data [_eedf ]|^(_befa .Data [_efca ]),_gdaa );};};case PixSrcAndNotDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=_bfcd .Data [_eedf ]&^(_befa .Data [_efca ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],_bfcd .Data [_eedf ]&^(_befa .Data [_efca ]),_gdaa );};};case PixNotPixSrcOrDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=^(_bfcd .Data [_eedf ]|_befa .Data [_efca ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],^(_bfcd .Data [_eedf ]|_befa .Data [_efca ]),_gdaa );};};case PixNotPixSrcAndDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=^(_bfcd .Data [_eedf ]&_befa .Data [_efca ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],^(_bfcd .Data [_eedf ]&_befa .Data [_efca ]),_gdaa );};};case PixNotPixSrcXorDst :for _dccde =0;_dccde < _dfeb ;_dccde ++{_eedf =_ebgfe +_dccde *_bfcd .RowStride ;_efca =_bdfec +_dccde *_befa .RowStride ;for _acbe =0;_acbe < _eadb ;_acbe ++{_befa .Data [_efca ]=^(_bfcd .Data [_eedf ]^_befa .Data [_efca ]);_efca ++;_eedf ++;};if _begb > 0{_befa .Data [_efca ]=_aegf (_befa .Data [_efca ],^(_bfcd .Data [_eedf ]^_befa .Data [_efca ]),_gdaa );};};default:_ef .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cggeb );return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_gabfc *Bitmaps )Size ()int {return len (_gabfc .Values )};type Getter interface{GetBitmap ()*Bitmap ;};func (_ebg *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _ebg .removeBorderGeneral (left ,right ,top ,bot );};type RasterOperator int ;func _beff (_fcaa *Bitmap ,_fcfbc *Bitmap ,_bged *Selection ,_gcfa **Bitmap )(*Bitmap ,error ){const _gefa ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _fcfbc ==nil {return nil ,_b .Error (_gefa ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _bged ==nil {return nil ,_b .Error (_gefa ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_fdgda ,_ceda :=_bged .Height ,_bged .Width ;if _fdgda ==0||_ceda ==0{return nil ,_b .Error (_gefa ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fcaa ==nil {_fcaa =_fcfbc .createTemplate ();*_gcfa =_fcfbc ;return _fcaa ,nil ;};_fcaa .Width =_fcfbc .Width ;_fcaa .Height =_fcfbc .Height ;_fcaa .RowStride =_fcfbc .RowStride ;_fcaa .Color =_fcfbc .Color ;_fcaa .Data =make ([]byte ,_fcfbc .RowStride *_fcfbc .Height );if _fcaa ==_fcfbc {*_gcfa =_fcfbc .Copy ();}else {*_gcfa =_fcfbc ;};return _fcaa ,nil ;};func (_fgd *Bitmaps )WidthSorter ()func (_affde ,_bfba int )bool {return func (_fbge ,_bccea int )bool {return _fgd .Values [_fbge ].Width < _fgd .Values [_bccea ].Width };};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bgbab ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_beb :=_fba (width ,height );_beb .Data =data ;if len (data )< height *_beb .RowStride {return nil ,_b .Errorf (_bgbab ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_beb .RowStride );};return _beb ,nil ;};func _fbcd (_edbc ,_bded *Bitmap ,_gcfab ,_bdfc int )(_ebbf error ){const _fgbed ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_acac ,_ebbfd ,_cbd ,_defdc int ;_aadg ,_fccde ,_fegef ,_bggf ,_gegb ,_dfef ,_gfgb byte ;);for _acac =0;_acac < _gcfab ;_acac ++{_cbd =_acac *_edbc .RowStride ;_defdc =_acac *_bded .RowStride ;for _ebbfd =0;_ebbfd < _bdfc ;_ebbfd ++{_aadg ,_ebbf =_edbc .GetByte (_cbd +_ebbfd );if _ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_fccde ,_ebbf =_bded .GetByte (_defdc +_ebbfd );if _ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _acac > 0{_fegef ,_ebbf =_edbc .GetByte (_cbd -_edbc .RowStride +_ebbfd );if _ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0069\u0020\u003e \u0030");};_aadg |=_fegef ;};if _ebbfd > 0{_bggf ,_ebbf =_edbc .GetByte (_cbd +_ebbfd -1);if _ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u006a\u0020\u003e \u0030");};_aadg |=_bggf <<7;};_aadg &=_fccde ;if _aadg ==0||(^_aadg )==0{if _ebbf =_edbc .SetByte (_cbd +_ebbfd ,_aadg );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_gfgb =_aadg ;_aadg =(_aadg |(_aadg >>1)|(_aadg <<1))&_fccde ;if (_aadg ^_gfgb )==0{if _ebbf =_edbc .SetByte (_cbd +_ebbfd ,_aadg );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _acac =_gcfab -1;_acac >=0;_acac --{_cbd =_acac *_edbc .RowStride ;_defdc =_acac *_bded .RowStride ;for _ebbfd =_bdfc -1;_ebbfd >=0;_ebbfd --{if _aadg ,_ebbf =_edbc .GetByte (_cbd +_ebbfd );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _fccde ,_ebbf =_bded .GetByte (_defdc +_ebbfd );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _acac < _gcfab -1{if _gegb ,_ebbf =_edbc .GetByte (_cbd +_edbc .RowStride +_ebbfd );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_aadg |=_gegb ;};if _ebbfd < _bdfc -1{if _dfef ,_ebbf =_edbc .GetByte (_cbd +_ebbfd +1);_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_aadg |=_dfef >>7;};_aadg &=_fccde ;if _aadg ==0||(^_aadg )==0{if _ebbf =_edbc .SetByte (_cbd +_ebbfd ,_aadg );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_gfgb =_aadg ;_aadg =(_aadg |(_aadg >>1)|(_aadg <<1))&_fccde ;if (_aadg ^_gfgb )==0{if _ebbf =_edbc .SetByte (_cbd +_ebbfd ,_aadg );_ebbf !=nil {return _b .Wrap (_ebbf ,_fgbed ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};var _caa [256]uint8 ;func (_dcce *ClassedPoints )Swap (i ,j int ){_dcce .IntSlice [i ],_dcce .IntSlice [j ]=_dcce .IntSlice [j ],_dcce .IntSlice [i ];};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_abeb :=_dabg (h ,w ,"");_abeb .setOrigin (cy ,cx );var _eeff ,_ecef int ;for _eeff =0;_eeff < h ;_eeff ++{for _ecef =0;_ecef < w ;_ecef ++{_abeb .Data [_eeff ][_ecef ]=tp ;};};return _abeb ;};func _ebcb (_fgc ,_efec int )int {if _fgc < _efec {return _fgc ;};return _efec ;};var (_aegc *Bitmap ;_eege *Bitmap ;);func TstWriteSymbols (t *_a .T ,bms *Bitmaps ,src *Bitmap ){for _edaf :=0;_edaf < bms .Size ();_edaf ++{_fccag :=bms .Values [_edaf ];_ecbbe :=bms .Boxes [_edaf ];_edgc :=src .RasterOperation (_ecbbe .Min .X ,_ecbbe .Min .Y ,_fccag .Width ,_fccag .Height ,PixSrc ,_fccag ,0,0);_g .NoError (t ,_edgc );};};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _gfed (d ,s ,hSize ,vSize )};func (_cbe *Bitmap )Copy ()*Bitmap {_eaed :=make ([]byte ,len (_cbe .Data ));copy (_eaed ,_cbe .Data );return &Bitmap {Width :_cbe .Width ,Height :_cbe .Height ,RowStride :_cbe .RowStride ,Data :_eaed ,Color :_cbe .Color ,Text :_cbe .Text ,BitmapNumber :_cbe .BitmapNumber ,Special :_cbe .Special };};func (_affd *Bitmap )addBorderGeneral (_dc ,_ecbb ,_cgcbf ,_fde int ,_effc int )(*Bitmap ,error ){const _fbaa ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _dc < 0||_ecbb < 0||_cgcbf < 0||_fde < 0{return nil ,_b .Error (_fbaa ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_cdg ,_gce :=_affd .Width ,_affd .Height ;_caaf :=_cdg +_dc +_ecbb ;_gccg :=_gce +_cgcbf +_fde ;_gfgg :=New (_caaf ,_gccg );_gfgg .Color =_affd .Color ;_gcg :=PixClr ;if _effc > 0{_gcg =PixSet ;};_ebee :=_gfgg .RasterOperation (0,0,_dc ,_gccg ,_gcg ,nil ,0,0);if _ebee !=nil {return nil ,_b .Wrap (_ebee ,_fbaa ,"\u006c\u0065\u0066\u0074");};_ebee =_gfgg .RasterOperation (_caaf -_ecbb ,0,_ecbb ,_gccg ,_gcg ,nil ,0,0);if _ebee !=nil {return nil ,_b .Wrap (_ebee ,_fbaa ,"\u0072\u0069\u0067h\u0074");};_ebee =_gfgg .RasterOperation (0,0,_caaf ,_cgcbf ,_gcg ,nil ,0,0);if _ebee !=nil {return nil ,_b .Wrap (_ebee ,_fbaa ,"\u0074\u006f\u0070");};_ebee =_gfgg .RasterOperation (0,_gccg -_fde ,_caaf ,_fde ,_gcg ,nil ,0,0);if _ebee !=nil {return nil ,_b .Wrap (_ebee ,_fbaa ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_ebee =_gfgg .RasterOperation (_dc ,_cgcbf ,_cdg ,_gce ,PixSrc ,_affd ,0,0);if _ebee !=nil {return nil ,_b .Wrap (_ebee ,_fbaa ,"\u0063\u006f\u0070\u0079");};return _gfgg ,nil ;};func (_dgdf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _cadb ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_dgdf .Values )==0{return nil ,_b .Error (_cadb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_aecb :=&BitmapsArray {};_dgdf .SortByHeight ();_abfeg :=-1;_dfdg :=-1;for _bgccb :=0;_bgccb < len (_dgdf .Values );_bgccb ++{_efddd :=_dgdf .Values [_bgccb ].Height ;if _efddd > _abfeg {_abfeg =_efddd ;_dfdg ++;_aecb .Values =append (_aecb .Values ,&Bitmaps {});};_aecb .Values [_dfdg ].AddBitmap (_dgdf .Values [_bgccb ]);};return _aecb ,nil ;};func _bfe (_dfbg ,_ebc *Bitmap ,_aafd int ,_eee []byte ,_fdcd int )(_baf error ){const _aggb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_acd ,_edd ,_gac ,_gde ,_fcgf ,_eab ,_dfa ,_dgg int ;_dea ,_cgca uint32 ;_bcc ,_gef byte ;_cde uint16 ;);_aae :=make ([]byte ,4);_gaad :=make ([]byte ,4);for _gac =0;_gac < _dfbg .Height -1;_gac ,_gde =_gac +2,_gde +1{_acd =_gac *_dfbg .RowStride ;_edd =_gde *_ebc .RowStride ;for _fcgf ,_eab =0,0;_fcgf < _fdcd ;_fcgf ,_eab =_fcgf +4,_eab +1{for _dfa =0;_dfa < 4;_dfa ++{_dgg =_acd +_fcgf +_dfa ;if _dgg <=len (_dfbg .Data )-1&&_dgg < _acd +_dfbg .RowStride {_aae [_dfa ]=_dfbg .Data [_dgg ];}else {_aae [_dfa ]=0x00;};_dgg =_acd +_dfbg .RowStride +_fcgf +_dfa ;if _dgg <=len (_dfbg .Data )-1&&_dgg < _acd +(2*_dfbg .RowStride ){_gaad [_dfa ]=_dfbg .Data [_dgg ];}else {_gaad [_dfa ]=0x00;};};_dea =_f .BigEndian .Uint32 (_aae );_cgca =_f .BigEndian .Uint32 (_gaad );_cgca &=_dea ;_cgca &=_cgca <<1;_cgca &=0xaaaaaaaa;_dea =_cgca |(_cgca <<7);_bcc =byte (_dea >>24);_gef =byte ((_dea >>8)&0xff);_dgg =_edd +_eab ;if _dgg +1==len (_ebc .Data )-1||_dgg +1>=_edd +_ebc .RowStride {_ebc .Data [_dgg ]=_eee [_bcc ];if _baf =_ebc .SetByte (_dgg ,_eee [_bcc ]);_baf !=nil {return _b .Wrapf (_baf ,_aggb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgg );};}else {_cde =(uint16 (_eee [_bcc ])<<8)|uint16 (_eee [_gef ]);if _baf =_ebc .setTwoBytes (_dgg ,_cde );_baf !=nil {return _b .Wrapf (_baf ,_aggb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgg );};_eab ++;};};};return nil ;};func _bfeg (_ebba ,_eddg *Bitmap ,_effg CombinationOperator )*Bitmap {_adea :=New (_ebba .Width ,_ebba .Height );for _ccgf :=0;_ccgf < len (_adea .Data );_ccgf ++{_adea .Data [_ccgf ]=_efad (_ebba .Data [_ccgf ],_eddg .Data [_ccgf ],_effg );};return _adea ;};func TstASymbol (t *_a .T )*Bitmap {t .Helper ();_efgdf :=New (6,6);_g .NoError (t ,_efgdf .SetPixel (1,0,1));_g .NoError (t ,_efgdf .SetPixel (2,0,1));_g .NoError (t ,_efgdf .SetPixel (3,0,1));_g .NoError (t ,_efgdf .SetPixel (4,0,1));_g .NoError (t ,_efgdf .SetPixel (5,1,1));_g .NoError (t ,_efgdf .SetPixel (1,2,1));_g .NoError (t ,_efgdf .SetPixel (2,2,1));_g .NoError (t ,_efgdf .SetPixel (3,2,1));_g .NoError (t ,_efgdf .SetPixel (4,2,1));_g .NoError (t ,_efgdf .SetPixel (5,2,1));_g .NoError (t ,_efgdf .SetPixel (0,3,1));_g .NoError (t ,_efgdf .SetPixel (5,3,1));_g .NoError (t ,_efgdf .SetPixel (0,4,1));_g .NoError (t ,_efgdf .SetPixel (5,4,1));_g .NoError (t ,_efgdf .SetPixel (1,5,1));_g .NoError (t ,_efgdf .SetPixel (2,5,1));_g .NoError (t ,_efgdf .SetPixel (3,5,1));_g .NoError (t ,_efgdf .SetPixel (4,5,1));_g .NoError (t ,_efgdf .SetPixel (5,5,1));return _efgdf ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func TstFrameBitmapData ()[]byte {return _aegc .Data };func TstVSymbol (t *_a .T ,scale ...int )*Bitmap {_afabf ,_bfaba :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_g .NoError (t ,_bfaba );return TstGetScaledSymbol (t ,_afabf ,scale ...);};func (_dbada *Bitmaps )String ()string {_dffa :=_d .Builder {};for _ ,_abcc :=range _dbada .Values {_dffa .WriteString (_abcc .String ());_dffa .WriteRune ('\n');};return _dffa .String ();};func TstRSymbol (t *_a .T ,scale ...int )*Bitmap {_cdebe ,_dade :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_g .NoError (t ,_dade );return TstGetScaledSymbol (t ,_cdebe ,scale ...);};func (_bdab *Boxes )Add (box *_db .Rectangle )error {if _bdab ==nil {return _b .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_bdab =append (*_bdab ,box );return nil ;};func TstNSymbol (t *_a .T ,scale ...int )*Bitmap {_dcgb ,_bbbc :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_g .NoError (t ,_bbbc );return TstGetScaledSymbol (t ,_dcgb ,scale ...);};type Bitmaps struct{Values []*Bitmap ;Boxes []*_db .Rectangle ;};func TstESymbol (t *_a .T ,scale ...int )*Bitmap {_gagc ,_ffaag :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_g .NoError (t ,_ffaag );return TstGetScaledSymbol (t ,_gagc ,scale ...);};func _gdgb (_ccbbb ,_cdgd ,_aca *Bitmap )(*Bitmap ,error ){const _fafa ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _cdgd ==nil {return nil ,_b .Error (_fafa ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _aca ==nil {return nil ,_b .Error (_fafa ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ccbbb ==_aca {return nil ,_b .Error (_fafa ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_cdgd .SizesEqual (_aca ){_ef .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_fafa );};var _ddd error ;if _ccbbb ,_ddd =_ced (_ccbbb ,_cdgd );_ddd !=nil {return nil ,_b .Wrap (_ddd ,_fafa ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ddd =_ccbbb .RasterOperation (0,0,_ccbbb .Width ,_ccbbb .Height ,PixSrcXorDst ,_aca ,0,0);_ddd !=nil {return nil ,_b .Wrap (_ddd ,_fafa ,"");};return _ccbbb ,nil ;};func _caaa (_bdcc *Bitmap ,_ccdc ,_acae ,_ffae ,_dddd int ,_edcb RasterOperator ,_gaff *Bitmap ,_dcca ,_dbgd int )error {var (_bdfeg bool ;_ecbe bool ;_efcd int ;_cged int ;_bgeb int ;_abff bool ;_bbgdf byte ;_bbee int ;_caff int ;_gaec int ;_bfeb ,_gagb int ;);_eecb :=8-(_ccdc &7);_dffd :=_ecgf [_eecb ];_cbbf :=_bdcc .RowStride *_acae +(_ccdc >>3);_dfbbc :=_gaff .RowStride *_dbgd +(_dcca >>3);if _ffae < _eecb {_bdfeg =true ;_dffd &=_egbff [8-_eecb +_ffae ];};if !_bdfeg {_efcd =(_ffae -_eecb )>>3;if _efcd > 0{_ecbe =true ;_cged =_cbbf +1;_bgeb =_dfbbc +1;};};_bbee =(_ccdc +_ffae )&7;if !(_bdfeg ||_bbee ==0){_abff =true ;_bbgdf =_egbff [_bbee ];_caff =_cbbf +1+_efcd ;_gaec =_dfbbc +1+_efcd ;};switch _edcb {case PixSrc :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],_gaff .Data [_dfbbc ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=_gaff .Data [_bgeb +_gagb ];};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],_gaff .Data [_gaec ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixNotSrc :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],^_gaff .Data [_dfbbc ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=^_gaff .Data [_bgeb +_gagb ];};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],^_gaff .Data [_gaec ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixSrcOrDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],_gaff .Data [_dfbbc ]|_bdcc .Data [_cbbf ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]|=_gaff .Data [_bgeb +_gagb ];};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],_gaff .Data [_gaec ]|_bdcc .Data [_caff ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixSrcAndDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],_gaff .Data [_dfbbc ]&_bdcc .Data [_cbbf ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]&=_gaff .Data [_bgeb +_gagb ];};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],_gaff .Data [_gaec ]&_bdcc .Data [_caff ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixSrcXorDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],_gaff .Data [_dfbbc ]^_bdcc .Data [_cbbf ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]^=_gaff .Data [_bgeb +_gagb ];};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],_gaff .Data [_gaec ]^_bdcc .Data [_caff ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixNotSrcOrDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],^(_gaff .Data [_dfbbc ])|_bdcc .Data [_cbbf ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]|=^(_gaff .Data [_bgeb +_gagb ]);};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],^(_gaff .Data [_gaec ])|_bdcc .Data [_caff ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixNotSrcAndDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],^(_gaff .Data [_dfbbc ])&_bdcc .Data [_cbbf ],_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]&=^_gaff .Data [_bgeb +_gagb ];};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],^(_gaff .Data [_gaec ])&_bdcc .Data [_caff ],_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixSrcOrNotDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],_gaff .Data [_dfbbc ]|^(_bdcc .Data [_cbbf ]),_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=_gaff .Data [_bgeb +_gagb ]|^(_bdcc .Data [_cged +_gagb ]);};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],_gaff .Data [_gaec ]|^(_bdcc .Data [_caff ]),_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixSrcAndNotDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],_gaff .Data [_dfbbc ]&^(_bdcc .Data [_cbbf ]),_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=_gaff .Data [_bgeb +_gagb ]&^(_bdcc .Data [_cged +_gagb ]);};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],_gaff .Data [_gaec ]&^(_bdcc .Data [_caff ]),_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixNotPixSrcOrDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],^(_gaff .Data [_dfbbc ]|_bdcc .Data [_cbbf ]),_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=^(_gaff .Data [_bgeb +_gagb ]|_bdcc .Data [_cged +_gagb ]);};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],^(_gaff .Data [_gaec ]|_bdcc .Data [_caff ]),_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixNotPixSrcAndDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],^(_gaff .Data [_dfbbc ]&_bdcc .Data [_cbbf ]),_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=^(_gaff .Data [_bgeb +_gagb ]&_bdcc .Data [_cged +_gagb ]);};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],^(_gaff .Data [_gaec ]&_bdcc .Data [_caff ]),_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};case PixNotPixSrcXorDst :for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_cbbf ]=_aegf (_bdcc .Data [_cbbf ],^(_gaff .Data [_dfbbc ]^_bdcc .Data [_cbbf ]),_dffd );_cbbf +=_bdcc .RowStride ;_dfbbc +=_gaff .RowStride ;};if _ecbe {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{for _gagb =0;_gagb < _efcd ;_gagb ++{_bdcc .Data [_cged +_gagb ]=^(_gaff .Data [_bgeb +_gagb ]^_bdcc .Data [_cged +_gagb ]);};_cged +=_bdcc .RowStride ;_bgeb +=_gaff .RowStride ;};};if _abff {for _bfeb =0;_bfeb < _dddd ;_bfeb ++{_bdcc .Data [_caff ]=_aegf (_bdcc .Data [_caff ],^(_gaff .Data [_gaec ]^_bdcc .Data [_caff ]),_bbgdf );_caff +=_bdcc .RowStride ;_gaec +=_gaff .RowStride ;};};default:_ef .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_edcb );return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_ffead *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _gadfc ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_ffead .Values )==0{return nil ,_b .Error (_gadfc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_egea :=&BitmapsArray {};_ffead .SortByWidth ();_bbecf :=-1;_gffff :=-1;for _cebd :=0;_cebd < len (_ffead .Values );_cebd ++{_fgccg :=_ffead .Values [_cebd ].Width ;if _fgccg > _bbecf {_bbecf =_fgccg ;_gffff ++;_egea .Values =append (_egea .Values ,&Bitmaps {});};_egea .Values [_gffff ].AddBitmap (_ffead .Values [_cebd ]);};return _egea ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func _eeg (_bf *Bitmap ,_cg ,_cca int )(*Bitmap ,error ){const _ed ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _bf ==nil {return nil ,_b .Error (_ed ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cg <=0||_cca <=0{return nil ,_b .Error (_ed ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _cg ==_cca {if _cg ==1{_eff ,_de :=_ced (nil ,_bf );if _de !=nil {return nil ,_b .Wrap (_de ,_ed ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _eff ,nil ;};if _cg ==2||_cg ==4||_cg ==8{_cdaf ,_edg :=_ge (_bf ,_cg );if _edg !=nil {return nil ,_b .Wrap (_edg ,_ed ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _cdaf ,nil ;};};_def :=_cg *_bf .Width ;_ccf :=_cca *_bf .Height ;_gg :=New (_def ,_ccf );_edgg :=_gg .RowStride ;var (_egf ,_agg ,_gd ,_bce ,_af int ;_gge byte ;_dff error ;);for _agg =0;_agg < _bf .Height ;_agg ++{_egf =_cca *_agg *_edgg ;for _gd =0;_gd < _bf .Width ;_gd ++{if _gbc :=_bf .GetPixel (_gd ,_agg );_gbc {_af =_cg *_gd ;for _bce =0;_bce < _cg ;_bce ++{_gg .setBit (_egf *8+_af +_bce );};};};for _bce =1;_bce < _cca ;_bce ++{_bgba :=_egf +_bce *_edgg ;for _cgb :=0;_cgb < _edgg ;_cgb ++{if _gge ,_dff =_gg .GetByte (_egf +_cgb );_dff !=nil {return nil ,_b .Wrapf (_dff ,_ed ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bce );};if _dff =_gg .SetByte (_bgba +_cgb ,_gge );_dff !=nil {return nil ,_b .Wrap (_dff ,_ed ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _gg ,nil ;};var _aecg =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func (_edgd *Boxes )selectWithIndicator (_acff *_ea .NumSlice )(_gaca *Boxes ,_ggfc error ){const _gfa ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _edgd ==nil {return nil ,_b .Error (_gfa ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _acff ==nil {return nil ,_b .Error (_gfa ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_acff )!=len (*_edgd ){return nil ,_b .Error (_gfa ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _debg ,_dgea int ;for _debe :=0;_debe < len (*_acff );_debe ++{if _debg ,_ggfc =_acff .GetInt (_debe );_ggfc !=nil {return nil ,_b .Wrap (_ggfc ,_gfa ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _debg ==1{_dgea ++;};};if _dgea ==len (*_edgd ){return _edgd ,nil ;};_afaaa :=Boxes {};for _egdgf :=0;_egdgf < len (*_acff );_egdgf ++{_debg =int ((*_acff )[_egdgf ]);if _debg ==0{continue ;};_afaaa =append (_afaaa ,(*_edgd )[_egdgf ]);};_gaca =&_afaaa ;return _gaca ,nil ;};func Rect (x ,y ,w ,h int )(*_db .Rectangle ,error ){const _cbfbg ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_b .Errorf (_cbfbg ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_b .Error (_cbfbg ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_adecg :=_db .Rect (x ,y ,x +w ,y +h );return &_adecg ,nil ;};func (_edc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ffgg *Boxes ,_adgcc error ){const _cabe ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _edc ==nil {return nil ,_b .Error (_cabe ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_edc )==0{return _edc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_cabe ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_b .Errorf (_cabe ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_deff :=_edc .makeSizeIndicator (width ,height ,tp ,relation );_adfe ,_adgcc :=_edc .selectWithIndicator (_deff );if _adgcc !=nil {return nil ,_b .Wrap (_adgcc ,_cabe ,"");};return _adfe ,nil ;};func (_bdc *Bitmap )ToImage ()_db .Image {_aef ,_bbfc :=_df .NewImage (_bdc .Width ,_bdc .Height ,1,1,_bdc .Data ,nil ,nil );if _bbfc !=nil {_ef .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bbfc );};return _aef ;};func (_gfbdb *Bitmaps )HeightSorter ()func (_bcde ,_eaeaa int )bool {return func (_eeecb ,_bdcdb int )bool {_adeda :=_gfbdb .Values [_eeecb ].Height < _gfbdb .Values [_bdcdb ].Height ;_ef .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_gfbdb .Values [_eeecb ].Height ,_gfbdb .Values [_bdcdb ].Height ,_adeda );return _adeda ;};};func (_bcbf *ClassedPoints )SortByX (){_bcbf ._ggaeg =_bcbf .xSortFunction ();_be .Sort (_bcbf )};func (_gabg *byWidth )Swap (i ,j int ){_gabg .Values [i ],_gabg .Values [j ]=_gabg .Values [j ],_gabg .Values [i ];if _gabg .Boxes !=nil {_gabg .Boxes [i ],_gabg .Boxes [j ]=_gabg .Boxes [j ],_gabg .Boxes [i ];};};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _ced (d ,s )};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func TstISymbol (t *_a .T ,scale ...int )*Bitmap {_dabee ,_ccbf :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_g .NoError (t ,_ccbf );return TstGetScaledSymbol (t ,_dabee ,scale ...);};func _ge (_bc *Bitmap ,_egd int )(*Bitmap ,error ){const _bee ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _bc ==nil {return nil ,_b .Error (_bee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _egd ==1{return _ced (nil ,_bc );};if _egd !=2&&_egd !=4&&_egd !=8{return nil ,_b .Error (_bee ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_ba :=_egd *_bc .Width ;_cce :=_egd *_bc .Height ;_dg :=New (_ba ,_cce );var _ccg error ;switch _egd {case 2:_ccg =_aa (_dg ,_bc );case 4:_ccg =_bgb (_dg ,_bc );case 8:_ccg =_ffg (_dg ,_bc );};if _ccg !=nil {return nil ,_b .Wrap (_ccg ,_bee ,"");};return _dg ,nil ;};func (_fac *Bitmap )SetPadBits (value int ){_fac .setPadBits (value )};func (_afbee *BitmapsArray )GetBox (i int )(*_db .Rectangle ,error ){const _dbeef ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _afbee ==nil {return nil ,_b .Error (_dbeef ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_afbee .Boxes )-1{return nil ,_b .Errorf (_dbeef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _afbee .Boxes [i ],nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _efad (_bfac ,_eaab byte ,_ecag CombinationOperator )byte {switch _ecag {case CmbOpOr :return _eaab |_bfac ;case CmbOpAnd :return _eaab &_bfac ;case CmbOpXor :return _eaab ^_bfac ;case CmbOpXNor :return ^(_eaab ^_bfac );case CmbOpNot :return ^(_eaab );default:return _eaab ;};};type Boxes []*_db .Rectangle ;func _ced (_aag ,_dbad *Bitmap )(*Bitmap ,error ){if _dbad ==nil {return nil ,_b .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbad ==_aag {return _aag ,nil ;};if _aag ==nil {_aag =_dbad .createTemplate ();copy (_aag .Data ,_dbad .Data );return _aag ,nil ;};_bdfb :=_aag .resizeImageData (_dbad );if _bdfb !=nil {return nil ,_b .Wrap (_bdfb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_aag .Text =_dbad .Text ;copy (_aag .Data ,_dbad .Data );return _aag ,nil ;};func (_cfbe *ClassedPoints )validateIntSlice ()error {const _dfgeg ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_defa :=range _cfbe .IntSlice {if _defa >=(_cfbe .Points .Size ()){return _b .Errorf (_dfgeg ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_defa ,_cfbe .Points .Size ());};};return nil ;};func (_gdd *Bitmap )resizeImageData (_cgdd *Bitmap )error {if _cgdd ==nil {return _b .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gdd .SizesEqual (_cgdd ){return nil ;};_gdd .Data =make ([]byte ,len (_cgdd .Data ));_gdd .Width =_cgdd .Width ;_gdd .Height =_cgdd .Height ;_gdd .RowStride =_cgdd .RowStride ;return nil ;};func (_bacf *Bitmaps )SortByHeight (){_dcbcg :=(*byHeight )(_bacf );_be .Sort (_dcbcg )};func (_bgfe *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _bgfe .addBorderGeneral (left ,right ,top ,bot ,val );};func (_dbcf *Bitmap )setFourBytes (_egee int ,_fcce uint32 )error {if _egee +3> len (_dbcf .Data )-1{return _b .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_egee );};_dbcf .Data [_egee ]=byte ((_fcce &0xff000000)>>24);_dbcf .Data [_egee +1]=byte ((_fcce &0xff0000)>>16);_dbcf .Data [_egee +2]=byte ((_fcce &0xff00)>>8);_dbcf .Data [_egee +3]=byte (_fcce &0xff);return nil ;};func (_ccefe *Bitmap )SizesEqual (s *Bitmap )bool {if _ccefe ==s {return true ;};if _ccefe .Width !=s .Width ||_ccefe .Height !=s .Height {return false ;};return true ;};func _egae (_dfbcd ,_ccfg *Bitmap ,_ebegdd ,_fcdc int )(*Bitmap ,error ){const _aeba ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _ccfg ==nil {return nil ,_b .Error (_aeba ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ebegdd < 1&&_fcdc < 1{return nil ,_b .Error (_aeba ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _ebegdd ==1&&_fcdc ==1{return _ccfg .Copy (),nil ;};if _ebegdd ==1||_fcdc ==1{var _ggdc error ;_abgc :=SelCreateBrick (_fcdc ,_ebegdd ,_fcdc /2,_ebegdd /2,SelHit );_dfbcd ,_ggdc =_bddd (_dfbcd ,_ccfg ,_abgc );if _ggdc !=nil {return nil ,_b .Wrap (_ggdc ,_aeba ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _dfbcd ,nil ;};_gfef :=SelCreateBrick (1,_ebegdd ,0,_ebegdd /2,SelHit );_edfg :=SelCreateBrick (_fcdc ,1,_fcdc /2,0,SelHit );_gbca ,_adcd :=_cgddg (nil ,_ccfg ,_gfef );if _adcd !=nil {return nil ,_b .Wrap (_adcd ,_aeba ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_dfbcd ,_adcd =_cgddg (_dfbcd ,_gbca ,_edfg );if _adcd !=nil {return nil ,_b .Wrap (_adcd ,_aeba ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_adcd =_acffd (_gbca ,_dfbcd ,_gfef );if _adcd !=nil {return nil ,_b .Wrap (_adcd ,_aeba ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_adcd =_acffd (_dfbcd ,_gbca ,_edfg );if _adcd !=nil {return nil ,_b .Wrap (_adcd ,_aeba ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _dfbcd ,nil ;};type Points []Point ;func (_ebbd *ClassedPoints )XAtIndex (i int )float32 {return (*_ebbd .Points )[_ebbd .IntSlice [i ]].X };func _gfed (_bdaa ,_bbgf *Bitmap ,_cefd ,_fded int )(*Bitmap ,error ){const _ebbc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _bbgf ==nil {_ef .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_b .Error (_ebbc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cefd < 1||_fded < 1{return nil ,_b .Error (_ebbc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _cefd ==1&&_fded ==1{_bdd ,_ebeeb :=_ced (_bdaa ,_bbgf );if _ebeeb !=nil {return nil ,_b .Wrap (_ebeeb ,_ebbc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _bdd ,nil ;};if _cefd ==1||_fded ==1{_degd :=SelCreateBrick (_fded ,_cefd ,_fded /2,_cefd /2,SelHit );_geaa ,_decg :=_acffd (_bdaa ,_bbgf ,_degd );if _decg !=nil {return nil ,_b .Wrap (_decg ,_ebbc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _geaa ,nil ;};_faea :=SelCreateBrick (1,_cefd ,0,_cefd /2,SelHit );_bcea :=SelCreateBrick (_fded ,1,_fded /2,0,SelHit );_eeag ,_dgcc :=_acffd (nil ,_bbgf ,_faea );if _dgcc !=nil {return nil ,_b .Wrap (_dgcc ,_ebbc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_bdaa ,_dgcc =_acffd (_bdaa ,_eeag ,_bcea );if _dgcc !=nil {return nil ,_b .Wrap (_dgcc ,_ebbc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bdaa ,nil ;};func (_ccbg *Bitmaps )selectByIndicator (_dfcba *_ea .NumSlice )(_bcceac *Bitmaps ,_fecg error ){const _agf ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _ccbg ==nil {return nil ,_b .Error (_agf ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _dfcba ==nil {return nil ,_b .Error (_agf ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_ccbg .Values )==0{return _ccbg ,nil ;};if len (*_dfcba )!=len (_ccbg .Values ){return nil ,_b .Errorf (_agf ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_dfcba ),len (_ccbg .Values ));};var _dfadf ,_egcb ,_gbgf int ;for _egcb =0;_egcb < len (*_dfcba );_egcb ++{if _dfadf ,_fecg =_dfcba .GetInt (_egcb );_fecg !=nil {return nil ,_b .Wrap (_fecg ,_agf ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dfadf ==1{_gbgf ++;};};if _gbgf ==len (_ccbg .Values ){return _ccbg ,nil ;};_bcceac =&Bitmaps {};_ecdd :=len (_ccbg .Values )==len (_ccbg .Boxes );for _egcb =0;_egcb < len (*_dfcba );_egcb ++{if _dfadf =int ((*_dfcba )[_egcb ]);_dfadf ==0{continue ;};_bcceac .Values =append (_bcceac .Values ,_ccbg .Values [_egcb ]);if _ecdd {_bcceac .Boxes =append (_bcceac .Boxes ,_ccbg .Boxes [_egcb ]);};};return _bcceac ,nil ;};func (_acf *Bitmap )GetByteIndex (x ,y int )int {return y *_acf .RowStride +(x >>3)};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _egdec ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_agdb ,_faa :=p1 .Width ,p1 .Height ;_ageb ,_ccdg :=p3 .Width ,p3 .Height ;if _ea .Abs (_agdb -_ageb )> maxDiffW {return false ,nil ;};if _ea .Abs (_faa -_ccdg )> maxDiffH {return false ,nil ;};_accd :=int (delX +_ea .Sign (delX )*0.5);_faac :=int (delY +_ea .Sign (delY )*0.5);var _gbbf error ;_fdcdg :=p1 .CreateTemplate ();if _gbbf =_fdcdg .RasterOperation (0,0,_agdb ,_faa ,PixSrc ,p1 ,0,0);_gbbf !=nil {return false ,_b .Wrap (_gbbf ,_egdec ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gbbf =_fdcdg .RasterOperation (_accd ,_faac ,_agdb ,_faa ,PixNotSrcAndDst ,p4 ,0,0);_gbbf !=nil {return false ,_b .Wrap (_gbbf ,_egdec ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fdcdg .Zero (){return false ,nil ;};if _gbbf =_fdcdg .RasterOperation (_accd ,_faac ,_ageb ,_ccdg ,PixSrc ,p3 ,0,0);_gbbf !=nil {return false ,_b .Wrap (_gbbf ,_egdec ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gbbf =_fdcdg .RasterOperation (0,0,_ageb ,_ccdg ,PixNotSrcAndDst ,p2 ,0,0);_gbbf !=nil {return false ,_b .Wrap (_gbbf ,_egdec ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fdcdg .Zero (),nil ;};func init (){const _aaca ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_aegc =New (50,40);var _ggea error ;_aegc ,_ggea =_aegc .AddBorder (2,1);if _ggea !=nil {panic (_b .Wrap (_ggea ,_aaca ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_eege ,_ggea =NewWithData (50,22,_aecg );if _ggea !=nil {panic (_b .Wrap (_ggea ,_aaca ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_fff *Bitmap )clipRectangle (_cdeg ,_afc *_db .Rectangle )(_bebd *Bitmap ,_cga error ){const _efbe ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _cdeg ==nil {return nil ,_b .Error (_efbe ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_gaaa ,_dcb :=_fff .Width ,_fff .Height ;_afad ,_cga :=ClipBoxToRectangle (_cdeg ,_gaaa ,_dcb );if _cga !=nil {_ef .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cga );return nil ,nil ;};_ccd ,_bbg :=_afad .Min .X ,_afad .Min .Y ;_dac ,_fbcf :=_afad .Max .X -_afad .Min .X ,_afad .Max .Y -_afad .Min .Y ;_bebd =New (_dac ,_fbcf );_bebd .Text =_fff .Text ;if _cga =_bebd .RasterOperation (0,0,_dac ,_fbcf ,PixSrc ,_fff ,_ccd ,_bbg );_cga !=nil {return nil ,_b .Wrap (_cga ,_efbe ,"");};if _afc !=nil {*_afc =*_afad ;};return _bebd ,nil ;};func _bcdfc (_cdfeg ,_dbff *Bitmap ,_ffad ,_eeec int )(_eggf error ){const _caca ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_dgcb ,_efffa ,_bbgdb ,_aeefe int ;_gege ,_cdca ,_abed ,_gcge ,_gebf ,_dcgeg ,_ffdfb ,_ebgc byte ;);for _dgcb =0;_dgcb < _ffad ;_dgcb ++{_bbgdb =_dgcb *_cdfeg .RowStride ;_aeefe =_dgcb *_dbff .RowStride ;for _efffa =0;_efffa < _eeec ;_efffa ++{if _gege ,_eggf =_cdfeg .GetByte (_bbgdb +_efffa );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _cdca ,_eggf =_dbff .GetByte (_aeefe +_efffa );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _dgcb > 0{if _abed ,_eggf =_cdfeg .GetByte (_bbgdb -_cdfeg .RowStride +_efffa );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gege |=_abed |(_abed <<1)|(_abed >>1);if _efffa > 0{if _ebgc ,_eggf =_cdfeg .GetByte (_bbgdb -_cdfeg .RowStride +_efffa -1);_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gege |=_ebgc <<7;};if _efffa < _eeec -1{if _ebgc ,_eggf =_cdfeg .GetByte (_bbgdb -_cdfeg .RowStride +_efffa +1);_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_gege |=_ebgc >>7;};};if _efffa > 0{if _gcge ,_eggf =_cdfeg .GetByte (_bbgdb +_efffa -1);_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u006a\u0020\u003e \u0030");};_gege |=_gcge <<7;};_gege &=_cdca ;if _gege ==0||^_gege ==0{if _eggf =_cdfeg .SetByte (_bbgdb +_efffa ,_gege );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_ffdfb =_gege ;_gege =(_gege |(_gege >>1)|(_gege <<1))&_cdca ;if (_gege ^_ffdfb )==0{if _eggf =_cdfeg .SetByte (_bbgdb +_efffa ,_gege );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dgcb =_ffad -1;_dgcb >=0;_dgcb --{_bbgdb =_dgcb *_cdfeg .RowStride ;_aeefe =_dgcb *_dbff .RowStride ;for _efffa =_eeec -1;_efffa >=0;_efffa --{if _gege ,_eggf =_cdfeg .GetByte (_bbgdb +_efffa );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _cdca ,_eggf =_dbff .GetByte (_aeefe +_efffa );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dgcb < _ffad -1{if _gebf ,_eggf =_cdfeg .GetByte (_bbgdb +_cdfeg .RowStride +_efffa );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_gege |=_gebf |(_gebf <<1)|_gebf >>1;if _efffa > 0{if _ebgc ,_eggf =_cdfeg .GetByte (_bbgdb +_cdfeg .RowStride +_efffa -1);_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_gege |=_ebgc <<7;};if _efffa < _eeec -1{if _ebgc ,_eggf =_cdfeg .GetByte (_bbgdb +_cdfeg .RowStride +_efffa +1);_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_gege |=_ebgc >>7;};};if _efffa < _eeec -1{if _dcgeg ,_eggf =_cdfeg .GetByte (_bbgdb +_efffa +1);_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_gege |=_dcgeg >>7;};_gege &=_cdca ;if _gege ==0||(^_gege )==0{if _eggf =_cdfeg .SetByte (_bbgdb +_efffa ,_gege );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_ffdfb =_gege ;_gege =(_gege |(_gege >>1)|(_gege <<1))&_cdca ;if (_gege ^_ffdfb )==0{if _eggf =_cdfeg .SetByte (_bbgdb +_efffa ,_gege );_eggf !=nil {return _b .Wrap (_eggf ,_caca ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func TstOSymbol (t *_a .T ,scale ...int )*Bitmap {_ecce ,_fbbg :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_g .NoError (t ,_fbbg );return TstGetScaledSymbol (t ,_ecce ,scale ...);};var (_egbff =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ecgf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);var _ _be .Interface =&ClassedPoints {};func (_fdbea *ClassedPoints )SortByY (){_fdbea ._ggaeg =_fdbea .ySortFunction ();_be .Sort (_fdbea )};func (_cded *Bitmap )Zero ()bool {_ccea :=_cded .Width /8;_edf :=_cded .Width &7;var _gfbe byte ;if _edf !=0{_gfbe =byte (0xff<<uint (8-_edf ));};var _dfbc ,_fea ,_efgdb int ;for _fea =0;_fea < _cded .Height ;_fea ++{_dfbc =_cded .RowStride *_fea ;for _efgdb =0;_efgdb < _ccea ;_efgdb ,_dfbc =_efgdb +1,_dfbc +1{if _cded .Data [_dfbc ]!=0{return false ;};};if _edf > 0{if _cded .Data [_dfbc ]&_gfbe !=0{return false ;};};};return true ;};var MorphBC BoundaryCondition ;func New (width ,height int )*Bitmap {_fgbe :=_fba (width ,height );_fgbe .Data =make ([]byte ,height *_fgbe .RowStride );return _fgbe ;};func (_ecfd *byHeight )Less (i ,j int )bool {return _ecfd .Values [i ].Height < _ecfd .Values [j ].Height };func _cdeb ()[]int {_gccgdg :=make ([]int ,256);_gccgdg [0]=0;_gccgdg [1]=7;var _eebcb int ;for _eebcb =2;_eebcb < 4;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -2]+6;};for _eebcb =4;_eebcb < 8;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -4]+5;};for _eebcb =8;_eebcb < 16;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -8]+4;};for _eebcb =16;_eebcb < 32;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -16]+3;};for _eebcb =32;_eebcb < 64;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -32]+2;};for _eebcb =64;_eebcb < 128;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -64]+1;};for _eebcb =128;_eebcb < 256;_eebcb ++{_gccgdg [_eebcb ]=_gccgdg [_eebcb -128];};return _gccgdg ;};func _bbbb (_bcge ...MorphProcess )(_gfefa error ){const _ddac ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _febb ,_ggfa int ;for _bgcbc ,_dcbae :=range _bcge {if _gfefa =_dcbae .verify (_bgcbc ,&_febb ,&_ggfa );_gfefa !=nil {return _b .Wrap (_gfefa ,_ddac ,"");};};if _ggfa !=0&&_febb !=0{return _b .Error (_ddac ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func (_egga *Boxes )makeSizeIndicator (_fdbe ,_caf int ,_aecc LocationFilter ,_aacf SizeComparison )*_ea .NumSlice {_eafd :=&_ea .NumSlice {};var _gba ,_cabc ,_bcg int ;for _ ,_cfge :=range *_egga {_gba =0;_cabc ,_bcg =_cfge .Dx (),_cfge .Dy ();switch _aecc {case LocSelectWidth :if (_aacf ==SizeSelectIfLT &&_cabc < _fdbe )||(_aacf ==SizeSelectIfGT &&_cabc > _fdbe )||(_aacf ==SizeSelectIfLTE &&_cabc <=_fdbe )||(_aacf ==SizeSelectIfGTE &&_cabc >=_fdbe ){_gba =1;};case LocSelectHeight :if (_aacf ==SizeSelectIfLT &&_bcg < _caf )||(_aacf ==SizeSelectIfGT &&_bcg > _caf )||(_aacf ==SizeSelectIfLTE &&_bcg <=_caf )||(_aacf ==SizeSelectIfGTE &&_bcg >=_caf ){_gba =1;};case LocSelectIfEither :if (_aacf ==SizeSelectIfLT &&(_bcg < _caf ||_cabc < _fdbe ))||(_aacf ==SizeSelectIfGT &&(_bcg > _caf ||_cabc > _fdbe ))||(_aacf ==SizeSelectIfLTE &&(_bcg <=_caf ||_cabc <=_fdbe ))||(_aacf ==SizeSelectIfGTE &&(_bcg >=_caf ||_cabc >=_fdbe )){_gba =1;};case LocSelectIfBoth :if (_aacf ==SizeSelectIfLT &&(_bcg < _caf &&_cabc < _fdbe ))||(_aacf ==SizeSelectIfGT &&(_bcg > _caf &&_cabc > _fdbe ))||(_aacf ==SizeSelectIfLTE &&(_bcg <=_caf &&_cabc <=_fdbe ))||(_aacf ==SizeSelectIfGTE &&(_bcg >=_caf &&_cabc >=_fdbe )){_gba =1;};};_eafd .AddInt (_gba );};return _eafd ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_cad *Bitmap )setPadBits (_fcd int ){_becb :=8-_cad .Width %8;if _becb ==8{return ;};_dbf :=_cad .Width /8;_agecg :=_ecgf [_becb ];if _fcd ==0{_agecg ^=_agecg ;};var _gdbb int ;for _dcbc :=0;_dcbc < _cad .Height ;_dcbc ++{_gdbb =_dcbc *_cad .RowStride +_dbf ;if _fcd ==0{_cad .Data [_gdbb ]&=_agecg ;}else {_cad .Data [_gdbb ]|=_agecg ;};};};func (_dfc *Bitmap )GetVanillaData ()[]byte {if _dfc .Color ==Chocolate {_dfc .inverseData ();};return _dfc .Data ;};func (_gabe *Bitmaps )selectByIndexes (_acfbg []int )(*Bitmaps ,error ){_fage :=&Bitmaps {};for _ ,_aeefc :=range _acfbg {_afgb ,_bace :=_gabe .GetBitmap (_aeefc );if _bace !=nil {return nil ,_b .Wrap (_bace ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_fage .AddBitmap (_afgb );};return _fage ,nil ;};type byHeight Bitmaps ;func (_fgdd *Bitmaps )makeSizeIndicator (_bgbgb ,_gaffd int ,_fcafg LocationFilter ,_dcffc SizeComparison )(_eebb *_ea .NumSlice ,_bdcac error ){const _fcdfa ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _fgdd ==nil {return nil ,_b .Error (_fcdfa ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _fcafg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_fcdfa ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_fcafg );};switch _dcffc {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_fcdfa ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_dcffc );};_eebb =&_ea .NumSlice {};var (_fegf ,_edbe ,_efeab int ;_agcg *Bitmap ;);for _ ,_agcg =range _fgdd .Values {_fegf =0;_edbe ,_efeab =_agcg .Width ,_agcg .Height ;switch _fcafg {case LocSelectWidth :if (_dcffc ==SizeSelectIfLT &&_edbe < _bgbgb )||(_dcffc ==SizeSelectIfGT &&_edbe > _bgbgb )||(_dcffc ==SizeSelectIfLTE &&_edbe <=_bgbgb )||(_dcffc ==SizeSelectIfGTE &&_edbe >=_bgbgb )||(_dcffc ==SizeSelectIfEQ &&_edbe ==_bgbgb ){_fegf =1;};case LocSelectHeight :if (_dcffc ==SizeSelectIfLT &&_efeab < _gaffd )||(_dcffc ==SizeSelectIfGT &&_efeab > _gaffd )||(_dcffc ==SizeSelectIfLTE &&_efeab <=_gaffd )||(_dcffc ==SizeSelectIfGTE &&_efeab >=_gaffd )||(_dcffc ==SizeSelectIfEQ &&_efeab ==_gaffd ){_fegf =1;};case LocSelectIfEither :if (_dcffc ==SizeSelectIfLT &&(_edbe < _bgbgb ||_efeab < _gaffd ))||(_dcffc ==SizeSelectIfGT &&(_edbe > _bgbgb ||_efeab > _gaffd ))||(_dcffc ==SizeSelectIfLTE &&(_edbe <=_bgbgb ||_efeab <=_gaffd ))||(_dcffc ==SizeSelectIfGTE &&(_edbe >=_bgbgb ||_efeab >=_gaffd ))||(_dcffc ==SizeSelectIfEQ &&(_edbe ==_bgbgb ||_efeab ==_gaffd )){_fegf =1;};case LocSelectIfBoth :if (_dcffc ==SizeSelectIfLT &&(_edbe < _bgbgb &&_efeab < _gaffd ))||(_dcffc ==SizeSelectIfGT &&(_edbe > _bgbgb &&_efeab > _gaffd ))||(_dcffc ==SizeSelectIfLTE &&(_edbe <=_bgbgb &&_efeab <=_gaffd ))||(_dcffc ==SizeSelectIfGTE &&(_edbe >=_bgbgb &&_efeab >=_gaffd ))||(_dcffc ==SizeSelectIfEQ &&(_edbe ==_bgbgb &&_efeab ==_gaffd )){_fegf =1;};};_eebb .AddInt (_fegf );};return _eebb ,nil ;};