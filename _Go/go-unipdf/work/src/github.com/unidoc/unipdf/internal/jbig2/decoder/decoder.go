//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_de "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ac "github.com/unidoc/unipdf/v3/internal/jbig2/document";_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";);type Decoder struct{_dg _de .StreamReader ;_f *_ac .Document ;_ad int ;_c Parameters ;};func (_e *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _e .decodePage (pageNumber )};func (_cb *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _ec ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_gc ,_dd :=_cb .decodePageImage (pageNumber );if _dd !=nil {return nil ,_b .Wrap (_dd ,_ec ,"");};return _gc ,nil ;};func (_ga *Decoder )PageNumber ()(int ,error ){const _gac ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _ga ._f ==nil {return 0,_b .Error (_gac ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_ga ._f .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;Color _g .Color ;};func (_cc *Decoder )decodePage (_acb int )([]byte ,error ){const _af ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _acb < 0{return nil ,_b .Errorf (_af ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_acb );};if _acb > int (_cc ._f .NumberOfPages ){return nil ,_b .Errorf (_af ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_acb );};_cd ,_bb :=_cc ._f .GetPage (_acb );if _bb !=nil {return nil ,_b .Wrap (_bb ,_af ,"");};_eca ,_bb :=_cd .GetBitmap ();if _bb !=nil {return nil ,_b .Wrap (_bb ,_af ,"");};_eca .InverseData ();if !_cc ._c .UnpaddedData {return _eca .Data ,nil ;};return _eca .GetUnpaddedData ();};func Decode (input []byte ,parameters Parameters ,globals *_ac .Globals )(*Decoder ,error ){_gfc :=_de .NewReader (input );_ea ,_ce :=_ac .DecodeDocument (_gfc ,globals );if _ce !=nil {return nil ,_ce ;};return &Decoder {_dg :_gfc ,_f :_ea ,_c :parameters },nil ;};func (_df *Decoder )DecodeNextPage ()([]byte ,error ){_df ._ad ++;_ecc :=_df ._ad ;return _df .decodePage (_ecc );};func (_ade *Decoder )decodePageImage (_gf int )(_d .Image ,error ){const _dgd ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _gf < 0{return nil ,_b .Errorf (_dgd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_gf );};if _gf > int (_ade ._f .NumberOfPages ){return nil ,_b .Errorf (_dgd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_gf );};_da ,_dgc :=_ade ._f .GetPage (_gf );if _dgc !=nil {return nil ,_b .Wrap (_dgc ,_dgd ,"");};_acc ,_dgc :=_da .GetBitmap ();if _dgc !=nil {return nil ,_b .Wrap (_dgc ,_dgd ,"");};return _acc .ToImage (),nil ;};