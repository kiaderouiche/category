//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_fc "fmt";_ff "github.com/unidoc/unipdf/v3/common";_gc "github.com/unidoc/unipdf/v3/internal/bitwise";_gcg "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_f "io";_d "strings";);func (_cde *DecoderStats )getMps ()byte {return _cde ._be [_cde ._cbg ]};func (_ggd *Decoder )renormalize ()error {for {if _ggd ._fd ==0{if _fe :=_ggd .readByte ();_fe !=nil {return _fe ;};};_ggd ._dg <<=1;_ggd ._ce <<=1;_ggd ._fd --;if (_ggd ._dg &0x8000)!=0{break ;};};_ggd ._ce &=0xffffffff;return nil ;};func (_bb *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_bb ._db =1;var _aa uint64 ;for _aa =0;_aa < codeLen ;_aa ++{stats .SetIndex (int32 (_bb ._db ));_cb ,_cae :=_bb .DecodeBit (stats );if _cae !=nil {return 0,_cae ;};_bb ._db =(_bb ._db <<1)|int64 (_cb );};_ad :=_bb ._db -(1<<codeLen );return _ad ,nil ;};func (_bf *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_bg ,_cf int32 ;_dc ,_de ,_e int ;_gce error ;);if stats ==nil {stats =NewStats (512,1);};_bf ._db =1;_de ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};_dc ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};if _dc ==1{_dc ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};if _dc ==1{_dc ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};if _dc ==1{_dc ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};if _dc ==1{_dc ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};if _dc ==1{_e =32;_cf =4436;}else {_e =12;_cf =340;};}else {_e =8;_cf =84;};}else {_e =6;_cf =20;};}else {_e =4;_cf =4;};}else {_e =2;_cf =0;};for _ffc :=0;_ffc < _e ;_ffc ++{_dc ,_gce =_bf .decodeIntBit (stats );if _gce !=nil {return 0,_gce ;};_bg =(_bg <<1)|int32 (_dc );};_bg +=_cf ;if _de ==0{return _bg ,nil ;}else if _de ==1&&_bg > 0{return -_bg ,nil ;};return 0,_gcg .ErrOOB ;};func New (r _gc .StreamReader )(*Decoder ,error ){_gb :=&Decoder {_cg :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _cc :=_gb .init ();_cc !=nil {return nil ,_cc ;};return _gb ,nil ;};func (_fcf *Decoder )readByte ()error {if _fcf ._cg .StreamPosition ()> _fcf ._fff {if _ ,_ea :=_fcf ._cg .Seek (-1,_f .SeekCurrent );_ea !=nil {return _ea ;};};_dba ,_caa :=_fcf ._cg .ReadByte ();if _caa !=nil {return _caa ;};_fcf ._gg =_dba ;if _fcf ._gg ==0xFF{_ab ,_bfa :=_fcf ._cg .ReadByte ();if _bfa !=nil {return _bfa ;};if _ab > 0x8F{_fcf ._ce +=0xFF00;_fcf ._fd =8;if _ ,_bbg :=_fcf ._cg .Seek (-2,_f .SeekCurrent );_bbg !=nil {return _bbg ;};}else {_fcf ._ce +=uint64 (_ab )<<9;_fcf ._fd =7;};}else {_dba ,_caa =_fcf ._cg .ReadByte ();if _caa !=nil {return _caa ;};_fcf ._gg =_dba ;_fcf ._ce +=uint64 (_fcf ._gg )<<8;_fcf ._fd =8;};_fcf ._ce &=0xFFFFFFFFFF;return nil ;};func (_ga *Decoder )init ()error {_ga ._fff =_ga ._cg .StreamPosition ();_add ,_cca :=_ga ._cg .ReadByte ();if _cca !=nil {_ff .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_cca );return _cca ;};_ga ._gg =_add ;_ga ._ce =uint64 (_add )<<16;if _cca =_ga .readByte ();_cca !=nil {return _cca ;};_ga ._ce <<=7;_ga ._fd -=7;_ga ._dg =0x8000;_ga ._ca ++;return nil ;};func (_af *Decoder )lpsExchange (_dfd *DecoderStats ,_afg int32 ,_ec uint32 )int {_bbb :=_dfd .getMps ();if _af ._dg < _ec {_dfd .setEntry (int (_c [_afg ][1]));_af ._dg =_ec ;return int (_bbb );};if _c [_afg ][3]==1{_dfd .toggleMps ();};_dfd .setEntry (int (_c [_afg ][2]));_af ._dg =_ec ;return int (1-_bbb );};func (_b *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_bc int ;_a =_c [stats .cx ()][0];_dgd =int32 (stats .cx ()););defer func (){_b ._ca ++}();_b ._dg -=_a ;if (_b ._ce >>16)< uint64 (_a ){_bc =_b .lpsExchange (stats ,_dgd ,_a );if _df :=_b .renormalize ();_df !=nil {return 0,_df ;};}else {_b ._ce -=uint64 (_a )<<16;if (_b ._dg &0x8000)==0{_bc =_b .mpsExchange (stats ,_dgd );if _fa :=_b .renormalize ();_fa !=nil {return 0,_fa ;};}else {_bc =int (stats .getMps ());};};return _bc ,nil ;};func (_cag *DecoderStats )Overwrite (dNew *DecoderStats ){for _fga :=0;_fga < len (_cag ._dgg );_fga ++{_cag ._dgg [_fga ]=dNew ._dgg [_fga ];_cag ._be [_fga ]=dNew ._be [_fga ];};};func (_fec *DecoderStats )String ()string {_afd :=&_d .Builder {};_afd .WriteString (_fc .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_fec ._dgg )));for _gcgb ,_ede :=range _fec ._dgg {if _ede !=0{_afd .WriteString (_fc .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_gcgb ,_ede ));};};return _afd .String ();};func (_ggda *DecoderStats )Reset (){for _ae :=0;_ae < len (_ggda ._dgg );_ae ++{_ggda ._dgg [_ae ]=0;_ggda ._be [_ae ]=0;};};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_cg _gc .StreamReader ;_gg uint8 ;_ce uint64 ;_dg uint32 ;_db int64 ;_fd int32 ;_ca int32 ;_fff int64 ;};func (_gag *DecoderStats )cx ()byte {return _gag ._dgg [_gag ._cbg ]};type DecoderStats struct{_cbg int32 ;_ag int32 ;_dgg []byte ;_be []byte ;};func (_cd *DecoderStats )SetIndex (index int32 ){_cd ._cbg =index };var (_c =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_cbg :index ,_ag :contextSize ,_dgg :make ([]byte ,contextSize ),_be :make ([]byte ,contextSize )};};func (_abea *DecoderStats )setEntry (_fdd int ){_fed :=byte (_fdd &0x7f);_abea ._dgg [_abea ._cbg ]=_fed ;};func (_gcf *DecoderStats )Copy ()*DecoderStats {_afgd :=&DecoderStats {_ag :_gcf ._ag ,_dgg :make ([]byte ,_gcf ._ag )};for _fae :=0;_fae < len (_gcf ._dgg );_fae ++{_afgd ._dgg [_fae ]=_gcf ._dgg [_fae ];};return _afgd ;};func (_fg *Decoder )mpsExchange (_ccd *DecoderStats ,_ced int32 )int {_ef :=_ccd ._be [_ccd ._cbg ];if _fg ._dg < _c [_ced ][0]{if _c [_ced ][3]==1{_ccd .toggleMps ();};_ccd .setEntry (int (_c [_ced ][2]));return int (1-_ef );};_ccd .setEntry (int (_c [_ced ][1]));return int (_ef );};func (_ee *DecoderStats )toggleMps (){_ee ._be [_ee ._cbg ]^=1};func (_bcg *Decoder )decodeIntBit (_eb *DecoderStats )(int ,error ){_eb .SetIndex (int32 (_bcg ._db ));_ed ,_abb :=_bcg .DecodeBit (_eb );if _abb !=nil {_ff .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_abb );return _ed ,_abb ;};if _bcg ._db < 256{_bcg ._db =((_bcg ._db <<uint64 (1))|int64 (_ed ))&0x1ff;}else {_bcg ._db =(((_bcg ._db <<uint64 (1)|int64 (_ed ))&511)|256)&0x1ff;};return _ed ,nil ;};