//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_aa "errors";_gf "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_b "math";_db "strings";);func (_ae *EncodedTable )RootNode ()*InternalNode {return _ae ._bd };func (_eea *InternalNode )pad (_bfbe *_db .Builder ){for _ebb :=int32 (0);_ebb < _eea ._eg ;_ebb ++{_bfbe .WriteString ("\u0020\u0020\u0020");};};func _edd (_ada ,_dgb int32 )string {var _fed int32 ;_cc :=make ([]rune ,_dgb );for _gdc :=int32 (1);_gdc <=_dgb ;_gdc ++{_fed =_ada >>uint (_dgb -_gdc )&1;if _fed !=0{_cc [_gdc -1]='1';}else {_cc [_gdc -1]='0';};};return string (_cc );};type ValueNode struct{_edc int32 ;_fca int32 ;_df bool ;};func (_ggg *OutOfBandNode )Decode (r _a .StreamReader )(int64 ,error ){return 0,_g .ErrOOB };func (_ee *EncodedTable )parseTable ()error {var (_ec []*Code ;_fc ,_edf ,_fe int32 ;_ce uint64 ;_aab error ;);_be :=_ee .StreamReader ();_bb :=_ee .HtLow ();for _bb < _ee .HtHigh (){_ce ,_aab =_be .ReadBits (byte (_ee .HtPS ()));if _aab !=nil {return _aab ;};_fc =int32 (_ce );_ce ,_aab =_be .ReadBits (byte (_ee .HtRS ()));if _aab !=nil {return _aab ;};_edf =int32 (_ce );_ec =append (_ec ,NewCode (_fc ,_edf ,_fe ,false ));_bb +=1<<uint (_edf );};_ce ,_aab =_be .ReadBits (byte (_ee .HtPS ()));if _aab !=nil {return _aab ;};_fc =int32 (_ce );_edf =32;_fe =_ee .HtLow ()-1;_ec =append (_ec ,NewCode (_fc ,_edf ,_fe ,true ));_ce ,_aab =_be .ReadBits (byte (_ee .HtPS ()));if _aab !=nil {return _aab ;};_fc =int32 (_ce );_edf =32;_fe =_ee .HtHigh ();_ec =append (_ec ,NewCode (_fc ,_edf ,_fe ,false ));if _ee .HtOOB ()==1{_ce ,_aab =_be .ReadBits (byte (_ee .HtPS ()));if _aab !=nil {return _aab ;};_fc =int32 (_ce );_ec =append (_ec ,NewCode (_fc ,-1,-1,false ));};if _aab =_ee .InitTree (_ec );_aab !=nil {return _aab ;};return nil ;};type OutOfBandNode struct{};func (_bg *FixedSizeTable )InitTree (codeTable []*Code )error {_fff (codeTable );for _ ,_cec :=range codeTable {_cb :=_bg ._gg .append (_cec );if _cb !=nil {return _cb ;};};return nil ;};type Code struct{_fbc int32 ;_ced int32 ;_ceca int32 ;_bdbe bool ;_ggb int32 ;};type Node interface{Decode (_aae _a .StreamReader )(int64 ,error );String ()string ;};func _eef (_ab *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_eec *StandardTable )InitTree (codeTable []*Code )error {_fff (codeTable );for _ ,_ged :=range codeTable {if _gggd :=_eec ._aba .append (_ged );_gggd !=nil {return _gggd ;};};return nil ;};func (_dbd *InternalNode )Decode (r _a .StreamReader )(int64 ,error ){_cf ,_ggf :=r .ReadBit ();if _ggf !=nil {return 0,_ggf ;};if _cf ==0{return _dbd ._eefa .Decode (r );};return _dbd ._gd .Decode (r );};var _ Node =&ValueNode {};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_a .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_bfd *EncodedTable )Decode (r _a .StreamReader )(int64 ,error ){return _bfd ._bd .Decode (r )};type FixedSizeTable struct{_gg *InternalNode };func (_bfe *StandardTable )Decode (r _a .StreamReader )(int64 ,error ){return _bfe ._aba .Decode (r )};func _dc (_fb int32 )*InternalNode {return &InternalNode {_eg :_fb }};func _edfe (_fbf ,_cbc int32 )int32 {if _fbf > _cbc {return _fbf ;};return _cbc ;};func (_dba *FixedSizeTable )String ()string {return _dba ._gg .String ()+"\u000a"};func (_fg *FixedSizeTable )Decode (r _a .StreamReader )(int64 ,error ){return _fg ._gg .Decode (r )};func _fff (_ea []*Code ){var _bdd int32 ;for _ ,_dcg :=range _ea {_bdd =_edfe (_bdd ,_dcg ._fbc );};_ba :=make ([]int32 ,_bdd +1);for _ ,_eccd :=range _ea {_ba [_eccd ._fbc ]++;};var _ef int32 ;_baa :=make ([]int32 ,len (_ba )+1);_ba [0]=0;for _fec :=int32 (1);_fec <=int32 (len (_ba ));_fec ++{_baa [_fec ]=(_baa [_fec -1]+(_ba [_fec -1]))<<1;_ef =_baa [_fec ];for _ ,_gdf :=range _ea {if _gdf ._fbc ==_fec {_gdf ._ggb =_ef ;_ef ++;};};};};var _ Node =&InternalNode {};var _ Tabler =&EncodedTable {};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_cdf ){return nil ,_aa .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ad :=_cdf [number -1];if _ad ==nil {var _cbb error ;_ad ,_cbb =_cd (_aea [number -1]);if _cbb !=nil {return nil ,_cbb ;};_cdf [number -1]=_ad ;};return _ad ,nil ;};func (_dg *EncodedTable )InitTree (codeTable []*Code )error {_fff (codeTable );for _ ,_bff :=range codeTable {if _ed :=_dg ._bd .append (_bff );_ed !=nil {return _ed ;};};return nil ;};func (_gggg *ValueNode )String ()string {return _gf .Sprintf ("\u0025\u0064\u002f%\u0064",_gggg ._edc ,_gggg ._fca );};type StandardTable struct{_aba *InternalNode };var _aea =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func _cd (_gb [][]int32 )(*StandardTable ,error ){var _ddg []*Code ;for _ff :=0;_ff < len (_gb );_ff ++{_bda :=_gb [_ff ][0];_bbg :=_gb [_ff ][1];_dfd :=_gb [_ff ][2];var _fcf bool ;if len (_gb [_ff ])> 3{_fcf =true ;};_ddg =append (_ddg ,NewCode (_bda ,_bbg ,_dfd ,_fcf ));};_gdd :=&StandardTable {_aba :_dc (0)};if _da :=_gdd .InitTree (_ddg );_da !=nil {return nil ,_da ;};return _gdd ,nil ;};func (_eb *ValueNode )Decode (r _a .StreamReader )(int64 ,error ){_bdg ,_fd :=r .ReadBits (byte (_eb ._edc ));if _fd !=nil {return 0,_fd ;};if _eb ._df {_bdg =-_bdg ;};return int64 (_eb ._fca )+int64 (_bdg ),nil ;};func _bdb (_ge *Code )*ValueNode {return &ValueNode {_edc :_ge ._ced ,_fca :_ge ._ceca ,_df :_ge ._bdbe }};func (_fga *StandardTable )RootNode ()*InternalNode {return _fga ._aba };type Tabler interface{Decode (_feb _a .StreamReader )(int64 ,error );InitTree (_abd []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_fbc :prefixLength ,_ced :rangeLength ,_ceca :rangeLow ,_bdbe :isLowerRange ,_ggb :-1};};func (_ag *Code )String ()string {var _bga string ;if _ag ._ggb !=-1{_bga =_edd (_ag ._ggb ,_ag ._fbc );}else {_bga ="\u003f";};return _gf .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bga ,_ag ._fbc ,_ag ._ced ,_ag ._ceca );};var _cdf =make ([]Tabler ,len (_aea ));func (_cae *InternalNode )append (_bec *Code )(_dd error ){if _bec ._fbc ==0{return nil ;};_edg :=_bec ._fbc -1-_cae ._eg ;if _edg < 0{return _aa .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_ebe :=(_bec ._ggb >>uint (_edg ))&0x1;if _edg ==0{if _bec ._ced ==-1{if _ebe ==1{if _cae ._gd !=nil {return _gf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bec );};_cae ._gd =_eef (_bec );}else {if _cae ._eefa !=nil {return _gf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bec );};_cae ._eefa =_eef (_bec );};}else {if _ebe ==1{if _cae ._gd !=nil {return _gf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bec );};_cae ._gd =_bdb (_bec );}else {if _cae ._eefa !=nil {return _gf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bec );};_cae ._eefa =_bdb (_bec );};};}else {if _ebe ==1{if _cae ._gd ==nil {_cae ._gd =_dc (_cae ._eg +1);};if _dd =_cae ._gd .(*InternalNode ).append (_bec );_dd !=nil {return _dd ;};}else {if _cae ._eefa ==nil {_cae ._eefa =_dc (_cae ._eg +1);};if _dd =_cae ._eefa .(*InternalNode ).append (_bec );_dd !=nil {return _dd ;};};};return nil ;};var _ Node =&OutOfBandNode {};func (_aac *InternalNode )String ()string {_ca :=&_db .Builder {};_ca .WriteString ("\u000a");_aac .pad (_ca );_ca .WriteString ("\u0030\u003a\u0020");_ca .WriteString (_aac ._eefa .String ()+"\u000a");_aac .pad (_ca );_ca .WriteString ("\u0031\u003a\u0020");_ca .WriteString (_aac ._gd .String ()+"\u000a");return _ca .String ();};type InternalNode struct{_eg int32 ;_eefa Node ;_gd Node ;};func (_fcd *OutOfBandNode )String ()string {return _gf .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_b .MaxInt64 ));};func (_fgg *FixedSizeTable )RootNode ()*InternalNode {return _fgg ._gg };type EncodedTable struct{BasicTabler ;_bd *InternalNode ;};func (_bed *StandardTable )String ()string {return _bed ._aba .String ()+"\u000a"};func (_c *EncodedTable )String ()string {return _c ._bd .String ()+"\u000a"};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_f :=&EncodedTable {_bd :&InternalNode {},BasicTabler :table };if _aaa :=_f .parseTable ();_aaa !=nil {return nil ,_aaa ;};return _f ,nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_fa :=&FixedSizeTable {_gg :&InternalNode {}};if _ecc :=_fa .InitTree (codeTable );_ecc !=nil {return nil ,_ecc ;};return _fa ,nil ;};