//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_g "bufio";_cg "bytes";_e "encoding/hex";_c "errors";_ae "fmt";_ec "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/core";_cf "github.com/unidoc/unipdf/v3/internal/imageutil";_gf "github.com/unidoc/unipdf/v3/internal/transform";_ce "github.com/unidoc/unipdf/v3/model";_bg "image/color";_d "image/jpeg";_ed "io";_a "math";_ca "strconv";);

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_efg *ContentCreator )Add_Tstar ()*ContentCreator {_ebfa :=ContentStreamOperation {};_ebfa .Operand ="\u0054\u002a";_efg ._ea =append (_efg ._ea ,&_ebfa );return _efg ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ad *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_cca :=ContentStreamOperation {};_cca .Operand ="\u0063\u006d";_cca .Params =_gfagb ([]float64 {a ,b ,c ,d ,e ,f });_ad ._ea =append (_ad ._ea ,&_cca );return _ad ;};func (_ef *ContentStreamOperations )isWrapped ()bool {if len (*_ef )< 2{return false ;};_cb :=0;for _ ,_gfa :=range *_ef {if _gfa .Operand =="\u0071"{_cb ++;}else if _gfa .Operand =="\u0051"{_cb --;}else {if _cb < 1{return false ;};};};return _cb ==0;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_agb *ContentCreator )Add_b ()*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0062";_agb ._ea =append (_agb ._ea ,&_dga );return _agb ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cgac *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_agd :=ContentStreamOperation {};_agd .Operand ="\u0054\u0077";_agd .Params =_gfagb ([]float64 {wordSpace });_cgac ._ea =append (_cgac ._ea ,&_agd );return _cgac ;};func (_cafb *ContentStreamProcessor )handleCommand_cs (_baef *ContentStreamOperation ,_acd *_ce .PdfPageResources )error {if len (_baef .Params )< 1{_ec .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _c .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_baef .Params )> 1{_ec .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _c .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dba ,_gcgf :=_baef .Params [0].(*_f .PdfObjectName );if !_gcgf {_ec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_efbdf ,_adfe :=_cafb .getColorspace (string (*_dba ),_acd );if _adfe !=nil {return _adfe ;};_cafb ._gea .ColorspaceNonStroking =_efbdf ;_bcdf ,_adfe :=_cafb .getInitialColor (_efbdf );if _adfe !=nil {return _adfe ;};_cafb ._gea .ColorNonStroking =_bcdf ;return nil ;};func _cega (_gdcf []int64 )[]_f .PdfObject {var _fcd []_f .PdfObject ;for _ ,_faee :=range _gdcf {_fcd =append (_fcd ,_f .MakeInteger (_faee ));};return _fcd ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bae *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_bcd :=ContentStreamOperation {};_bcd .Operand ="\u0054\u007a";_bcd .Params =_gfagb ([]float64 {scale });_bae ._ea =append (_bae ._ea ,&_bcd );return _bae ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_gdc *ContentCreator )Add_EMC ()*ContentCreator {_ecdg :=ContentStreamOperation {};_ecdg .Operand ="\u0045\u004d\u0043";_gdc ._ea =append (_gdc ._ea ,&_ecdg );return _gdc ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gad *ContentCreator )Add_s ()*ContentCreator {_bdca :=ContentStreamOperation {};_bdca .Operand ="\u0073";_gad ._ea =append (_gad ._ea ,&_bdca );return _gad ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_gdg *ContentCreator )Add_ET ()*ContentCreator {_bag :=ContentStreamOperation {};_bag .Operand ="\u0045\u0054";_gdg ._ea =append (_gdg ._ea ,&_bag );return _gdg ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ddd *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_eed :=ContentStreamOperation {};_eed .Operand ="\u004d";_eed .Params =_gfagb ([]float64 {miterlimit });_ddd ._ea =append (_ddd ._ea ,&_eed );return _ddd ;};func (_eee *ContentStreamParser )skipComments ()error {if _ ,_bgc :=_eee .skipSpaces ();_bgc !=nil {return _bgc ;};_cbb :=true ;for {_cfcf ,_bgfc :=_eee ._baea .Peek (1);if _bgfc !=nil {_ec .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bgfc .Error ());return _bgfc ;};if _cbb &&_cfcf [0]!='%'{return nil ;};_cbb =false ;if (_cfcf [0]!='\r')&&(_cfcf [0]!='\n'){_eee ._baea .ReadByte ();}else {break ;};};return _eee .skipComments ();};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_f .PdfObject ;Operand string ;};func (_cdea *ContentStreamParser )parseHexString ()(*_f .PdfObjectString ,error ){_cdea ._baea .ReadByte ();_ccce :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _gagab []byte ;for {_cdea .skipSpaces ();_ebba ,_fbde :=_cdea ._baea .Peek (1);if _fbde !=nil {return _f .MakeString (""),_fbde ;};if _ebba [0]=='>'{_cdea ._baea .ReadByte ();break ;};_ecfd ,_ :=_cdea ._baea .ReadByte ();if _cg .IndexByte (_ccce ,_ecfd )>=0{_gagab =append (_gagab ,_ecfd );};};if len (_gagab )%2==1{_gagab =append (_gagab ,'0');};_aba ,_ :=_e .DecodeString (string (_gagab ));return _f .MakeHexString (string (_aba )),nil ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_geg *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_ccg :=ContentStreamOperation {};_ccg .Operand ="\u006d";_ccg .Params =_gfagb ([]float64 {x ,y });_geg ._ea =append (_geg ._ea ,&_ccg );return _geg ;};func _cebg (_bcdg string )bool {_ ,_gagc :=_dfbe [_bcdg ];return _gagc };

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cgf *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_fce :=ContentStreamOperation {};_fce .Operand ="\u0054\u0064";_fce .Params =_gfagb ([]float64 {tx ,ty });_cgf ._ea =append (_cgf ._ea ,&_fce );return _cgf ;};func (_gcg *ContentStreamParser )parseNumber ()(_f .PdfObject ,error ){return _f .ParseNumber (_gcg ._baea );};func _gfagb (_cbfb []float64 )[]_f .PdfObject {var _bgac []_f .PdfObject ;for _ ,_dea :=range _cbfb {_bgac =append (_bgac ,_f .MakeFloat (_dea ));};return _bgac ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_cga :=&ContentCreator {};_cga ._ea =ContentStreamOperations {};return _cga ;};func (_dbcd *ContentStreamParser )parseString ()(*_f .PdfObjectString ,error ){_dbcd ._baea .ReadByte ();var _bcdb []byte ;_gba :=1;for {_cgfa ,_dbgg :=_dbcd ._baea .Peek (1);if _dbgg !=nil {return _f .MakeString (string (_bcdb )),_dbgg ;};if _cgfa [0]=='\\'{_dbcd ._baea .ReadByte ();_cdg ,_acc :=_dbcd ._baea .ReadByte ();if _acc !=nil {return _f .MakeString (string (_bcdb )),_acc ;};if _f .IsOctalDigit (_cdg ){_ecdge ,_cdafd :=_dbcd ._baea .Peek (2);if _cdafd !=nil {return _f .MakeString (string (_bcdb )),_cdafd ;};var _bdac []byte ;_bdac =append (_bdac ,_cdg );for _ ,_fba :=range _ecdge {if _f .IsOctalDigit (_fba ){_bdac =append (_bdac ,_fba );}else {break ;};};_dbcd ._baea .Discard (len (_bdac )-1);_ec .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bdac );_ffe ,_cdafd :=_ca .ParseUint (string (_bdac ),8,32);if _cdafd !=nil {return _f .MakeString (string (_bcdb )),_cdafd ;};_bcdb =append (_bcdb ,byte (_ffe ));continue ;};switch _cdg {case 'n':_bcdb =append (_bcdb ,'\n');case 'r':_bcdb =append (_bcdb ,'\r');case 't':_bcdb =append (_bcdb ,'\t');case 'b':_bcdb =append (_bcdb ,'\b');case 'f':_bcdb =append (_bcdb ,'\f');case '(':_bcdb =append (_bcdb ,'(');case ')':_bcdb =append (_bcdb ,')');case '\\':_bcdb =append (_bcdb ,'\\');};continue ;}else if _cgfa [0]=='('{_gba ++;}else if _cgfa [0]==')'{_gba --;if _gba ==0{_dbcd ._baea .ReadByte ();break ;};};_bbf ,_ :=_dbcd ._baea .ReadByte ();_bcdb =append (_bcdb ,_bbf );};return _f .MakeString (string (_bcdb )),nil ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ffb *ContentCreator )Add_scn_pattern (name _f .PdfObjectName ,c ...float64 )*ContentCreator {_dbc :=ContentStreamOperation {};_dbc .Operand ="\u0073\u0063\u006e";_dbc .Params =_gfagb (c );_dbc .Params =append (_dbc .Params ,_f .MakeName (string (name )));_ffb ._ea =append (_ffb ._ea ,&_dbc );return _ffb ;};func _efd (_cfecd []_f .PdfObjectString )[]_f .PdfObject {var _gcde []_f .PdfObject ;for _ ,_bbag :=range _cfecd {_gcde =append (_gcde ,_f .MakeString (_bbag .Str ()));};return _gcde ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gag *ContentCreator )Add_SCN_pattern (name _f .PdfObjectName ,c ...float64 )*ContentCreator {_bfbc :=ContentStreamOperation {};_bfbc .Operand ="\u0053\u0043\u004e";_bfbc .Params =_gfagb (c );_bfbc .Params =append (_bfbc .Params ,_f .MakeName (string (name )));_gag ._ea =append (_gag ._ea ,&_bfbc );return _gag ;};func (_gbe *ContentStreamInlineImage )String ()string {_gbea :=_ae .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_gbe ._badfe ));if _gbe .BitsPerComponent !=nil {_gbea +="\u002d\u0020\u0042\u0050\u0043\u0020"+_gbe .BitsPerComponent .WriteString ()+"\u000a";};if _gbe .ColorSpace !=nil {_gbea +="\u002d\u0020\u0043S\u0020"+_gbe .ColorSpace .WriteString ()+"\u000a";};if _gbe .Decode !=nil {_gbea +="\u002d\u0020\u0044\u0020"+_gbe .Decode .WriteString ()+"\u000a";};if _gbe .DecodeParms !=nil {_gbea +="\u002d\u0020\u0044P\u0020"+_gbe .DecodeParms .WriteString ()+"\u000a";};if _gbe .Filter !=nil {_gbea +="\u002d\u0020\u0046\u0020"+_gbe .Filter .WriteString ()+"\u000a";};if _gbe .Height !=nil {_gbea +="\u002d\u0020\u0048\u0020"+_gbe .Height .WriteString ()+"\u000a";};if _gbe .ImageMask !=nil {_gbea +="\u002d\u0020\u0049M\u0020"+_gbe .ImageMask .WriteString ()+"\u000a";};if _gbe .Intent !=nil {_gbea +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_gbe .Intent .WriteString ()+"\u000a";};if _gbe .Interpolate !=nil {_gbea +="\u002d\u0020\u0049\u0020"+_gbe .Interpolate .WriteString ()+"\u000a";};if _gbe .Width !=nil {_gbea +="\u002d\u0020\u0057\u0020"+_gbe .Width .WriteString ()+"\u000a";};return _gbea ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_ab *ContentStreamParser )ExtractText ()(string ,error ){_gc ,_bc :=_ab .Parse ();if _bc !=nil {return "",_bc ;};_fa :=false ;_bdb ,_ac :=float64 (-1),float64 (-1);_cead :="";for _ ,_dc :=range *_gc {if _dc .Operand =="\u0042\u0054"{_fa =true ;}else if _dc .Operand =="\u0045\u0054"{_fa =false ;};if _dc .Operand =="\u0054\u0064"||_dc .Operand =="\u0054\u0044"||_dc .Operand =="\u0054\u002a"{_cead +="\u000a";};if _dc .Operand =="\u0054\u006d"{if len (_dc .Params )!=6{continue ;};_aed ,_ge :=_dc .Params [4].(*_f .PdfObjectFloat );if !_ge {_cac ,_abf :=_dc .Params [4].(*_f .PdfObjectInteger );if !_abf {continue ;};_aed =_f .MakeFloat (float64 (*_cac ));};_ee ,_ge :=_dc .Params [5].(*_f .PdfObjectFloat );if !_ge {_ga ,_gb :=_dc .Params [5].(*_f .PdfObjectInteger );if !_gb {continue ;};_ee =_f .MakeFloat (float64 (*_ga ));};if _ac ==-1{_ac =float64 (*_ee );}else if _ac > float64 (*_ee ){_cead +="\u000a";_bdb =float64 (*_aed );_ac =float64 (*_ee );continue ;};if _bdb ==-1{_bdb =float64 (*_aed );}else if _bdb < float64 (*_aed ){_cead +="\u0009";_bdb =float64 (*_aed );};};if _fa &&_dc .Operand =="\u0054\u004a"{if len (_dc .Params )< 1{continue ;};_ebf ,_cge :=_dc .Params [0].(*_f .PdfObjectArray );if !_cge {return "",_ae .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_dc .Params [0]);};for _ ,_bdc :=range _ebf .Elements (){switch _de :=_bdc .(type ){case *_f .PdfObjectString :_cead +=_de .Str ();case *_f .PdfObjectFloat :if *_de < -100{_cead +="\u0020";};case *_f .PdfObjectInteger :if *_de < -100{_cead +="\u0020";};};};}else if _fa &&_dc .Operand =="\u0054\u006a"{if len (_dc .Params )< 1{continue ;};_ced ,_fd :=_dc .Params [0].(*_f .PdfObjectString );if !_fd {return "",_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_dc .Params [0]);};_cead +=_ced .Str ();};};return _cead ,nil ;};func (_baeb *ContentStreamInlineImage )toImageBase (_cfe *_ce .PdfPageResources )(*_cf .ImageBase ,error ){if _baeb ._caab !=nil {return _baeb ._caab ,nil ;};_eeff :=_cf .ImageBase {};if _baeb .Height ==nil {return nil ,_c .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_fbd ,_gfab :=_baeb .Height .(*_f .PdfObjectInteger );if !_gfab {return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_eeff .Height =int (*_fbd );if _baeb .Width ==nil {return nil ,_c .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_deee ,_gfab :=_baeb .Width .(*_f .PdfObjectInteger );if !_gfab {return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_eeff .Width =int (*_deee );_gadb ,_ceb :=_baeb .IsMask ();if _ceb !=nil {return nil ,_ceb ;};if _gadb {_eeff .BitsPerComponent =1;_eeff .ColorComponents =1;}else {if _baeb .BitsPerComponent ==nil {_ec .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_eeff .BitsPerComponent =8;}else {_dgdc ,_eba :=_baeb .BitsPerComponent .(*_f .PdfObjectInteger );if !_eba {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_baeb .BitsPerComponent );return nil ,_c .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_eeff .BitsPerComponent =int (*_dgdc );};if _baeb .ColorSpace !=nil {_beg ,_ecae :=_baeb .GetColorSpace (_cfe );if _ecae !=nil {return nil ,_ecae ;};_eeff .ColorComponents =_beg .GetNumComponents ();}else {_ec .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_eeff .ColorComponents =1;};};if _ebbg ,_dbd :=_f .GetArray (_baeb .Decode );_dbd {_eeff .Decode ,_ceb =_ebbg .ToFloat64Array ();if _ceb !=nil {return nil ,_ceb ;};};_baeb ._caab =&_eeff ;return _baeb ._caab ,nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_feed GraphicStateStack ;_beb []*ContentStreamOperation ;_gea GraphicsState ;_cccc []handlerEntry ;_efbcg int ;};func (_fade *ContentStreamParser )parseArray ()(*_f .PdfObjectArray ,error ){_gef :=_f .MakeArray ();_fade ._baea .ReadByte ();for {_fade .skipSpaces ();_bcad ,_ccb :=_fade ._baea .Peek (1);if _ccb !=nil {return _gef ,_ccb ;};if _bcad [0]==']'{_fade ._baea .ReadByte ();break ;};_fbdd ,_ ,_ccb :=_fade .parseObject ();if _ccb !=nil {return _gef ,_ccb ;};_gef .Append (_fbdd );};return _gef ,nil ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gbg *ContentCreator )Add_h ()*ContentCreator {_afd :=ContentStreamOperation {};_afd .Operand ="\u0068";_gbg ._ea =append (_gbg ._ea ,&_afd );return _gbg ;};

// WriteString outputs the object as it is to be written to file.
func (_ebb *ContentStreamInlineImage )WriteString ()string {var _gebg _cg .Buffer ;_afc :="";if _ebb .BitsPerComponent !=nil {_afc +="\u002f\u0042\u0050C\u0020"+_ebb .BitsPerComponent .WriteString ()+"\u000a";};if _ebb .ColorSpace !=nil {_afc +="\u002f\u0043\u0053\u0020"+_ebb .ColorSpace .WriteString ()+"\u000a";};if _ebb .Decode !=nil {_afc +="\u002f\u0044\u0020"+_ebb .Decode .WriteString ()+"\u000a";};if _ebb .DecodeParms !=nil {_afc +="\u002f\u0044\u0050\u0020"+_ebb .DecodeParms .WriteString ()+"\u000a";};if _ebb .Filter !=nil {_afc +="\u002f\u0046\u0020"+_ebb .Filter .WriteString ()+"\u000a";};if _ebb .Height !=nil {_afc +="\u002f\u0048\u0020"+_ebb .Height .WriteString ()+"\u000a";};if _ebb .ImageMask !=nil {_afc +="\u002f\u0049\u004d\u0020"+_ebb .ImageMask .WriteString ()+"\u000a";};if _ebb .Intent !=nil {_afc +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_ebb .Intent .WriteString ()+"\u000a";};if _ebb .Interpolate !=nil {_afc +="\u002f\u0049\u0020"+_ebb .Interpolate .WriteString ()+"\u000a";};if _ebb .Width !=nil {_afc +="\u002f\u0057\u0020"+_ebb .Width .WriteString ()+"\u000a";};_gebg .WriteString (_afc );_gebg .WriteString ("\u0049\u0044\u0020");_gebg .Write (_ebb ._badfe );_gebg .WriteString ("\u000a\u0045\u0049\u000a");return _gebg .String ();};

// String is same as Bytes() except returns as a string for convenience.
func (_gaa *ContentCreator )String ()string {return string (_gaa ._ea .Bytes ())};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bdcf *ContentCreator )Add_quote (textstr _f .PdfObjectString )*ContentCreator {_dgd :=ContentStreamOperation {};_dgd .Operand ="\u0027";_dgd .Params =_efd ([]_f .PdfObjectString {textstr });_bdcf ._ea =append (_bdcf ._ea ,&_dgd );return _bdcf ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbd *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_cddb :=ContentStreamOperation {};_cddb .Operand ="\u0052\u0047";_cddb .Params =_gfagb ([]float64 {r ,g ,b });_bbd ._ea =append (_bbd ._ea ,&_cddb );return _bbd ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_agg *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_aeg :=ContentStreamOperation {};_aeg .Operand ="\u0054\u0063";_aeg .Params =_gfagb ([]float64 {charSpace });_agg ._ea =append (_agg ._ea ,&_aeg );return _agg ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aca *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_cbd :=ContentStreamOperation {};_cbd .Operand ="\u006b";_cbd .Params =_gfagb ([]float64 {c ,m ,y ,k });_aca ._ea =append (_aca ._ea ,&_cbd );return _aca ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dfde *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bbdd :=ContentStreamOperation {};_bbdd .Operand ="\u0054\u006d";_bbdd .Params =_gfagb ([]float64 {a ,b ,c ,d ,e ,f });_dfde ._ea =append (_dfde ._ea ,&_bbdd );return _dfde ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_add *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_cbc :=ContentStreamOperation {};_cbc .Operand ="\u0076";_cbc .Params =_gfagb ([]float64 {x2 ,y2 ,x3 ,y3 });_add ._ea =append (_add ._ea ,&_cbc );return _add ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_bedc *ContentStreamInlineImage )ToImage (resources *_ce .PdfPageResources )(*_ce .Image ,error ){_fdc ,_feg :=_bedc .toImageBase (resources );if _feg !=nil {return nil ,_feg ;};_dacc ,_feg :=_fbegb (_bedc );if _feg !=nil {return nil ,_feg ;};_ec .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_dacc ,_dacc );_ec .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_bedc );_abba ,_feg :=_dacc .DecodeBytes (_bedc ._badfe );if _feg !=nil {return nil ,_feg ;};_fgfag :=&_ce .Image {Width :int64 (_fdc .Width ),Height :int64 (_fdc .Height ),BitsPerComponent :int64 (_fdc .BitsPerComponent ),ColorComponents :_fdc .ColorComponents ,Data :_abba };if len (_fdc .Decode )> 0{for _bfe :=0;_bfe < len (_fdc .Decode );_bfe ++{_fdc .Decode [_bfe ]*=float64 ((int (1)<<uint (_fdc .BitsPerComponent ))-1);};_fgfag .SetDecode (_fdc .Decode );};return _fgfag ,nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fda *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cbf :=ContentStreamOperation {};_cbf .Operand ="\u0054\u0072";_cbf .Params =_cega ([]int64 {render });_fda ._ea =append (_fda ._ea ,&_cbf );return _fda ;};func (_abffc *ContentStreamParser )parseNull ()(_f .PdfObjectNull ,error ){_ ,_agec :=_abffc ._baea .Discard (4);return _f .PdfObjectNull {},_agec ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_cdf *ContentCreator )Add_BMC (tag _f .PdfObjectName )*ContentCreator {_dddf :=ContentStreamOperation {};_dddf .Operand ="\u0042\u004d\u0043";_dddf .Params =_gccb ([]_f .PdfObjectName {tag });_cdf ._ea =append (_cdf ._ea ,&_dddf );return _cdf ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gd *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_bgd :=ContentStreamOperation {};_bgd .Operand ="\u0077";_bgd .Params =_gfagb ([]float64 {lineWidth });_gd ._ea =append (_gd ._ea ,&_bgd );return _gd ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ede *ContentCreator )Add_Q ()*ContentCreator {_bdd :=ContentStreamOperation {};_bdd .Operand ="\u0051";_ede ._ea =append (_ede ._ea ,&_bdd );return _ede ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_cfcg *ContentStreamInlineImage )IsMask ()(bool ,error ){if _cfcg .ImageMask !=nil {_ggb ,_bbae :=_cfcg .ImageMask .(*_f .PdfObjectBool );if !_bbae {_ec .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_c .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_ggb ),nil ;};return false ,nil ;};func (_bef *ContentStreamProcessor )handleCommand_CS (_gcec *ContentStreamOperation ,_gefe *_ce .PdfPageResources )error {if len (_gcec .Params )< 1{_ec .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _c .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gcec .Params )> 1{_ec .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _c .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fddf ,_beae :=_gcec .Params [0].(*_f .PdfObjectName );if !_beae {_ec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fge ,_dgbf :=_bef .getColorspace (string (*_fddf ),_gefe );if _dgbf !=nil {return _dgbf ;};_bef ._gea .ColorspaceStroking =_fge ;_bde ,_dgbf :=_bef .getInitialColor (_fge );if _dgbf !=nil {return _dgbf ;};_bef ._gea .ColorStroking =_bde ;return nil ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_edd *ContentCreator )Add_TL (leading float64 )*ContentCreator {_bea :=ContentStreamOperation {};_bea .Operand ="\u0054\u004c";_bea .Params =_gfagb ([]float64 {leading });_edd ._ea =append (_edd ._ea ,&_bea );return _edd ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_fbg *ContentCreator )Add_W ()*ContentCreator {_fad :=ContentStreamOperation {};_fad .Operand ="\u0057";_fbg ._ea =append (_fbg ._ea ,&_fad );return _fbg ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ea ContentStreamOperations };func (_acbd *ContentStreamProcessor )handleCommand_SC (_aga *ContentStreamOperation ,_cdeb *_ce .PdfPageResources )error {_bdde :=_acbd ._gea .ColorspaceStroking ;if len (_aga .Params )!=_bdde .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aga .Params ),_bdde );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_faag ,_acgb :=_bdde .ColorFromPdfObjects (_aga .Params );if _acgb !=nil {return _acgb ;};_acbd ._gea .ColorStroking =_faag ;return nil ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ce .Image ,encoder _f .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_f .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_fada :=ContentStreamInlineImage {};if img .ColorComponents ==1{_fada .ColorSpace =_f .MakeName ("\u0047");}else if img .ColorComponents ==3{_fada .ColorSpace =_f .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_fada .ColorSpace =_f .MakeName ("\u0043\u004d\u0059\u004b");}else {_ec .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_fada .BitsPerComponent =_f .MakeInteger (img .BitsPerComponent );_fada .Width =_f .MakeInteger (img .Width );_fada .Height =_f .MakeInteger (img .Height );_cbe ,_gfafe :=encoder .EncodeBytes (img .Data );if _gfafe !=nil {return nil ,_gfafe ;};_fada ._badfe =_cbe ;_dfdf :=encoder .GetFilterName ();if _dfdf !=_f .StreamEncodingFilterNameRaw {_fada .Filter =_f .MakeName (_dfdf );};return &_fada ,nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cda *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_bgf :=ContentStreamOperation {};_bgf .Operand ="\u0054\u0044";_bgf .Params =_gfagb ([]float64 {tx ,ty });_cda ._ea =append (_cda ._ea ,&_bgf );return _cda ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_cce *ContentCreator )Wrap (){_cce ._ea .WrapIfNeeded ()};

// Operations returns the list of operations.
func (_dec *ContentCreator )Operations ()*ContentStreamOperations {return &_dec ._ea };func (_dbbc *ContentStreamParser )parseObject ()(_cdc _f .PdfObject ,_aea bool ,_bfc error ){_dbbc .skipSpaces ();for {_caf ,_dgf :=_dbbc ._baea .Peek (2);if _dgf !=nil {return nil ,false ,_dgf ;};_ec .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_caf ));if _caf [0]=='%'{_dbbc .skipComments ();continue ;}else if _caf [0]=='/'{_dbdg ,_efbc :=_dbbc .parseName ();_ec .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_dbdg );return &_dbdg ,false ,_efbc ;}else if _caf [0]=='('{_ec .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_gdfe ,_abce :=_dbbc .parseString ();return _gdfe ,false ,_abce ;}else if _caf [0]=='<'&&_caf [1]!='<'{_ec .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_ebfad ,_fcba :=_dbbc .parseHexString ();return _ebfad ,false ,_fcba ;}else if _caf [0]=='['{_ec .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_fbdeg ,_gefc :=_dbbc .parseArray ();return _fbdeg ,false ,_gefc ;}else if _f .IsFloatDigit (_caf [0])||(_caf [0]=='-'&&_f .IsFloatDigit (_caf [1])){_ec .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_gada ,_cgec :=_dbbc .parseNumber ();return _gada ,false ,_cgec ;}else if _caf [0]=='<'&&_caf [1]=='<'{_cgbg ,_afeb :=_dbbc .parseDict ();return _cgbg ,false ,_afeb ;}else {_ec .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_caf ,_ =_dbbc ._baea .Peek (5);_cfec :=string (_caf );_ec .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_cfec );if (len (_cfec )> 3)&&(_cfec [:4]=="\u006e\u0075\u006c\u006c"){_edeb ,_aab :=_dbbc .parseNull ();return &_edeb ,false ,_aab ;}else if (len (_cfec )> 4)&&(_cfec [:5]=="\u0066\u0061\u006cs\u0065"){_agdcd ,_cbfe :=_dbbc .parseBool ();return &_agdcd ,false ,_cbfe ;}else if (len (_cfec )> 3)&&(_cfec [:4]=="\u0074\u0072\u0075\u0065"){_ecdb ,_egg :=_dbbc .parseBool ();return &_ecdb ,false ,_egg ;};_bddd ,_dca :=_dbbc .parseOperand ();if _dca !=nil {return _bddd ,false ,_dca ;};if len (_bddd .String ())< 1{return _bddd ,false ,ErrInvalidOperand ;};return _bddd ,true ,nil ;};};};

// AddOperand adds a specified operand.
func (_dad *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_dad ._ea =append (_dad ._ea ,&op );return _dad ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bf *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_egb :=ContentStreamOperation {};_egb .Operand ="\u006c";_egb .Params =_gfagb ([]float64 {x ,y });_bf ._ea =append (_bf ._ea ,&_egb );return _bf ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gfag *ContentCreator )Add_i (flatness float64 )*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u0069";_cba .Params =_gfagb ([]float64 {flatness });_gfag ._ea =append (_gfag ._ea ,&_cba );return _gfag ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eeg *ContentCreator )Add_f ()*ContentCreator {_edeg :=ContentStreamOperation {};_edeg .Operand ="\u0066";_eeg ._ea =append (_eeg ._ea ,&_edeg );return _eeg ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_abe *ContentStreamProcessor )Process (resources *_ce .PdfPageResources )error {_abe ._gea .ColorspaceStroking =_ce .NewPdfColorspaceDeviceGray ();_abe ._gea .ColorspaceNonStroking =_ce .NewPdfColorspaceDeviceGray ();_abe ._gea .ColorStroking =_ce .NewPdfColorDeviceGray (0);_abe ._gea .ColorNonStroking =_ce .NewPdfColorDeviceGray (0);_abe ._gea .CTM =_gf .IdentityMatrix ();for _ ,_eebc :=range _abe ._beb {var _cbbg error ;switch _eebc .Operand {case "\u0071":_abe ._feed .Push (_abe ._gea );case "\u0051":if len (_abe ._feed )==0{_ec .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_abe ._gea =_abe ._feed .Pop ();case "\u0043\u0053":_cbbg =_abe .handleCommand_CS (_eebc ,resources );case "\u0063\u0073":_cbbg =_abe .handleCommand_cs (_eebc ,resources );case "\u0053\u0043":_cbbg =_abe .handleCommand_SC (_eebc ,resources );case "\u0053\u0043\u004e":_cbbg =_abe .handleCommand_SCN (_eebc ,resources );case "\u0073\u0063":_cbbg =_abe .handleCommand_sc (_eebc ,resources );case "\u0073\u0063\u006e":_cbbg =_abe .handleCommand_scn (_eebc ,resources );case "\u0047":_cbbg =_abe .handleCommand_G (_eebc ,resources );case "\u0067":_cbbg =_abe .handleCommand_g (_eebc ,resources );case "\u0052\u0047":_cbbg =_abe .handleCommand_RG (_eebc ,resources );case "\u0072\u0067":_cbbg =_abe .handleCommand_rg (_eebc ,resources );case "\u004b":_cbbg =_abe .handleCommand_K (_eebc ,resources );case "\u006b":_cbbg =_abe .handleCommand_k (_eebc ,resources );case "\u0063\u006d":_cbbg =_abe .handleCommand_cm (_eebc ,resources );};if _cbbg !=nil {_ec .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_eebc .Operand ,_cbbg );_ec .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_eebc .Operand );return _cbbg ;};for _ ,_bee :=range _abe ._cccc {var _faad error ;if _bee .Condition .All (){_faad =_bee .Handler (_eebc ,_abe ._gea ,resources );}else if _bee .Condition .Operand ()&&_eebc .Operand ==_bee .Operand {_faad =_bee .Handler (_eebc ,_abe ._gea ,resources );};if _faad !=nil {_ec .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_faad );return _faad ;};};};return nil ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_fbed *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_cag :=ContentStreamInlineImage {};for {_fbed .skipSpaces ();_faeb ,_gde ,_ebd :=_fbed .parseObject ();if _ebd !=nil {return nil ,_ebd ;};if !_gde {_gcbe ,_efbe :=_f .GetName (_faeb );if !_efbe {_ec .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_faeb );return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_faeb );};_efe ,_abfg ,_bbe :=_fbed .parseObject ();if _bbe !=nil {return nil ,_bbe ;};if _abfg {return nil ,_ae .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_gcbe {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_cag .BitsPerComponent =_efe ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_cag .ColorSpace =_efe ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_cag .Decode =_efe ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_cag .DecodeParms =_efe ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_cag .Filter =_efe ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_cag .Height =_efe ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_cag .ImageMask =_efe ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_cag .Intent =_efe ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_cag .Interpolate =_efe ;case "\u0057","\u0057\u0069\u0064t\u0068":_cag .Width =_efe ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_ec .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_gcbe );default:return nil ,_ae .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_gcbe );};};if _gde {_cbcb ,_dagg :=_faeb .(*_f .PdfObjectString );if !_dagg {return nil ,_ae .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _cbcb .Str ()=="\u0045\u0049"{_ec .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_cag ,nil ;}else if _cbcb .Str ()=="\u0049\u0044"{_ec .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_dfbd ,_cgae :=_fbed ._baea .Peek (1);if _cgae !=nil {return nil ,_cgae ;};if _f .IsWhiteSpace (_dfbd [0]){_fbed ._baea .Discard (1);};_cag ._badfe =[]byte {};_eecb :=0;var _abd []byte ;for {_edc ,_ecg :=_fbed ._baea .ReadByte ();if _ecg !=nil {_ec .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_ecg ;};if _eecb ==0{if _f .IsWhiteSpace (_edc ){_abd =[]byte {};_abd =append (_abd ,_edc );_eecb =1;}else if _edc =='E'{_abd =append (_abd ,_edc );_eecb =2;}else {_cag ._badfe =append (_cag ._badfe ,_edc );};}else if _eecb ==1{_abd =append (_abd ,_edc );if _edc =='E'{_eecb =2;}else {_cag ._badfe =append (_cag ._badfe ,_abd ...);_abd =[]byte {};if _f .IsWhiteSpace (_edc ){_eecb =1;}else {_eecb =0;};};}else if _eecb ==2{_abd =append (_abd ,_edc );if _edc =='I'{_eecb =3;}else {_cag ._badfe =append (_cag ._badfe ,_abd ...);_abd =[]byte {};_eecb =0;};}else if _eecb ==3{_abd =append (_abd ,_edc );if _f .IsWhiteSpace (_edc ){_cdbf ,_gee :=_fbed ._baea .Peek (20);if _gee !=nil &&_gee !=_ed .EOF {return nil ,_gee ;};_dgg :=NewContentStreamParser (string (_cdbf ));_eagd :=true ;for _fgb :=0;_fgb < 3;_fgb ++{_gegc ,_fec ,_agc :=_dgg .parseObject ();if _agc !=nil {if _agc ==_ed .EOF {break ;};continue ;};if _fec &&!_cebg (_gegc .String ()){_eagd =false ;break ;};};if _eagd {if len (_cag ._badfe )> 100{_ec .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_cag ._badfe ),_cag ._badfe [:100]);}else {_ec .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_cag ._badfe ),_cag ._badfe );};return &_cag ,nil ;};};_cag ._badfe =append (_cag ._badfe ,_abd ...);_abd =[]byte {};_eecb =0;};};};};};};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_baea *_g .Reader };

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_fff *ContentStreamOperation ,_bga GraphicsState ,_aage *_ce .PdfPageResources )error ;

// Translate applies a simple x-y translation to the transformation matrix.
func (_fdd *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _fdd .Add_cm (1,0,0,1,tx ,ty );};func (_aaa *ContentStreamProcessor )handleCommand_rg (_abg *ContentStreamOperation ,_gbac *_ce .PdfPageResources )error {_ebeg :=_ce .NewPdfColorspaceDeviceRGB ();if len (_abg .Params )!=_ebeg .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_abg .Params ),_ebeg );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_agdb ,_debf :=_ebeg .ColorFromPdfObjects (_abg .Params );if _debf !=nil {return _debf ;};_aaa ._gea .ColorspaceNonStroking =_ebeg ;_aaa ._gea .ColorNonStroking =_agdb ;return nil ;};func (_fdcd *ContentStreamProcessor )handleCommand_g (_gdac *ContentStreamOperation ,_dbfb *_ce .PdfPageResources )error {_fafg :=_ce .NewPdfColorspaceDeviceGray ();if len (_gdac .Params )!=_fafg .GetNumComponents (){_ec .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gdac .Params ),_fafg );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gbgd ,_gfac :=_fafg .ColorFromPdfObjects (_gdac .Params );if _gfac !=nil {_ec .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fafg ,_gdac ,_gfac );return _gfac ;};_fdcd ._gea .ColorspaceNonStroking =_fafg ;_fdcd ._gea .ColorNonStroking =_gbgd ;return nil ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_gda *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _gda .CTM .Transform (x ,y );};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gfaf *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_bb :=ContentStreamOperation {};_bb .Operand ="\u0073\u0063\u006e";_bb .Params =_gfagb (c );_gfaf ._ea =append (_gfaf ._ea ,&_bb );return _gfaf ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_afa *ContentCreator )Add_f_starred ()*ContentCreator {_gcf :=ContentStreamOperation {};_gcf .Operand ="\u0066\u002a";_afa ._ea =append (_afa ._ea ,&_gcf );return _afa ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_ffc *GraphicStateStack )Pop ()GraphicsState {_fdfa :=(*_ffc )[len (*_ffc )-1];*_ffc =(*_ffc )[:len (*_ffc )-1];return _fdfa ;};func (_eage *ContentStreamProcessor )handleCommand_RG (_ecc *ContentStreamOperation ,_bfd *_ce .PdfPageResources )error {_efba :=_ce .NewPdfColorspaceDeviceRGB ();if len (_ecc .Params )!=_efba .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecc .Params ),_efba );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eaf ,_edad :=_efba .ColorFromPdfObjects (_ecc .Params );if _edad !=nil {return _edad ;};_eage ._gea .ColorspaceStroking =_efba ;_eage ._gea .ColorStroking =_eaf ;return nil ;};func (_bddb *ContentStreamProcessor )handleCommand_K (_cef *ContentStreamOperation ,_eded *_ce .PdfPageResources )error {_afea :=_ce .NewPdfColorspaceDeviceCMYK ();if len (_cef .Params )!=_afea .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cef .Params ),_afea );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_egc ,_dfgf :=_afea .ColorFromPdfObjects (_cef .Params );if _dfgf !=nil {return _dfgf ;};_bddb ._gea .ColorspaceStroking =_afea ;_bddb ._gea .ColorStroking =_egc ;return nil ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_dcc :=ContentStreamProcessor {};_dcc ._feed =GraphicStateStack {};_acge :=GraphicsState {};_dcc ._gea =_acge ;_dcc ._cccc =[]handlerEntry {};_dcc ._efbcg =0;_dcc ._beb =ops ;return &_dcc ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ff *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ff )==0{return _ff ;};if _ff .isWrapped (){return _ff ;};*_ff =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ff ...);_fb :=0;for _ ,_cea :=range *_ff {if _cea .Operand =="\u0071"{_fb ++;}else if _cea .Operand =="\u0051"{_fb --;};};for _fb > 0{*_ff =append (*_ff ,&ContentStreamOperation {Operand :"\u0051"});_fb --;};return _ff ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cgb *ContentCreator )Add_TJ (vals ..._f .PdfObject )*ContentCreator {_fbeg :=ContentStreamOperation {};_fbeg .Operand ="\u0054\u004a";_fbeg .Params =[]_f .PdfObject {_f .MakeArray (vals ...)};_cgb ._ea =append (_cgb ._ea ,&_fbeg );return _cgb ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fed *ContentCreator )Add_BT ()*ContentCreator {_bad :=ContentStreamOperation {};_bad .Operand ="\u0042\u0054";_fed ._ea =append (_fed ._ea ,&_bad );return _fed ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_abff *ContentCreator )Add_n ()*ContentCreator {_ba :=ContentStreamOperation {};_ba .Operand ="\u006e";_abff ._ea =append (_abff ._ea ,&_ba );return _abff ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_ecfb *ContentCreator )SetStrokingColor (color _ce .PdfColor )*ContentCreator {switch _gfcg :=color .(type ){case *_ce .PdfColorDeviceGray :_ecfb .Add_G (_gfcg .Val ());case *_ce .PdfColorDeviceRGB :_ecfb .Add_RG (_gfcg .R (),_gfcg .G (),_gfcg .B ());case *_ce .PdfColorDeviceCMYK :_ecfb .Add_K (_gfcg .C (),_gfcg .M (),_gfcg .Y (),_gfcg .K ());default:_ec .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_gfcg );};return _ecfb ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ggf *ContentCreator )Add_Tf (fontName _f .PdfObjectName ,fontSize float64 )*ContentCreator {_bge :=ContentStreamOperation {};_bge .Operand ="\u0054\u0066";_bge .Params =_gccb ([]_f .PdfObjectName {fontName });_bge .Params =append (_bge .Params ,_gfagb ([]float64 {fontSize })...);_ggf ._ea =append (_ggf ._ea ,&_bge );return _ggf ;};

// GetColorSpace returns the colorspace of the inline image.
func (_fee *ContentStreamInlineImage )GetColorSpace (resources *_ce .PdfPageResources )(_ce .PdfColorspace ,error ){if _fee .ColorSpace ==nil {_ec .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _ce .NewPdfColorspaceDeviceGray (),nil ;};if _cdaf ,_gaga :=_fee .ColorSpace .(*_f .PdfObjectArray );_gaga {return _ggbg (_cdaf );};_gfeg ,_beac :=_fee .ColorSpace .(*_f .PdfObjectName );if !_beac {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_fee .ColorSpace ,_fee .ColorSpace );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gfeg =="\u0047"||*_gfeg =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ce .NewPdfColorspaceDeviceGray (),nil ;}else if *_gfeg =="\u0052\u0047\u0042"||*_gfeg =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ce .NewPdfColorspaceDeviceRGB (),nil ;}else if *_gfeg =="\u0043\u004d\u0059\u004b"||*_gfeg =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ce .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_gfeg =="\u0049"||*_gfeg =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_c .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_ec .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_gfeg );return nil ,_c .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_dag ,_dda :=resources .GetColorspaceByName (*_gfeg );if !_dda {_ec .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_gfeg );return nil ,_c .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _dag ,nil ;};};

// Push pushes `gs` on the `gsStack`.
func (_dgdg *GraphicStateStack )Push (gs GraphicsState ){*_dgdg =append (*_dgdg ,gs )};func (_gege *ContentStreamParser )skipSpaces ()(int ,error ){_dgdcb :=0;for {_defa ,_gac :=_gege ._baea .Peek (1);if _gac !=nil {return 0,_gac ;};if _f .IsWhiteSpace (_defa [0]){_gege ._baea .ReadByte ();_dgdcb ++;}else {break ;};};return _dgdcb ,nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_debc *ContentCreator )Add_quotes (textstr _f .PdfObjectString ,aw ,ac float64 )*ContentCreator {_ecb :=ContentStreamOperation {};_ecb .Operand ="\u0022";_ecb .Params =_gfagb ([]float64 {aw ,ac });_ecb .Params =append (_ecb .Params ,_efd ([]_f .PdfObjectString {textstr })...);_debc ._ea =append (_debc ._ea ,&_ecb );return _debc ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fae *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_eeb :=ContentStreamOperation {};_eeb .Operand ="\u0072\u0065";_eeb .Params =_gfagb ([]float64 {x ,y ,width ,height });_fae ._ea =append (_fae ._ea ,&_eeb );return _fae ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_gade HandlerConditionEnum )Operand ()bool {return _gade ==HandlerConditionEnumOperand };func (_afb *ContentStreamProcessor )handleCommand_sc (_fgfb *ContentStreamOperation ,_fccd *_ce .PdfPageResources )error {_gcaa :=_afb ._gea .ColorspaceNonStroking ;if !_eabd (_gcaa ){if len (_fgfb .Params )!=_gcaa .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fgfb .Params ),_gcaa );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_aec ,_egaf :=_gcaa .ColorFromPdfObjects (_fgfb .Params );if _egaf !=nil {return _egaf ;};_afb ._gea .ColorNonStroking =_aec ;return nil ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dfcg *ContentCreator )Add_b_starred ()*ContentCreator {_dge :=ContentStreamOperation {};_dge .Operand ="\u0062\u002a";_dfcg ._ea =append (_dfcg ._ea ,&_dge );return _dfcg ;};func _ggbg (_cbdd _f .PdfObject )(_ce .PdfColorspace ,error ){_ffed ,_ffda :=_cbdd .(*_f .PdfObjectArray );if !_ffda {_ec .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_cbdd );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _ffed .Len ()!=4{_ec .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_ffed .Len ());return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gaf ,_ffda :=_ffed .Get (0).(*_f .PdfObjectName );if !_ffda {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_ffed );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gaf !="\u0049"&&*_gaf !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_ec .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_gaf );return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gaf ,_ffda =_ffed .Get (1).(*_f .PdfObjectName );if !_ffda {_ec .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_ffed );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gaf !="\u0047"&&*_gaf !="\u0052\u0047\u0042"&&*_gaf !="\u0043\u004d\u0059\u004b"&&*_gaf !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_gaf !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_gaf !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_ec .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_gaf );return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_afef :="";switch *_gaf {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_afef ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_afef ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_afef ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_bab :=_f .MakeArray (_f .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_f .MakeName (_afef ),_ffed .Get (2),_ffed .Get (3));return _ce .NewPdfColorspaceFromPdfObject (_bab );};func _acb (_geb *ContentStreamInlineImage ,_eca *_f .PdfObjectDictionary )(*_f .FlateEncoder ,error ){_badf :=_f .NewFlateEncoder ();if _geb ._caab !=nil {_badf .SetImage (_geb ._caab );};if _eca ==nil {_fdb :=_geb .DecodeParms ;if _fdb !=nil {_dgaa ,_ceg :=_f .GetDict (_fdb );if !_ceg {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_fdb );return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_eca =_dgaa ;};};if _eca ==nil {return _badf ,nil ;};_ec .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_eca .String ());_ded :=_eca .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ded ==nil {_ec .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_faf ,_eag :=_ded .(*_f .PdfObjectInteger );if !_eag {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ded );return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_badf .Predictor =int (*_faf );};_ded =_eca .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _ded !=nil {_acgf ,_abb :=_ded .(*_f .PdfObjectInteger );if !_abb {_ec .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_ae .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_badf .BitsPerComponent =int (*_acgf );};if _badf .Predictor > 1{_badf .Columns =1;_ded =_eca .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _ded !=nil {_fgf ,_deda :=_ded .(*_f .PdfObjectInteger );if !_deda {return nil ,_ae .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_badf .Columns =int (*_fgf );};_badf .Colors =1;_gfd :=_eca .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _gfd !=nil {_aa ,_debg :=_gfd .(*_f .PdfObjectInteger );if !_debg {return nil ,_ae .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_badf .Colors =int (*_aa );};};return _badf ,nil ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_af *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_dfb :=_a .Cos (angle *_a .Pi /180.0);_ecf :=_a .Sin (angle *_a .Pi /180.0);_dg :=-_a .Sin (angle *_a .Pi /180.0);_ddb :=_a .Cos (angle *_a .Pi /180.0);return _af .Add_cm (_dfb ,_ecf ,_dg ,_ddb ,0,0);};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gcb *ContentCreator )Add_Tj (textstr _f .PdfObjectString )*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u0054\u006a";_ecd .Params =_efd ([]_f .PdfObjectString {textstr });_gcb ._ea =append (_gcb ._ea ,&_ecd );return _gcb ;};func _adb (_efbd *ContentStreamInlineImage ,_ecfc *_f .PdfObjectDictionary )(*_f .LZWEncoder ,error ){_ffbc :=_f .NewLZWEncoder ();if _ecfc ==nil {if _efbd .DecodeParms !=nil {_gfe ,_fcbg :=_f .GetDict (_efbd .DecodeParms );if !_fcbg {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_efbd .DecodeParms );return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ecfc =_gfe ;};};if _ecfc ==nil {return _ffbc ,nil ;};_dde :=_ecfc .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _dde !=nil {_gdf ,_ddg :=_dde .(*_f .PdfObjectInteger );if !_ddg {_ec .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_dde );return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_gdf !=0&&*_gdf !=1{return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_ffbc .EarlyChange =int (*_gdf );}else {_ffbc .EarlyChange =1;};_dde =_ecfc .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _dde !=nil {_acac ,_fbegd :=_dde .(*_f .PdfObjectInteger );if !_fbegd {_ec .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dde );return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_ffbc .Predictor =int (*_acac );};_dde =_ecfc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _dde !=nil {_dfg ,_cacc :=_dde .(*_f .PdfObjectInteger );if !_cacc {_ec .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_ae .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_ffbc .BitsPerComponent =int (*_dfg );};if _ffbc .Predictor > 1{_ffbc .Columns =1;_dde =_ecfc .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _dde !=nil {_ccc ,_bda :=_dde .(*_f .PdfObjectInteger );if !_bda {return nil ,_ae .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_ffbc .Columns =int (*_ccc );};_ffbc .Colors =1;_dde =_ecfc .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dde !=nil {_efgc ,_daf :=_dde .(*_f .PdfObjectInteger );if !_daf {return nil ,_ae .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_ffbc .Colors =int (*_efgc );};};_ec .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ecfc .String ());return _ffbc ,nil ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bed *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_ead :=ContentStreamOperation {};_ead .Operand ="\u004b";_ead .Params =_gfagb ([]float64 {c ,m ,y ,k });_bed ._ea =append (_bed ._ea ,&_ead );return _bed ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fdae *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_dfbb :=ContentStreamOperation {};_dfbb .Operand ="\u0054\u0073";_dfbb .Params =_gfagb ([]float64 {rise });_fdae ._ea =append (_fdae ._ea ,&_dfbb );return _fdae ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fgg *ContentCreator )Add_g (gray float64 )*ContentCreator {_cec :=ContentStreamOperation {};_cec .Operand ="\u0067";_cec .Params =_gfagb ([]float64 {gray });_fgg ._ea =append (_fgg ._ea ,&_cec );return _fgg ;};var _dfbe =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ce .PdfColorspace ;ColorspaceNonStroking _ce .PdfColorspace ;ColorStroking _ce .PdfColor ;ColorNonStroking _ce .PdfColor ;CTM _gf .Matrix ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgc *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_fcb :=ContentStreamOperation {};_fcb .Operand ="\u0053\u0043\u004e";_fcb .Params =_gfagb (c );_cgc ._ea =append (_cgc ._ea ,&_fcb );return _cgc ;};func (_ged *ContentStreamProcessor )getInitialColor (_bgg _ce .PdfColorspace )(_ce .PdfColor ,error ){switch _gcc :=_bgg .(type ){case *_ce .PdfColorspaceDeviceGray :return _ce .NewPdfColorDeviceGray (0.0),nil ;case *_ce .PdfColorspaceDeviceRGB :return _ce .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ce .PdfColorspaceDeviceCMYK :return _ce .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ce .PdfColorspaceCalGray :return _ce .NewPdfColorCalGray (0.0),nil ;case *_ce .PdfColorspaceCalRGB :return _ce .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ce .PdfColorspaceLab :_gfcf :=0.0;_ffd :=0.0;_fgbg :=0.0;if _gcc .Range [0]> 0{_gfcf =_gcc .Range [0];};if _gcc .Range [2]> 0{_ffd =_gcc .Range [2];};return _ce .NewPdfColorLab (_gfcf ,_ffd ,_fgbg ),nil ;case *_ce .PdfColorspaceICCBased :if _gcc .Alternate ==nil {_ec .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_gcc .N );if _gcc .N ==1{_ec .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _ged .getInitialColor (_ce .NewPdfColorspaceDeviceGray ());}else if _gcc .N ==3{_ec .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _ged .getInitialColor (_ce .NewPdfColorspaceDeviceRGB ());}else if _gcc .N ==4{_ec .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _ged .getInitialColor (_ce .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_c .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _ged .getInitialColor (_gcc .Alternate );case *_ce .PdfColorspaceSpecialIndexed :if _gcc .Base ==nil {return nil ,_c .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _ged .getInitialColor (_gcc .Base );case *_ce .PdfColorspaceSpecialSeparation :if _gcc .AlternateSpace ==nil {return nil ,_c .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _ged .getInitialColor (_gcc .AlternateSpace );case *_ce .PdfColorspaceDeviceN :if _gcc .AlternateSpace ==nil {return nil ,_c .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _ged .getInitialColor (_gcc .AlternateSpace );case *_ce .PdfColorspaceSpecialPattern :return nil ,nil ;};_ec .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bgg );return nil ,_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Scale applies x-y scaling to the transformation matrix.
func (_eg *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _eg .Add_cm (sx ,0,0,sy ,0,0);};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fc *ContentCreator )Add_B ()*ContentCreator {_fe :=ContentStreamOperation {};_fe .Operand ="\u0042";_fc ._ea =append (_fc ._ea ,&_fe );return _fc ;};func (_bfae *ContentStreamProcessor )handleCommand_k (_cdde *ContentStreamOperation ,_gead *_ce .PdfPageResources )error {_deeb :=_ce .NewPdfColorspaceDeviceCMYK ();if len (_cdde .Params )!=_deeb .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cdde .Params ),_deeb );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fceb ,_cbg :=_deeb .ColorFromPdfObjects (_cdde .Params );if _cbg !=nil {return _cbg ;};_bfae ._gea .ColorspaceNonStroking =_deeb ;_bfae ._gea .ColorNonStroking =_fceb ;return nil ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cee *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_ccd :=ContentStreamOperation {};_ccd .Operand ="\u006a";_ccd .Params =_gccb ([]_f .PdfObjectName {_f .PdfObjectName (lineJoinStyle )});_cee ._ea =append (_cee ._ea ,&_ccd );return _cee ;};var (ErrInvalidOperand =_c .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););func (_fdf *ContentStreamParser )parseBool ()(_f .PdfObjectBool ,error ){_dgda ,_ebe :=_fdf ._baea .Peek (4);if _ebe !=nil {return _f .PdfObjectBool (false ),_ebe ;};if (len (_dgda )>=4)&&(string (_dgda [:4])=="\u0074\u0072\u0075\u0065"){_fdf ._baea .Discard (4);return _f .PdfObjectBool (true ),nil ;};_dgda ,_ebe =_fdf ._baea .Peek (5);if _ebe !=nil {return _f .PdfObjectBool (false ),_ebe ;};if (len (_dgda )>=5)&&(string (_dgda [:5])=="\u0066\u0061\u006cs\u0065"){_fdf ._baea .Discard (5);return _f .PdfObjectBool (false ),nil ;};return _f .PdfObjectBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_dae *ContentStreamProcessor )handleCommand_G (_deed *ContentStreamOperation ,_ddaa *_ce .PdfPageResources )error {_cegc :=_ce .NewPdfColorspaceDeviceGray ();if len (_deed .Params )!=_cegc .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_deed .Params ),_cegc );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fea ,_bbda :=_cegc .ColorFromPdfObjects (_deed .Params );if _bbda !=nil {return _bbda ;};_dae ._gea .ColorspaceStroking =_cegc ;_dae ._gea .ColorStroking =_fea ;return nil ;};func _eabd (_eda _ce .PdfColorspace )bool {_ ,_ccf :=_eda .(*_ce .PdfColorspaceSpecialPattern );return _ccf ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_deb *ContentCreator )Add_sh (name _f .PdfObjectName )*ContentCreator {_agf :=ContentStreamOperation {};_agf .Operand ="\u0073\u0068";_agf .Params =_gccb ([]_f .PdfObjectName {name });_deb ._ea =append (_deb ._ea ,&_agf );return _deb ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cde *ContentCreator )Add_S ()*ContentCreator {_adf :=ContentStreamOperation {};_adf .Operand ="\u0053";_cde ._ea =append (_cde ._ea ,&_adf );return _cde ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_feb *ContentCreator )Add_B_starred ()*ContentCreator {_ccgd :=ContentStreamOperation {};_ccgd .Operand ="\u0042\u002a";_feb ._ea =append (_feb ._ea ,&_ccgd );return _feb ;};func _gccb (_bdad []_f .PdfObjectName )[]_f .PdfObject {var _dcab []_f .PdfObject ;for _ ,_bdf :=range _bdad {_dcab =append (_dcab ,_f .MakeName (string (_bdf )));};return _dcab ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_df *ContentStreamOperations )Bytes ()[]byte {var _bd _cg .Buffer ;for _ ,_dd :=range *_df {if _dd ==nil {continue ;};if _dd .Operand =="\u0042\u0049"{_bd .WriteString (_dd .Operand +"\u000a");_bd .WriteString (_dd .Params [0].WriteString ());}else {for _ ,_eb :=range _dd .Params {_bd .WriteString (_eb .WriteString ());_bd .WriteString ("\u0020");};_bd .WriteString (_dd .Operand +"\u000a");};};return _bd .Bytes ();};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _f .PdfObject ;ColorSpace _f .PdfObject ;Decode _f .PdfObject ;DecodeParms _f .PdfObject ;Filter _f .PdfObject ;Height _f .PdfObject ;ImageMask _f .PdfObject ;Intent _f .PdfObject ;Interpolate _f .PdfObject ;Width _f .PdfObject ;_badfe []byte ;_caab *_cf .ImageBase ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dab *ContentCreator )Add_gs (dictName _f .PdfObjectName )*ContentCreator {_ag :=ContentStreamOperation {};_ag .Operand ="\u0067\u0073";_ag .Params =_gccb ([]_f .PdfObjectName {dictName });_dab ._ea =append (_dab ._ea ,&_ag );return _dab ;};func _debe (_ecfbe *ContentStreamInlineImage )(*_f .MultiEncoder ,error ){_fgd :=_f .NewMultiEncoder ();var _dgee *_f .PdfObjectDictionary ;var _fadd []_f .PdfObject ;if _cdb :=_ecfbe .DecodeParms ;_cdb !=nil {_caa ,_fbegc :=_cdb .(*_f .PdfObjectDictionary );if _fbegc {_dgee =_caa ;};_fgfa ,_eaga :=_cdb .(*_f .PdfObjectArray );if _eaga {for _ ,_eadc :=range _fgfa .Elements (){if _cfc ,_ade :=_eadc .(*_f .PdfObjectDictionary );_ade {_fadd =append (_fadd ,_cfc );}else {_fadd =append (_fadd ,nil );};};};};_edg :=_ecfbe .Filter ;if _edg ==nil {return nil ,_ae .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_fcc ,_bcc :=_edg .(*_f .PdfObjectArray );if !_bcc {return nil ,_ae .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _gdd ,_dac :=range _fcc .Elements (){_cad ,_eefd :=_dac .(*_f .PdfObjectName );if !_eefd {return nil ,_ae .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _fag _f .PdfObject ;if _dgee !=nil {_fag =_dgee ;}else {if len (_fadd )> 0{if _gdd >=len (_fadd ){return nil ,_ae .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_fag =_fadd [_gdd ];};};var _aag *_f .PdfObjectDictionary ;if _ebg ,_fagf :=_fag .(*_f .PdfObjectDictionary );_fagf {_aag =_ebg ;};if *_cad ==_f .StreamEncodingFilterNameFlate ||*_cad =="\u0046\u006c"{_gfde ,_ddee :=_acb (_ecfbe ,_aag );if _ddee !=nil {return nil ,_ddee ;};_fgd .AddEncoder (_gfde );}else if *_cad ==_f .StreamEncodingFilterNameLZW {_dcg ,_fgdg :=_adb (_ecfbe ,_aag );if _fgdg !=nil {return nil ,_fgdg ;};_fgd .AddEncoder (_dcg );}else if *_cad ==_f .StreamEncodingFilterNameASCIIHex {_fbf :=_f .NewASCIIHexEncoder ();_fgd .AddEncoder (_fbf );}else if *_cad ==_f .StreamEncodingFilterNameASCII85 ||*_cad =="\u0041\u0038\u0035"{_gab :=_f .NewASCII85Encoder ();_fgd .AddEncoder (_gab );}else {_ec .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_cad );return nil ,_ae .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _fgd ,nil ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_daca :=ContentStreamParser {};_age :=_cg .NewBufferString (contentStr +"\u000a");_daca ._baea =_g .NewReader (_age );return &_daca ;};func (_cgbgd *ContentStreamProcessor )handleCommand_scn (_faac *ContentStreamOperation ,_faca *_ce .PdfPageResources )error {_eeffe :=_cgbgd ._gea .ColorspaceNonStroking ;if !_eabd (_eeffe ){if len (_faac .Params )!=_eeffe .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_faac .Params ),_eeffe );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_dcb ,_bgga :=_eeffe .ColorFromPdfObjects (_faac .Params );if _bgga !=nil {_ec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_faac .Params ,_eeffe );return _bgga ;};_cgbgd ._gea .ColorNonStroking =_dcb ;return nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fac *ContentCreator )Add_CS (name _f .PdfObjectName )*ContentCreator {_ffg :=ContentStreamOperation {};_ffg .Operand ="\u0043\u0053";_ffg .Params =_gccb ([]_f .PdfObjectName {name });_fac ._ea =append (_fac ._ea ,&_ffg );return _fac ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_gbf *ContentCreator )Add_W_starred ()*ContentCreator {_abc :=ContentStreamOperation {};_abc .Operand ="\u0057\u002a";_gbf ._ea =append (_gbf ._ea ,&_abc );return _gbf ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_acbb *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_bfbg :=ContentStreamOperations {};for {_gcd :=ContentStreamOperation {};for {_agea ,_fega ,_bca :=_acbb .parseObject ();if _bca !=nil {if _bca ==_ed .EOF {return &_bfbg ,nil ;};return &_bfbg ,_bca ;};if _fega {_gcd .Operand ,_ =_f .GetStringVal (_agea );_bfbg =append (_bfbg ,&_gcd );break ;}else {_gcd .Params =append (_gcd .Params ,_agea );};};if _gcd .Operand =="\u0042\u0049"{_cccf ,_cgfe :=_acbb .ParseInlineImage ();if _cgfe !=nil {return &_bfbg ,_cgfe ;};_gcd .Params =append (_gcd .Params ,_cccf );};};};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fg *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_defe :=ContentStreamOperation {};_defe .Operand ="\u004a";_defe .Params =_gccb ([]_f .PdfObjectName {_f .PdfObjectName (lineCapStyle )});_fg ._ea =append (_fg ._ea ,&_defe );return _fg ;};func (_ddc *ContentStreamParser )parseDict ()(*_f .PdfObjectDictionary ,error ){_ec .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_dgca :=_f .MakeDict ();_gff ,_ :=_ddc ._baea .ReadByte ();if _gff !='<'{return nil ,_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_gff ,_ =_ddc ._baea .ReadByte ();if _gff !='<'{return nil ,_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_ddc .skipSpaces ();_caad ,_ecbg :=_ddc ._baea .Peek (2);if _ecbg !=nil {return nil ,_ecbg ;};_ec .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_caad ),string (_caad ));if (_caad [0]=='>')&&(_caad [1]=='>'){_ec .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_ddc ._baea .ReadByte ();_ddc ._baea .ReadByte ();break ;};_ec .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_gddd ,_ecbg :=_ddc .parseName ();_ec .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gddd );if _ecbg !=nil {_ec .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_ecbg );return nil ,_ecbg ;};if len (_gddd )> 4&&_gddd [len (_gddd )-4:]=="\u006e\u0075\u006c\u006c"{_feda :=_gddd [0:len (_gddd )-4];_ec .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_gddd );_ec .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_feda );_ddc .skipSpaces ();_gaab ,_ :=_ddc ._baea .Peek (1);if _gaab [0]=='/'{_dgca .Set (_feda ,_f .MakeNull ());continue ;};};_ddc .skipSpaces ();_bgfb ,_ ,_ecbg :=_ddc .parseObject ();if _ecbg !=nil {return nil ,_ecbg ;};_dgca .Set (_gddd ,_bgfb );_ec .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_gddd ,_bgfb .String ());};return _dgca ,nil ;};func (_geea *ContentStreamParser )parseName ()(_f .PdfObjectName ,error ){_eae :="";_bdcff :=false ;for {_dgeee ,_feff :=_geea ._baea .Peek (1);if _feff ==_ed .EOF {break ;};if _feff !=nil {return _f .PdfObjectName (_eae ),_feff ;};if !_bdcff {if _dgeee [0]=='/'{_bdcff =true ;_geea ._baea .ReadByte ();}else {_ec .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_dgeee ,_dgeee );return _f .PdfObjectName (_eae ),_ae .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_dgeee [0]);};}else {if _f .IsWhiteSpace (_dgeee [0]){break ;}else if (_dgeee [0]=='/')||(_dgeee [0]=='[')||(_dgeee [0]=='(')||(_dgeee [0]==']')||(_dgeee [0]=='<')||(_dgeee [0]=='>'){break ;}else if _dgeee [0]=='#'{_bcf ,_dddg :=_geea ._baea .Peek (3);if _dddg !=nil {return _f .PdfObjectName (_eae ),_dddg ;};_geea ._baea .Discard (3);_ebac ,_dddg :=_e .DecodeString (string (_bcf [1:3]));if _dddg !=nil {return _f .PdfObjectName (_eae ),_dddg ;};_eae +=string (_ebac );}else {_dadg ,_ :=_geea ._baea .ReadByte ();_eae +=string (_dadg );};};};return _f .PdfObjectName (_eae ),nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_cc *ContentCreator )Bytes ()[]byte {return _cc ._ea .Bytes ()};func (_afeg *ContentStreamParser )parseOperand ()(*_f .PdfObjectString ,error ){var _dbf []byte ;for {_eefa ,_bged :=_afeg ._baea .Peek (1);if _bged !=nil {return _f .MakeString (string (_dbf )),_bged ;};if _f .IsDelimiter (_eefa [0]){break ;};if _f .IsWhiteSpace (_eefa [0]){break ;};_gebc ,_ :=_afeg ._baea .ReadByte ();_dbf =append (_dbf ,_gebc );};return _f .MakeString (string (_dbf )),nil ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_ccgdd *ContentCreator )SetNonStrokingColor (color _ce .PdfColor )*ContentCreator {switch _egbg :=color .(type ){case *_ce .PdfColorDeviceGray :_ccgdd .Add_g (_egbg .Val ());case *_ce .PdfColorDeviceRGB :_ccgdd .Add_rg (_egbg .R (),_egbg .G (),_egbg .B ());case *_ce .PdfColorDeviceCMYK :_ccgdd .Add_k (_egbg .C (),_egbg .M (),_egbg .Y (),_egbg .K ());default:_ec .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_egbg );};return _ccgdd ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_gge *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_egd :=handlerEntry {};_egd .Condition =condition ;_egd .Operand =operand ;_egd .Handler =handler ;_gge ._cccc =append (_gge ._cccc ,_egd );};func _bba (_dgb *ContentStreamInlineImage )(*_f .DCTEncoder ,error ){_adg :=_f .NewDCTEncoder ();_ecde :=_cg .NewReader (_dgb ._badfe );_bdcc ,_cgg :=_d .DecodeConfig (_ecde );if _cgg !=nil {_ec .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_cgg );return nil ,_cgg ;};switch _bdcc .ColorModel {case _bg .RGBAModel :_adg .BitsPerComponent =8;_adg .ColorComponents =3;case _bg .RGBA64Model :_adg .BitsPerComponent =16;_adg .ColorComponents =3;case _bg .GrayModel :_adg .BitsPerComponent =8;_adg .ColorComponents =1;case _bg .Gray16Model :_adg .BitsPerComponent =16;_adg .ColorComponents =1;case _bg .CMYKModel :_adg .BitsPerComponent =8;_adg .ColorComponents =4;case _bg .YCbCrModel :_adg .BitsPerComponent =8;_adg .ColorComponents =3;default:return nil ,_c .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_adg .Width =_bdcc .Width ;_adg .Height =_bdcc .Height ;_ec .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_adg );return _adg ,nil ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gegb *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_bfa :=ContentStreamOperation {};_bfa .Operand ="\u0079";_bfa .Params =_gfagb ([]float64 {x1 ,y1 ,x3 ,y3 });_gegb ._ea =append (_gegb ._ea ,&_bfa );return _gegb ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_gec HandlerConditionEnum )All ()bool {return _gec ==HandlerConditionEnumAllOperands };func (_ega *ContentStreamProcessor )getColorspace (_cdag string ,_eab *_ce .PdfPageResources )(_ce .PdfColorspace ,error ){switch _cdag {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ce .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ce .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ce .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ce .NewPdfColorspaceSpecialPattern (),nil ;};_feffa ,_bgb :=_eab .GetColorspaceByName (_f .PdfObjectName (_cdag ));if _bgb {return _feffa ,nil ;};switch _cdag {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ce .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ce .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _ce .NewPdfColorspaceLab (),nil ;};_ec .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_cdag );return nil ,_ae .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_cdag );};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_acg *ContentCreator )Add_G (gray float64 )*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0047";_eef .Params =_gfagb ([]float64 {gray });_acg ._ea =append (_acg ._ea ,&_eef );return _acg ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gg *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_afe :=ContentStreamOperation {};_afe .Operand ="\u0064";_afe .Params =[]_f .PdfObject {};_afe .Params =append (_afe .Params ,_f .MakeArrayFromIntegers64 (dashArray ));_afe .Params =append (_afe .Params ,_f .MakeInteger (dashPhase ));_gg ._ea =append (_gg ._ea ,&_afe );return _gg ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gfc *ContentCreator )Add_cs (name _f .PdfObjectName )*ContentCreator {_cdd :=ContentStreamOperation {};_cdd .Operand ="\u0063\u0073";_cdd .Params =_gccb ([]_f .PdfObjectName {name });_gfc ._ea =append (_gfc ._ea ,&_cdd );return _gfc ;};func (_afdf *ContentStreamProcessor )handleCommand_cm (_dbab *ContentStreamOperation ,_bddeb *_ce .PdfPageResources )error {if len (_dbab .Params )!=6{_ec .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_dbab .Params ));return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bbc ,_eaee :=_f .GetNumbersAsFloat (_dbab .Params );if _eaee !=nil {return _eaee ;};_cfd :=_gf .NewMatrix (_bbc [0],_bbc [1],_bbc [2],_bbc [3],_bbc [4],_bbc [5]);_afdf ._gea .CTM .Concat (_cfd );return nil ;};func _fbegb (_gce *ContentStreamInlineImage )(_f .StreamEncoder ,error ){if _gce .Filter ==nil {return _f .NewRawEncoder (),nil ;};_fef ,_deg :=_gce .Filter .(*_f .PdfObjectName );if !_deg {_eec ,_faa :=_gce .Filter .(*_f .PdfObjectArray );if !_faa {return nil ,_ae .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _eec .Len ()==0{return _f .NewRawEncoder (),nil ;};if _eec .Len ()!=1{_dee ,_fggg :=_debe (_gce );if _fggg !=nil {_ec .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_fggg );return nil ,_fggg ;};_ec .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_dee );return _dee ,nil ;};_bdbb :=_eec .Get (0);_fef ,_faa =_bdbb .(*_f .PdfObjectName );if !_faa {return nil ,_ae .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_fef {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _f .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _f .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bba (_gce );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _acb (_gce ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _adb (_gce ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _f .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _f .NewRunLengthEncoder (),nil ;default:_ec .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_fef );return nil ,_c .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// GetEncoder returns the encoder of the inline image.
func (_eecf *ContentStreamInlineImage )GetEncoder ()(_f .StreamEncoder ,error ){return _fbegb (_eecf )};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aeb *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0063";_efb .Params =_gfagb ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_aeb ._ea =append (_aeb ._ea ,&_efb );return _aeb ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_acf *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dfd :=ContentStreamOperation {};_dfd .Operand ="\u0072\u0067";_dfd .Params =_gfagb ([]float64 {r ,g ,b });_acf ._ea =append (_acf ._ea ,&_dfd );return _acf ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_baf *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_bfb :=ContentStreamOperation {};_bfb .Operand ="\u0053\u0043";_bfb .Params =_gfagb (c );_baf ._ea =append (_baf ._ea ,&_bfb );return _baf ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cd *ContentCreator )Add_ri (intent _f .PdfObjectName )*ContentCreator {_ace :=ContentStreamOperation {};_ace .Operand ="\u0072\u0069";_ace .Params =_gccb ([]_f .PdfObjectName {intent });_cd ._ea =append (_cd ._ea ,&_ace );return _cd ;};func (_dfga *ContentStreamProcessor )handleCommand_SCN (_gecc *ContentStreamOperation ,_afg *_ce .PdfPageResources )error {_bedcg :=_dfga ._gea .ColorspaceStroking ;if !_eabd (_bedcg ){if len (_gecc .Params )!=_bedcg .GetNumComponents (){_ec .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ec .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gecc .Params ),_bedcg );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fde ,_bfeg :=_bedcg .ColorFromPdfObjects (_gecc .Params );if _bfeg !=nil {return _bfeg ;};_dfga ._gea .ColorStroking =_fde ;return nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_def *ContentCreator )Add_q ()*ContentCreator {_dfc :=ContentStreamOperation {};_dfc .Operand ="\u0071";_def ._ea =append (_def ._ea ,&_dfc );return _def ;};

// String returns `ops.Bytes()` as a string.
func (_efc *ContentStreamOperations )String ()string {return string (_efc .Bytes ())};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_dbg *ContentCreator )Add_Do (name _f .PdfObjectName )*ContentCreator {_fgc :=ContentStreamOperation {};_fgc .Operand ="\u0044\u006f";_fgc .Params =_gccb ([]_f .PdfObjectName {name });_dbg ._ea =append (_dbg ._ea ,&_fgc );return _dbg ;};