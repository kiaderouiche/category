//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_c "errors";_f "github.com/golang/freetype/truetype";_eb "github.com/unidoc/unipdf/v3/core";_dc "github.com/unidoc/unipdf/v3/internal/textencoding";_a "github.com/unidoc/unipdf/v3/internal/transform";_b "github.com/unidoc/unipdf/v3/model";_bf "golang.org/x/image/font";_d "image";_g "image/color";);func NewTextState ()*TextState {return &TextState {Th :100,Tm :_a .IdentityMatrix (),Tlm :_a .IdentityMatrix ()};};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bbb ,_eaad :=_b .NewPdfFontFromTTFFile (filePath );if _eaad !=nil {return nil ,_eaad ;};return NewTextFont (_bbb ,size );};type FillRule int ;type Pattern interface{ColorAt (_eg ,_cf int )_g .Color ;};func (_bdc *TextFont )GetCharMetrics (code _dc .CharCode )(float64 ,float64 ,bool ){if _gd ,_eaf :=_bdc .Font .GetCharMetrics (code );_eaf &&_gd .Wx !=0{return _gd .Wx ,_gd .Wy ,_eaf ;};if _bdc ._eef ==nil {return 0,0,false ;};_fbc ,_ffd :=_bdc ._eef .GetCharMetrics (code );return _fbc .Wx ,_fbc .Wy ,_ffd &&_fbc .Wx !=0;};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type Context interface{Push ();Pop ();Matrix ()_a .Matrix ;SetMatrix (_db _a .Matrix );Translate (_cb ,_ee float64 );Scale (_de ,_gf float64 );Rotate (_gc float64 );MoveTo (_gce ,_dd float64 );LineTo (_fb ,_fbg float64 );CubicTo (_dcc ,_aa ,_gac ,_fa ,_ag ,_ce float64 );QuadraticTo (_ac ,_gg ,_aac ,_adg float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_gb float64 );SetLineCap (_ge LineCap );SetLineJoin (_fc LineJoin );SetDash (_da ...float64 );SetDashOffset (_geg float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_acb ,_fg ,_ef ,_dg float64 );SetFillRGBA (_deg ,_ae ,_gbf ,_cg float64 );SetFillStyle (_fd Pattern );SetFillRule (_ff FillRule );SetStrokeRGBA (_adc ,_aec ,_ed ,_ddc float64 );SetStrokeStyle (_ca Pattern );TextState ()*TextState ;DrawString (_acd string ,_ea ,_fdb float64 );MeasureString (_fba string )(_eaa ,_bg float64 );DrawRectangle (_fac ,_edc ,_dda ,_be float64 );DrawImage (_df _d .Image ,_bc ,_dba int );DrawImageAnchored (_bd _d .Image ,_ada ,_gad int ,_bb ,_dfa float64 );Height ()int ;Width ()int ;};func NewTextFont (font *_b .PdfFont ,size float64 )(*TextFont ,error ){_cgg :=font .FontDescriptor ();if _cgg ==nil {return nil ,_c .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_bec ,_cfc :=_eb .GetStream (_cgg .FontFile2 );if !_cfc {return nil ,_c .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_acdd ,_cc :=_eb .DecodeStream (_bec );if _cc !=nil {return nil ,_cc ;};_dca ,_cc :=_f .Parse (_acdd );if _cc !=nil {return nil ,_cc ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_f .NewFace (_dca ,&_f .Options {Size :size }),Size :size ,_facd :_dca },nil ;};type LineJoin int ;func (_gbe *TextState )ProcTf (font *TextFont ){_gbe .Tf =font };func (_caa *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_caa .Tm =_a .NewMatrix (a ,b ,c ,d ,e ,-f );_caa .Tlm =_caa .Tm .Clone ();};func (_egc *TextFont )BytesToCharcodes (data []byte )[]_dc .CharCode {if _egc ._eef !=nil {return _egc ._eef .BytesToCharcodes (data );};return _egc .Font .BytesToCharcodes (data );};func (_cef *TextState )ProcTd (tx ,ty float64 ){_cef .Tlm .Concat (_a .TranslationMatrix (tx ,-ty ));_cef .Tm =_cef .Tlm .Clone ();};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type TextFont struct{Font *_b .PdfFont ;Face _bf .Face ;Size float64 ;_facd *_f .Font ;_eef *_b .PdfFont ;};type LineCap int ;func (_fe *TextState )ProcQ (data []byte ,ctx Context ){_fe .ProcTStar ();_fe .ProcTj (data ,ctx )};func (_ege *TextFont )CharcodesToUnicode (charcodes []_dc .CharCode )[]rune {if _ege ._eef !=nil {return _ege ._eef .CharcodesToUnicode (charcodes );};return _ege .Font .CharcodesToUnicode (charcodes );};func (_dee *TextState )ProcTD (tx ,ty float64 ){_dee .Tl =-ty ;_dee .ProcTd (tx ,ty )};func (_cgga *TextState )ProcTStar (){_cgga .ProcTd (0,-_cgga .Tl )};func (_deb *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _eaaf ,_gbg :=_deb .Font .GetRuneMetrics (r );_gbg &&_eaaf .Wx !=0{return _eaaf .Wx ,_eaaf .Wy ,_gbg ;};if _deb ._eef ==nil {return 0,0,false ;};_bfb ,_gfe :=_deb ._eef .GetRuneMetrics (r );return _bfb .Wx ,_bfb .Wy ,_gfe &&_bfb .Wx !=0;};func (_bee *TextState )ProcTj (data []byte ,ctx Context ){_bcf :=_bee .Tf .Size ;_dfaa :=_bee .Th /100.0;_gdb :=_a .NewMatrix (_bcf *_dfaa ,0,0,_bcf ,0,_bee .Ts );_cgc :=_bee .Tf .CharcodesToUnicode (_bee .Tf .BytesToCharcodes (data ));for _ ,_fbaa :=range _cgc {if _fbaa =='\x00'{continue ;};_ab :=_bee .Tm .Clone ();_bee .Tm .Concat (_gdb );_beca ,_ddd :=_bee .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_fbaa ),_beca ,_ddd );ctx .Scale (1,-1);_eea :=0.0;if _fbaa ==' '{_eea =_bee .Tw ;};var _fde float64 ;if _dgb ,_ ,_fgg :=_bee .Tf .GetRuneMetrics (_fbaa );_fgg {_fde =_dgb *0.001*_bcf ;}else {_fde ,_ =ctx .MeasureString (string (_fbaa ));};_ba :=(_fde +_bee .Tc +_eea )*_dfaa ;_bee .Tm =_a .TranslationMatrix (_ba ,0).Mult (_ab );};};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _a .Matrix ;Tlm _a .Matrix ;};func (_aee *TextState )Translate (tx ,ty float64 ){_aee .Tm =_a .TranslationMatrix (tx ,ty ).Mult (_aee .Tm );};func (_adb *TextState )Reset (){_adb .Tm =_a .IdentityMatrix ();_adb .Tlm =_a .IdentityMatrix ()};func (_fbe *TextFont )WithSize (size float64 ,originalFont *_b .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_fbe .Font ,Face :_f .NewFace (_fbe ._facd ,&_f .Options {Size :size }),Size :size ,_facd :_fbe ._facd ,_eef :originalFont };};type Gradient interface{Pattern ;AddColorStop (_ad float64 ,_ga _g .Color );};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_ade *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_ade .Tw =aw ;_ade .Tc =ac ;_ade .ProcQ (data ,ctx );};