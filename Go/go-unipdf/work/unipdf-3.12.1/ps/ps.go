//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_c "bufio";_f "bytes";_e "errors";_dc "fmt";_cd "github.com/unidoc/unipdf/v3/common";_dce "github.com/unidoc/unipdf/v3/core";_d "io";_a "math";);

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _fe []float64 ;for _ ,_ae :=range objects {if _ee ,_db :=_ae .(*PSInteger );_db {_fe =append (_fe ,float64 (_ee .Val ));}else if _eeb ,_af :=_ae .(*PSReal );_af {_fe =append (_fe ,_eeb .Val );}else {return nil ,ErrTypeCheck ;};};return _fe ,nil ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cbaa :=PSParser {};_fbg :=_f .NewBuffer (content );_cbaa ._dadg =_c .NewReader (_fbg );return &_cbaa ;};func (_fff *PSOperand )exp (_dbgf *PSStack )error {_ecg ,_aeg :=_dbgf .PopNumberAsFloat64 ();if _aeg !=nil {return _aeg ;};_ebd ,_aeg :=_dbgf .PopNumberAsFloat64 ();if _aeg !=nil {return _aeg ;};if _a .Abs (_ecg )< 1&&_ebd < 0{return ErrUndefinedResult ;};_ggd :=_a .Pow (_ebd ,_ecg );_aeg =_dbgf .Push (MakeReal (_ggd ));return _aeg ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cga *PSOperand )Exec (stack *PSStack )error {_abf :=ErrUnsupportedOperand ;switch *_cga {case "\u0061\u0062\u0073":_abf =_cga .abs (stack );case "\u0061\u0064\u0064":_abf =_cga .add (stack );case "\u0061\u006e\u0064":_abf =_cga .and (stack );case "\u0061\u0074\u0061\u006e":_abf =_cga .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_abf =_cga .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_abf =_cga .ceiling (stack );case "\u0063\u006f\u0070\u0079":_abf =_cga .copy (stack );case "\u0063\u006f\u0073":_abf =_cga .cos (stack );case "\u0063\u0076\u0069":_abf =_cga .cvi (stack );case "\u0063\u0076\u0072":_abf =_cga .cvr (stack );case "\u0064\u0069\u0076":_abf =_cga .div (stack );case "\u0064\u0075\u0070":_abf =_cga .dup (stack );case "\u0065\u0071":_abf =_cga .eq (stack );case "\u0065\u0078\u0063\u0068":_abf =_cga .exch (stack );case "\u0065\u0078\u0070":_abf =_cga .exp (stack );case "\u0066\u006c\u006fo\u0072":_abf =_cga .floor (stack );case "\u0067\u0065":_abf =_cga .ge (stack );case "\u0067\u0074":_abf =_cga .gt (stack );case "\u0069\u0064\u0069\u0076":_abf =_cga .idiv (stack );case "\u0069\u0066":_abf =_cga .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_abf =_cga .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_abf =_cga .index (stack );case "\u006c\u0065":_abf =_cga .le (stack );case "\u006c\u006f\u0067":_abf =_cga .log (stack );case "\u006c\u006e":_abf =_cga .ln (stack );case "\u006c\u0074":_abf =_cga .lt (stack );case "\u006d\u006f\u0064":_abf =_cga .mod (stack );case "\u006d\u0075\u006c":_abf =_cga .mul (stack );case "\u006e\u0065":_abf =_cga .ne (stack );case "\u006e\u0065\u0067":_abf =_cga .neg (stack );case "\u006e\u006f\u0074":_abf =_cga .not (stack );case "\u006f\u0072":_abf =_cga .or (stack );case "\u0070\u006f\u0070":_abf =_cga .pop (stack );case "\u0072\u006f\u0075n\u0064":_abf =_cga .round (stack );case "\u0072\u006f\u006c\u006c":_abf =_cga .roll (stack );case "\u0073\u0069\u006e":_abf =_cga .sin (stack );case "\u0073\u0071\u0072\u0074":_abf =_cga .sqrt (stack );case "\u0073\u0075\u0062":_abf =_cga .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_abf =_cga .truncate (stack );case "\u0078\u006f\u0072":_abf =_cga .xor (stack );};return _abf ;};func (_bce *PSOperand )dup (_dcf *PSStack )error {_agd ,_ebca :=_dcf .Pop ();if _ebca !=nil {return _ebca ;};_ebca =_dcf .Push (_agd );if _ebca !=nil {return _ebca ;};_ebca =_dcf .Push (_agd .Duplicate ());return _ebca ;};func (_eb *PSOperand )String ()string {return _dc .Sprintf ("\u0025\u0073",*_eb )};func (_ega *PSOperand )eq (_eeg *PSStack )error {_bgf ,_adee :=_eeg .Pop ();if _adee !=nil {return _adee ;};_fgge ,_adee :=_eeg .Pop ();if _adee !=nil {return _adee ;};_eea ,_da :=_bgf .(*PSBoolean );_fec ,_dad :=_fgge .(*PSBoolean );if _da ||_dad {var _fbe error ;if _da &&_dad {_fbe =_eeg .Push (MakeBool (_eea .Val ==_fec .Val ));}else {_fbe =_eeg .Push (MakeBool (false ));};return _fbe ;};var _bcb float64 ;var _gcd float64 ;if _bd ,_bcgc :=_bgf .(*PSInteger );_bcgc {_bcb =float64 (_bd .Val );}else if _gbd ,_gab :=_bgf .(*PSReal );_gab {_bcb =_gbd .Val ;}else {return ErrTypeCheck ;};if _egbg ,_fgf :=_fgge .(*PSInteger );_fgf {_gcd =float64 (_egbg .Val );}else if _ceg ,_gdb :=_fgge .(*PSReal );_gdb {_gcd =_ceg .Val ;}else {return ErrTypeCheck ;};if _a .Abs (_gcd -_bcb )< _g {_adee =_eeg .Push (MakeBool (true ));}else {_adee =_eeg .Push (MakeBool (false ));};return _adee ;};func (_edga *PSParser )parseNumber ()(PSObject ,error ){_ggbd ,_bdcc :=_dce .ParseNumber (_edga ._dadg );if _bdcc !=nil {return nil ,_bdcc ;};switch _bef :=_ggbd .(type ){case *_dce .PdfObjectFloat :return MakeReal (float64 (*_bef )),nil ;case *_dce .PdfObjectInteger :return MakeInteger (int (*_bef )),nil ;};return nil ,_dc .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ggbd );};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_ff *PSReal )Duplicate ()PSObject {_fc :=PSReal {};_fc .Val =_ff .Val ;return &_fc };func (_cbd *PSProgram )String ()string {_cda :="\u007b\u0020";for _ ,_bb :=range *_cbd {_cda +=_bb .String ();_cda +="\u0020";};_cda +="\u007d";return _cda ;};func (_eed *PSOperand )floor (_cceb *PSStack )error {_bbd ,_gga :=_cceb .Pop ();if _gga !=nil {return _gga ;};if _ecdg ,_fcfgd :=_bbd .(*PSReal );_fcfgd {_gga =_cceb .Push (MakeReal (_a .Floor (_ecdg .Val )));}else if _caa ,_abg :=_bbd .(*PSInteger );_abg {_gga =_cceb .Push (MakeInteger (_caa .Val ));}else {return ErrTypeCheck ;};return _gga ;};func (_baae *PSOperand )le (_cgac *PSStack )error {_gae ,_abb :=_cgac .PopNumberAsFloat64 ();if _abb !=nil {return _abb ;};_bgc ,_abb :=_cgac .PopNumberAsFloat64 ();if _abb !=nil {return _abb ;};if _a .Abs (_bgc -_gae )< _g {_fgb :=_cgac .Push (MakeBool (true ));return _fgb ;}else if _bgc < _gae {_cfbe :=_cgac .Push (MakeBool (true ));return _cfbe ;}else {_bdd :=_cgac .Push (MakeBool (false ));return _bdd ;};};var ErrStackOverflow =_e .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_efeg *PSOperand )or (_ddec *PSStack )error {_ffee ,_bdda :=_ddec .Pop ();if _bdda !=nil {return _bdda ;};_cdf ,_bdda :=_ddec .Pop ();if _bdda !=nil {return _bdda ;};if _abbf ,_faf :=_ffee .(*PSBoolean );_faf {_cfg ,_ecab :=_cdf .(*PSBoolean );if !_ecab {return ErrTypeCheck ;};_bdda =_ddec .Push (MakeBool (_abbf .Val ||_cfg .Val ));return _bdda ;};if _efa ,_gdcb :=_ffee .(*PSInteger );_gdcb {_cdfe ,_cegf :=_cdf .(*PSInteger );if !_cegf {return ErrTypeCheck ;};_bdda =_ddec .Push (MakeInteger (_efa .Val |_cdfe .Val ));return _bdda ;};return ErrTypeCheck ;};func (_gbf *PSOperand )not (_afd *PSStack )error {_bbeg ,_dde :=_afd .Pop ();if _dde !=nil {return _dde ;};if _efc ,_ffa :=_bbeg .(*PSBoolean );_ffa {_dde =_afd .Push (MakeBool (!_efc .Val ));return _dde ;}else if _ccfg ,_ceffd :=_bbeg .(*PSInteger );_ceffd {_dde =_afd .Push (MakeInteger (^_ccfg .Val ));return _dde ;}else {return ErrTypeCheck ;};};func (_cb *PSBoolean )String ()string {return _dc .Sprintf ("\u0025\u0076",_cb .Val )};func (_ccf *PSOperand )cvr (_fcfg *PSStack )error {_ecf ,_gbg :=_fcfg .Pop ();if _gbg !=nil {return _gbg ;};if _dfb ,_abfc :=_ecf .(*PSReal );_abfc {_gbg =_fcfg .Push (MakeReal (_dfb .Val ));}else if _cfae ,_aac :=_ecf .(*PSInteger );_aac {_gbg =_fcfg .Push (MakeReal (float64 (_cfae .Val )));}else {return ErrTypeCheck ;};return _gbg ;};var ErrTypeCheck =_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_gcgb *PSParser )parseFunction ()(*PSProgram ,error ){_afa ,_ :=_gcgb ._dadg .ReadByte ();if _afa !='{'{return nil ,_e .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_eada :=NewPSProgram ();for {_gcgb .skipSpaces ();_gegd ,_bgfg :=_gcgb ._dadg .Peek (2);if _bgfg !=nil {if _bgfg ==_d .EOF {break ;};return nil ,_bgfg ;};_cd .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gegd ));if _gegd [0]=='}'{_cd .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_gcgb ._dadg .ReadByte ();break ;}else if _gegd [0]=='{'{_cd .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_gdea ,_dcc :=_gcgb .parseFunction ();if _dcc !=nil {return nil ,_dcc ;};_eada .Append (_gdea );}else if _dce .IsDecimalDigit (_gegd [0])||(_gegd [0]=='-'&&_dce .IsDecimalDigit (_gegd [1])){_cd .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_ebag ,_deca :=_gcgb .parseNumber ();if _deca !=nil {return nil ,_deca ;};_eada .Append (_ebag );}else {_cd .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gegd ,_ =_gcgb ._dadg .Peek (5);_fbaa :=string (_gegd );_cd .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_fbaa );if (len (_fbaa )> 4)&&(_fbaa [:5]=="\u0066\u0061\u006cs\u0065"){_gecc ,_acf :=_gcgb .parseBool ();if _acf !=nil {return nil ,_acf ;};_eada .Append (_gecc );}else if (len (_fbaa )> 3)&&(_fbaa [:4]=="\u0074\u0072\u0075\u0065"){_ece ,_dace :=_gcgb .parseBool ();if _dace !=nil {return nil ,_dace ;};_eada .Append (_ece );}else {_abbd ,_ceb :=_gcgb .parseOperand ();if _ceb !=nil {return nil ,_ceb ;};_eada .Append (_abbd );};};};return _eada ,nil ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_aef *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ba :=range objects {_gg :=_aef .Stack .Push (_ba );if _gg !=nil {return nil ,_gg ;};};_fee :=_aef ._gc .Exec (_aef .Stack );if _fee !=nil {_cd .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fee );return nil ,_fee ;};_cea :=[]PSObject (*_aef .Stack );_aef .Stack .Empty ();return _cea ,nil ;};func (_bgff *PSOperand )idiv (_cac *PSStack )error {_afg ,_eab :=_cac .Pop ();if _eab !=nil {return _eab ;};_dcg ,_eab :=_cac .Pop ();if _eab !=nil {return _eab ;};_eegc ,_cgf :=_afg .(*PSInteger );if !_cgf {return ErrTypeCheck ;};if _eegc .Val ==0{return ErrUndefinedResult ;};_gdg ,_cgf :=_dcg .(*PSInteger );if !_cgf {return ErrTypeCheck ;};_gcge :=_gdg .Val /_eegc .Val ;_eab =_cac .Push (MakeInteger (_gcge ));return _eab ;};func (_dgf *PSOperand )abs (_dbg *PSStack )error {_fb ,_eg :=_dbg .Pop ();if _eg !=nil {return _eg ;};if _dgfc ,_bf :=_fb .(*PSReal );_bf {_ebc :=_dgfc .Val ;if _ebc < 0{_eg =_dbg .Push (MakeReal (-_ebc ));}else {_eg =_dbg .Push (MakeReal (_ebc ));};}else if _egf ,_bea :=_fb .(*PSInteger );_bea {_ceac :=_egf .Val ;if _ceac < 0{_eg =_dbg .Push (MakeInteger (-_ceac ));}else {_eg =_dbg .Push (MakeInteger (_ceac ));};}else {return ErrTypeCheck ;};return _eg ;};func (_cce *PSOperand )atan (_ede *PSStack )error {_fdcc ,_dbea :=_ede .PopNumberAsFloat64 ();if _dbea !=nil {return _dbea ;};_ea ,_dbea :=_ede .PopNumberAsFloat64 ();if _dbea !=nil {return _dbea ;};if _fdcc ==0{var _gca error ;if _ea < 0{_gca =_ede .Push (MakeReal (270));}else {_gca =_ede .Push (MakeReal (90));};return _gca ;};_egc :=_ea /_fdcc ;_feb :=_a .Atan (_egc )*180/_a .Pi ;_dbea =_ede .Push (MakeReal (_feb ));return _dbea ;};func (_cdce *PSOperand )cos (_ebf *PSStack )error {_ag ,_abd :=_ebf .PopNumberAsFloat64 ();if _abd !=nil {return _abd ;};_febg :=_a .Cos (_ag *_a .Pi /180.0);_abd =_ebf .Push (MakeReal (_febg ));return _abd ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_gc *PSProgram ;};func (_gcb *PSReal )String ()string {return _dc .Sprintf ("\u0025\u002e\u0035\u0066",_gcb .Val )};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_babb :=PSInteger {};_babb .Val =val ;return &_babb };func (_dbf *PSParser )skipSpaces ()(int ,error ){_gcc :=0;for {_fggc ,_ceea :=_dbf ._dadg .Peek (1);if _ceea !=nil {return 0,_ceea ;};if _dce .IsWhiteSpace (_fggc [0]){_dbf ._dadg .ReadByte ();_gcc ++;}else {break ;};};return _gcc ,nil ;};func (_eff *PSParser )parseOperand ()(*PSOperand ,error ){var _acgg []byte ;for {_gbged ,_dga :=_eff ._dadg .Peek (1);if _dga !=nil {if _dga ==_d .EOF {break ;};return nil ,_dga ;};if _dce .IsDelimiter (_gbged [0]){break ;};if _dce .IsWhiteSpace (_gbged [0]){break ;};_dgbd ,_ :=_eff ._dadg .ReadByte ();_acgg =append (_acgg ,_dgbd );};if len (_acgg )==0{return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_acgg )),nil ;};func (_cca *PSOperand )truncate (_gcea *PSStack )error {_cfe ,_dcef :=_gcea .Pop ();if _dcef !=nil {return _dcef ;};if _cde ,_bbcf :=_cfe .(*PSReal );_bbcf {_eef :=int (_cde .Val );_dcef =_gcea .Push (MakeReal (float64 (_eef )));}else if _dafg ,_cfca :=_cfe .(*PSInteger );_cfca {_dcef =_gcea .Push (MakeInteger (_dafg .Val ));}else {return ErrTypeCheck ;};return _dcef ;};func (_feec *PSBoolean )DebugString ()string {return _dc .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_feec .Val );};func (_aa *PSOperand )Duplicate ()PSObject {_fgg :=*_aa ;return &_fgg };func (_cfa *PSOperand )ceiling (_dced *PSStack )error {_edf ,_cbde :=_dced .Pop ();if _cbde !=nil {return _cbde ;};if _cba ,_edec :=_edf .(*PSReal );_edec {_cbde =_dced .Push (MakeReal (_a .Ceil (_cba .Val )));}else if _dba ,_fgd :=_edf .(*PSInteger );_fgd {_cbde =_dced .Push (MakeInteger (_dba .Val ));}else {_cbde =ErrTypeCheck ;};return _cbde ;};var ErrUnsupportedOperand =_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// Parse parses the postscript and store as a program that can be executed.
func (_agbef *PSParser )Parse ()(*PSProgram ,error ){_agbef .skipSpaces ();_gbfg ,_ffb :=_agbef ._dadg .Peek (2);if _ffb !=nil {return nil ,_ffb ;};if _gbfg [0]!='{'{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_cab ,_ffb :=_agbef .parseFunction ();if _ffb !=nil &&_ffb !=_d .EOF {return nil ,_ffb ;};return _cab ,_ffb ;};func (_bg *PSReal )DebugString ()string {return _dc .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_bg .Val );};const _g =0.000001;

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_be *PSOperand )DebugString ()string {return _dc .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_be );};func (_fac *PSOperand )ln (_ecda *PSStack )error {_cgcf ,_cbag :=_ecda .PopNumberAsFloat64 ();if _cbag !=nil {return _cbag ;};_bdc :=_a .Log (_cgcf );_cbag =_ecda .Push (MakeReal (_bdc ));return _cbag ;};func (_eega *PSOperand )neg (_daed *PSStack )error {_ccdb ,_ead :=_daed .Pop ();if _ead !=nil {return _ead ;};if _bfba ,_fbb :=_ccdb .(*PSReal );_fbb {_ead =_daed .Push (MakeReal (-_bfba .Val ));return _ead ;}else if _dbd ,_ecgg :=_ccdb .(*PSInteger );_ecgg {_ead =_daed .Push (MakeInteger (-_dbd .Val ));return _ead ;}else {return ErrTypeCheck ;};};func (_fdba *PSOperand )ge (_dff *PSStack )error {_ded ,_fda :=_dff .PopNumberAsFloat64 ();if _fda !=nil {return _fda ;};_ddb ,_fda :=_dff .PopNumberAsFloat64 ();if _fda !=nil {return _fda ;};if _a .Abs (_ddb -_ded )< _g {_gbbd :=_dff .Push (MakeBool (true ));return _gbbd ;}else if _ddb > _ded {_dfe :=_dff .Push (MakeBool (true ));return _dfe ;}else {_egff :=_dff .Push (MakeBool (false ));return _egff ;};};func (_bab *PSOperand )exch (_adb *PSStack )error {_aec ,_cfb :=_adb .Pop ();if _cfb !=nil {return _cfb ;};_eba ,_cfb :=_adb .Pop ();if _cfb !=nil {return _cfb ;};_cfb =_adb .Push (_aec );if _cfb !=nil {return _cfb ;};_cfb =_adb .Push (_eba );return _cfb ;};func (_fefe *PSOperand )sqrt (_daca *PSStack )error {_edg ,_ebg :=_daca .PopNumberAsFloat64 ();if _ebg !=nil {return _ebg ;};if _edg < 0{return ErrRangeCheck ;};_edb :=_a .Sqrt (_edg );_ebg =_daca .Push (MakeReal (_edb ));return _ebg ;};func (_dbc *PSOperand )roll (_ebec *PSStack )error {_faaa ,_facg :=_ebec .Pop ();if _facg !=nil {return _facg ;};_beae ,_facg :=_ebec .Pop ();if _facg !=nil {return _facg ;};_gff ,_ffc :=_faaa .(*PSInteger );if !_ffc {return ErrTypeCheck ;};_dca ,_ffc :=_beae .(*PSInteger );if !_ffc {return ErrTypeCheck ;};if _dca .Val < 0{return ErrRangeCheck ;};if _dca .Val ==0||_dca .Val ==1{return nil ;};if _dca .Val > len (*_ebec ){return ErrStackUnderflow ;};for _bec :=0;_bec < _dgad (_gff .Val );_bec ++{var _ggb []PSObject ;_ggb =(*_ebec )[len (*_ebec )-(_dca .Val ):len (*_ebec )];if _gff .Val > 0{_gba :=_ggb [len (_ggb )-1];_ggb =append ([]PSObject {_gba },_ggb [0:len (_ggb )-1]...);}else {_cbab :=_ggb [len (_ggb )-_dca .Val ];_ggb =append (_ggb [1:],_cbab );};_bfaf :=append ((*_ebec )[0:len (*_ebec )-_dca .Val ],_ggb ...);_ebec =&_bfaf ;};return nil ;};func (_efegb *PSOperand )sin (_ffec *PSStack )error {_cdaa ,_adbf :=_ffec .PopNumberAsFloat64 ();if _adbf !=nil {return _adbf ;};_ffca :=_a .Sin (_cdaa *_a .Pi /180.0);_adbf =_ffec .Push (MakeReal (_ffca ));return _adbf ;};func (_aaa *PSOperand )ifCondition (_efg *PSStack )error {_add ,_ggec :=_efg .Pop ();if _ggec !=nil {return _ggec ;};_gee ,_ggec :=_efg .Pop ();if _ggec !=nil {return _ggec ;};_bgb ,_daf :=_add .(*PSProgram );if !_daf {return ErrTypeCheck ;};_gfb ,_daf :=_gee .(*PSBoolean );if !_daf {return ErrTypeCheck ;};if _gfb .Val {_fbdg :=_bgb .Exec (_efg );return _fbdg ;};return nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_bebb *PSOperand )log (_bagd *PSStack )error {_gcbf ,_faec :=_bagd .PopNumberAsFloat64 ();if _faec !=nil {return _faec ;};_bbg :=_a .Log10 (_gcbf );_faec =_bagd .Push (MakeReal (_bbg ));return _faec ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_ggbf :=PSOperand (val );return &_ggbf };var ErrUndefinedResult =_e .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_gdf *PSOperand )copy (_edd *PSStack )error {_baa ,_ebbd :=_edd .PopInteger ();if _ebbd !=nil {return _ebbd ;};if _baa < 0{return ErrRangeCheck ;};if _baa > len (*_edd ){return ErrRangeCheck ;};*_edd =append (*_edd ,(*_edd )[len (*_edd )-_baa :]...);return nil ;};func (_eee *PSInteger )Duplicate ()PSObject {_ga :=PSInteger {};_ga .Val =_eee .Val ;return &_ga };func (_fg *PSInteger )String ()string {return _dc .Sprintf ("\u0025\u0064",_fg .Val )};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_egg :=PSBoolean {};_egg .Val =val ;return &_egg };func (_gfd *PSOperand )div (_agfd *PSStack )error {_ffe ,_cec :=_agfd .Pop ();if _cec !=nil {return _cec ;};_deee ,_cec :=_agfd .Pop ();if _cec !=nil {return _cec ;};_gbgb ,_baf :=_ffe .(*PSReal );_aeb ,_cefb :=_ffe .(*PSInteger );if !_baf &&!_cefb {return ErrTypeCheck ;};if _baf &&_gbgb .Val ==0{return ErrUndefinedResult ;};if _cefb &&_aeb .Val ==0{return ErrUndefinedResult ;};_fbda ,_cad :=_deee .(*PSReal );_ac ,_agb :=_deee .(*PSInteger );if !_cad &&!_agb {return ErrTypeCheck ;};var _fcaf float64 =0;if _cad {_fcaf =_fbda .Val ;}else {_fcaf =float64 (_ac .Val );};if _baf {_fcaf /=_gbgb .Val ;}else {_fcaf /=float64 (_aeb .Val );};_cec =_agfd .Push (MakeReal (_fcaf ));return _cec ;};func (_ed *PSOperand )and (_df *PSStack )error {_ecc ,_afc :=_df .Pop ();if _afc !=nil {return _afc ;};_dee ,_afc :=_df .Pop ();if _afc !=nil {return _afc ;};if _bc ,_ged :=_ecc .(*PSBoolean );_ged {_fdc ,_geg :=_dee .(*PSBoolean );if !_geg {return ErrTypeCheck ;};_afc =_df .Push (MakeBool (_bc .Val &&_fdc .Val ));return _afc ;};if _ebb ,_ca :=_ecc .(*PSInteger );_ca {_cc ,_fcf :=_dee .(*PSInteger );if !_fcf {return ErrTypeCheck ;};_afc =_df .Push (MakeInteger (_ebb .Val &_cc .Val ));return _afc ;};return ErrTypeCheck ;};func (_bgfd *PSOperand )mod (_dec *PSStack )error {_bfa ,_bdba :=_dec .Pop ();if _bdba !=nil {return _bdba ;};_gbe ,_bdba :=_dec .Pop ();if _bdba !=nil {return _bdba ;};_ecdb ,_gbc :=_bfa .(*PSInteger );if !_gbc {return ErrTypeCheck ;};if _ecdb .Val ==0{return ErrUndefinedResult ;};_bfag ,_gbc :=_gbe .(*PSInteger );if !_gbc {return ErrTypeCheck ;};_caad :=_bfag .Val %_ecdb .Val ;_bdba =_dec .Push (MakeInteger (_caad ));return _bdba ;};func (_bac *PSBoolean )Duplicate ()PSObject {_cg :=PSBoolean {};_cg .Val =_bac .Val ;return &_cg };

// Append appends an object to the PSProgram.
func (_fd *PSProgram )Append (obj PSObject ){*_fd =append (*_fd ,obj )};func (_gce *PSInteger )DebugString ()string {return _dc .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_gce .Val );};func (_ffad *PSOperand )round (_ecae *PSStack )error {_abe ,_fdccf :=_ecae .Pop ();if _fdccf !=nil {return _fdccf ;};if _fbdc ,_bed :=_abe .(*PSReal );_bed {_fdccf =_ecae .Push (MakeReal (_a .Floor (_fbdc .Val +0.5)));}else if _bdbf ,_cead :=_abe .(*PSInteger );_cead {_fdccf =_ecae .Push (MakeInteger (_bdbf .Val ));}else {return ErrTypeCheck ;};return _fdccf ;};func (_gbge *PSOperand )index (_fae *PSStack )error {_ace ,_cfc :=_fae .Pop ();if _cfc !=nil {return _cfc ;};_fcad ,_gag :=_ace .(*PSInteger );if !_gag {return ErrTypeCheck ;};if _fcad .Val < 0{return ErrRangeCheck ;};if _fcad .Val > len (*_fae )-1{return ErrStackUnderflow ;};_bag :=(*_fae )[len (*_fae )-1-_fcad .Val ];_cfc =_fae .Push (_bag .Duplicate ());return _cfc ;};func (_bae *PSOperand )pop (_bba *PSStack )error {_ ,_ggae :=_bba .Pop ();if _ggae !=nil {return _ggae ;};return nil ;};func _dgad (_acd int )int {if _acd < 0{return -_acd ;};return _acd ;};

// Push pushes an object on top of the stack.
func (_bfc *PSStack )Push (obj PSObject )error {if len (*_bfc )> 100{return ErrStackOverflow ;};*_bfc =append (*_bfc ,obj );return nil ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_fecf *PSStack )PopInteger ()(int ,error ){_adda ,_ggeg :=_fecf .Pop ();if _ggeg !=nil {return 0,_ggeg ;};if _ddgc ,_eag :=_adda .(*PSInteger );_eag {return _ddgc .Val ,nil ;};return 0,ErrTypeCheck ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// String returns a string representation of the stack.
func (_dgbcd *PSStack )String ()string {_dgfe :="\u005b\u0020";for _ ,_gac :=range *_dgbcd {_dgfe +=_gac .String ();_dgfe +="\u0020";};_dgfe +="\u005d";return _dgfe ;};func (_deb *PSOperand )xor (_cee *PSStack )error {_gbbb ,_bddc :=_cee .Pop ();if _bddc !=nil {return _bddc ;};_beg ,_bddc :=_cee .Pop ();if _bddc !=nil {return _bddc ;};if _fea ,_aae :=_gbbb .(*PSBoolean );_aae {_afcg ,_deg :=_beg .(*PSBoolean );if !_deg {return ErrTypeCheck ;};_bddc =_cee .Push (MakeBool (_fea .Val !=_afcg .Val ));return _bddc ;};if _fdbe ,_agbe :=_gbbb .(*PSInteger );_agbe {_edgc ,_ccg :=_beg .(*PSInteger );if !_ccg {return ErrTypeCheck ;};_bddc =_cee .Push (MakeInteger (_fdbe .Val ^_edgc .Val ));return _bddc ;};return ErrTypeCheck ;};func (_fa *PSProgram )DebugString ()string {_gf :="\u007b\u0020";for _ ,_fge :=range *_fa {_gf +=_fge .DebugString ();_gf +="\u0020";};_gf +="\u007d";return _gf ;};func (_gde *PSOperand )add (_gge *PSStack )error {_ad ,_dd :=_gge .Pop ();if _dd !=nil {return _dd ;};_gcg ,_dd :=_gge .Pop ();if _dd !=nil {return _dd ;};_gcef ,_gb :=_ad .(*PSReal );_cgdc ,_fca :=_ad .(*PSInteger );if !_gb &&!_fca {return ErrTypeCheck ;};_gea ,_aefa :=_gcg .(*PSReal );_bbb ,_dge :=_gcg .(*PSInteger );if !_aefa &&!_dge {return ErrTypeCheck ;};if _fca &&_dge {_bbc :=_cgdc .Val +_bbb .Val ;_de :=_gge .Push (MakeInteger (_bbc ));return _de ;};var _eebb float64 =0;if _gb {_eebb =_gcef .Val ;}else {_eebb =float64 (_cgdc .Val );};if _aefa {_eebb +=_gea .Val ;}else {_eebb +=float64 (_bbb .Val );};_dd =_gge .Push (MakeReal (_eebb ));return _dd ;};

// Empty empties the stack.
func (_ddg *PSStack )Empty (){*_ddg =[]PSObject {}};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ge :=&PSExecutor {};_ge .Stack =NewPSStack ();_ge ._gc =program ;return _ge ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_dcb *PSStack )DebugString ()string {_cgg :="\u005b\u0020";for _ ,_bfab :=range *_dcb {_cgg +=_bfab .DebugString ();_cgg +="\u0020";};_cgg +="\u005d";return _cgg ;};

// Pop pops an object from the top of the stack.
func (_gcdg *PSStack )Pop ()(PSObject ,error ){if len (*_gcdg )< 1{return nil ,ErrStackUnderflow ;};_gbda :=(*_gcdg )[len (*_gcdg )-1];*_gcdg =(*_gcdg )[0:len (*_gcdg )-1];return _gbda ,nil ;};var ErrStackUnderflow =_e .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_fef *PSOperand )lt (_bbbf *PSStack )error {_dae ,_aegb :=_bbbf .PopNumberAsFloat64 ();if _aegb !=nil {return _aegb ;};_gfg ,_aegb :=_bbbf .PopNumberAsFloat64 ();if _aegb !=nil {return _aegb ;};if _a .Abs (_gfg -_dae )< _g {_aab :=_bbbf .Push (MakeBool (false ));return _aab ;}else if _gfg < _dae {_ceff :=_bbbf .Push (MakeBool (true ));return _ceff ;}else {_faa :=_bbbf .Push (MakeBool (false ));return _faa ;};};func (_dfg *PSOperand )sub (_cadc *PSStack )error {_fba ,_gcgeg :=_cadc .Pop ();if _gcgeg !=nil {return _gcgeg ;};_fffa ,_gcgeg :=_cadc .Pop ();if _gcgeg !=nil {return _gcgeg ;};_eebf ,_efga :=_fba .(*PSReal );_egbe ,_gdag :=_fba .(*PSInteger );if !_efga &&!_gdag {return ErrTypeCheck ;};_aceg ,_dada :=_fffa .(*PSReal );_dcgc ,_ccfa :=_fffa .(*PSInteger );if !_dada &&!_ccfa {return ErrTypeCheck ;};if _gdag &&_ccfa {_ffff :=_dcgc .Val -_egbe .Val ;_bde :=_cadc .Push (MakeInteger (_ffff ));return _bde ;};var _edee float64 =0;if _dada {_edee =_aceg .Val ;}else {_edee =float64 (_dcgc .Val );};if _efga {_edee -=_eebf .Val ;}else {_edee -=float64 (_egbe .Val );};_gcgeg =_cadc .Push (MakeReal (_edee ));return _gcgeg ;};func (_fgde *PSParser )parseBool ()(*PSBoolean ,error ){_aaec ,_acg :=_fgde ._dadg .Peek (4);if _acg !=nil {return MakeBool (false ),_acg ;};if (len (_aaec )>=4)&&(string (_aaec [:4])=="\u0074\u0072\u0075\u0065"){_fgde ._dadg .Discard (4);return MakeBool (true ),nil ;};_aaec ,_acg =_fgde ._dadg .Peek (5);if _acg !=nil {return MakeBool (false ),_acg ;};if (len (_aaec )>=5)&&(string (_aaec [:5])=="\u0066\u0061\u006cs\u0065"){_fgde ._dadg .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_cef *PSOperand )bitshift (_egb *PSStack )error {_efe ,_fbd :=_egb .PopInteger ();if _fbd !=nil {return _fbd ;};_fdb ,_fbd :=_egb .PopInteger ();if _fbd !=nil {return _fbd ;};var _gdcf int ;if _efe >=0{_gdcf =_fdb <<uint (_efe );}else {_gdcf =_fdb >>uint (-_efe );};_fbd =_egb .Push (MakeInteger (_gdcf ));return _fbd ;};func (_bdb *PSOperand )gt (_aca *PSStack )error {_cfbd ,_dfa :=_aca .PopNumberAsFloat64 ();if _dfa !=nil {return _dfa ;};_cgc ,_dfa :=_aca .PopNumberAsFloat64 ();if _dfa !=nil {return _dfa ;};if _a .Abs (_cgc -_cfbd )< _g {_ebff :=_aca .Push (MakeBool (false ));return _ebff ;}else if _cgc > _cfbd {_eac :=_aca .Push (MakeBool (true ));return _eac ;}else {_fgdc :=_aca .Push (MakeBool (false ));return _fgdc ;};};func (_eeea *PSProgram )Duplicate ()PSObject {_gec :=&PSProgram {};for _ ,_cdc :=range *_eeea {_gec .Append (_cdc .Duplicate ());};return _gec ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bcf *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_abed ,_ggaa :=_bcf .Pop ();if _ggaa !=nil {return 0,_ggaa ;};if _age ,_cacf :=_abed .(*PSReal );_cacf {return _age .Val ,nil ;}else if _baba ,_gegb :=_abed .(*PSInteger );_gegb {return float64 (_baba .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_cdae *PSOperand )mul (_bfb *PSStack )error {_bcee ,_ebe :=_bfb .Pop ();if _ebe !=nil {return _ebe ;};_gdfb ,_ebe :=_bfb .Pop ();if _ebe !=nil {return _ebe ;};_gfe ,_aga :=_bcee .(*PSReal );_dffg ,_fgeb :=_bcee .(*PSInteger );if !_aga &&!_fgeb {return ErrTypeCheck ;};_aed ,_gcbfc :=_gdfb .(*PSReal );_addg ,_eaf :=_gdfb .(*PSInteger );if !_gcbfc &&!_eaf {return ErrTypeCheck ;};if _fgeb &&_eaf {_babe :=_dffg .Val *_addg .Val ;_agag :=_bfb .Push (MakeInteger (_babe ));return _agag ;};var _cfag float64 =0;if _aga {_cfag =_gfe .Val ;}else {_cfag =float64 (_dffg .Val );};if _gcbfc {_cfag *=_aed .Val ;}else {_cfag *=float64 (_addg .Val );};_ebe =_bfb .Push (MakeReal (_cfag ));return _ebe ;};

// Exec executes the program, typically leaving output values on the stack.
func (_cbf *PSProgram )Exec (stack *PSStack )error {for _ ,_fde :=range *_cbf {var _cgd error ;switch _ec :=_fde .(type ){case *PSInteger :_dgb :=_ec ;_cgd =stack .Push (_dgb );case *PSReal :_gdc :=_ec ;_cgd =stack .Push (_gdc );case *PSBoolean :_ecd :=_ec ;_cgd =stack .Push (_ecd );case *PSProgram :_ef :=_ec ;_cgd =stack .Push (_ef );case *PSOperand :_cf :=_ec ;_cgd =_cf .Exec (stack );default:return ErrTypeCheck ;};if _cgd !=nil {return _cgd ;};};return nil ;};func (_bga *PSOperand )cvi (_eca *PSStack )error {_fcg ,_beb :=_eca .Pop ();if _beb !=nil {return _beb ;};if _gbb ,_dgbc :=_fcg .(*PSReal );_dgbc {_agf :=int (_gbb .Val );_beb =_eca .Push (MakeInteger (_agf ));}else if _dgec ,_ade :=_fcg .(*PSInteger );_ade {_bcg :=_dgec .Val ;_beb =_eca .Push (MakeInteger (_bcg ));}else {return ErrTypeCheck ;};return _beb ;};func (_dac *PSOperand )ne (_dbb *PSStack )error {_agda :=_dac .eq (_dbb );if _agda !=nil {return _agda ;};_agda =_dac .not (_dbb );return _agda ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_dadg *_c .Reader };var ErrRangeCheck =_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_gdfa *PSOperand )ifelse (_cae *PSStack )error {_fgaf ,_cbb :=_cae .Pop ();if _cbb !=nil {return _cbb ;};_ccd ,_cbb :=_cae .Pop ();if _cbb !=nil {return _cbb ;};_gda ,_cbb :=_cae .Pop ();if _cbb !=nil {return _cbb ;};_ffeb ,_fgfg :=_fgaf .(*PSProgram );if !_fgfg {return ErrTypeCheck ;};_fgfb ,_fgfg :=_ccd .(*PSProgram );if !_fgfg {return ErrTypeCheck ;};_bbe ,_fgfg :=_gda .(*PSBoolean );if !_fgfg {return ErrTypeCheck ;};if _bbe .Val {_ada :=_fgfb .Exec (_cae );return _ada ;};_cbb =_ffeb .Exec (_cae );return _cbb ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_fbac :=PSReal {};_fbac .Val =val ;return &_fbac };