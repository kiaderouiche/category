//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ae "errors";_ac "fmt";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_e "math";_a "strings";);func (_d *EncodedTable )Decode (r _b .StreamReader )(int64 ,error ){return _d ._fb .Decode (r )};func (_bbe *StandardTable )Decode (r _b .StreamReader )(int64 ,error ){return _bbe ._fdd .Decode (r )};type EncodedTable struct{BasicTabler ;_fb *InternalNode ;};type FixedSizeTable struct{_cfd *InternalNode };type InternalNode struct{_fbg int32 ;_ee Node ;_cda Node ;};func (_cg *EncodedTable )String ()string {return _cg ._fb .String ()+"\u000a"};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_b .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func _bbbg (_gd ,_cgdf int32 )string {var _fca int32 ;_dbd :=make ([]rune ,_cgdf );for _fda :=int32 (1);_fda <=_cgdf ;_fda ++{_fca =_gd >>uint (_cgdf -_fda )&1;if _fca !=0{_dbd [_fda -1]='1';}else {_dbd [_fda -1]='0';};};return string (_dbd );};func (_cf *EncodedTable )RootNode ()*InternalNode {return _cf ._fb };func _gdf (_bdd []*Code ){var _cgf int32 ;for _ ,_ebd :=range _bdd {_cgf =_cbf (_cgf ,_ebd ._cdg );};_ddf :=make ([]int32 ,_cgf +1);for _ ,_bdb :=range _bdd {_ddf [_bdb ._cdg ]++;};var _baa int32 ;_dge :=make ([]int32 ,len (_ddf )+1);_ddf [0]=0;for _gb :=int32 (1);_gb <=int32 (len (_ddf ));_gb ++{_dge [_gb ]=(_dge [_gb -1]+(_ddf [_gb -1]))<<1;_baa =_dge [_gb ];for _ ,_ecf :=range _bdd {if _ecf ._cdg ==_gb {_ecf ._bbb =_baa ;_baa ++;};};};};func (_fbc *StandardTable )String ()string {return _fbc ._fdd .String ()+"\u000a"};func (_eaf *OutOfBandNode )String ()string {return _ac .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_e .MaxInt64 ));};func _cd (_ecc *Code )*OutOfBandNode {return &OutOfBandNode {}};type OutOfBandNode struct{};var _ Node =&OutOfBandNode {};func (_aede *InternalNode )Decode (r _b .StreamReader )(int64 ,error ){_agc ,_da :=r .ReadBit ();if _da !=nil {return 0,_da ;};if _agc ==0{return _aede ._ee .Decode (r );};return _aede ._cda .Decode (r );};type ValueNode struct{_fa int32 ;_ed int32 ;_fcg bool ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_eg ){return nil ,_ae .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fcb :=_eg [number -1];if _fcb ==nil {var _aab error ;_fcb ,_aab =_dc (_cgd [number -1]);if _aab !=nil {return nil ,_aab ;};_eg [number -1]=_fcb ;};return _fcb ,nil ;};func (_ea *OutOfBandNode )Decode (r _b .StreamReader )(int64 ,error ){return int64 (_e .MaxInt64 ),nil };func (_ffg *ValueNode )Decode (r _b .StreamReader )(int64 ,error ){_ce ,_bb :=r .ReadBits (byte (_ffg ._fa ));if _bb !=nil {return 0,_bb ;};if _ffg ._fcg {_ce =-_ce ;};return int64 (_ffg ._ed )+int64 (_ce ),nil ;};func (_dda *InternalNode )pad (_dg *_a .Builder ){for _cde :=int32 (0);_cde < _dda ._fbg ;_cde ++{_dg .WriteString ("\u0020\u0020\u0020");};};type StandardTable struct{_fdd *InternalNode };func (_ffga *InternalNode )append (_fcc *Code )(_bfef error ){if _fcc ._cdg ==0{return nil ;};_cc :=_fcc ._cdg -1-_ffga ._fbg ;if _cc < 0{return _ae .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_dd :=(_fcc ._bbb >>uint (_cc ))&0x1;if _cc ==0{if _fcc ._ede ==-1{if _dd ==1{if _ffga ._cda !=nil {return _ac .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fcc );};_ffga ._cda =_cd (_fcc );}else {if _ffga ._ee !=nil {return _ac .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fcc );};_ffga ._ee =_cd (_fcc );};}else {if _dd ==1{if _ffga ._cda !=nil {return _ac .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fcc );};_ffga ._cda =_aga (_fcc );}else {if _ffga ._ee !=nil {return _ac .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fcc );};_ffga ._ee =_aga (_fcc );};};}else {if _dd ==1{if _ffga ._cda ==nil {_ffga ._cda =_cdee (_ffga ._fbg +1);};if _bfef =_ffga ._cda .(*InternalNode ).append (_fcc );_bfef !=nil {return _bfef ;};}else {if _ffga ._ee ==nil {_ffga ._ee =_cdee (_ffga ._fbg +1);};if _bfef =_ffga ._ee .(*InternalNode ).append (_fcc );_bfef !=nil {return _bfef ;};};};return nil ;};type Node interface{Decode (_dea _b .StreamReader )(int64 ,error );String ()string ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_ff :=&EncodedTable {_fb :&InternalNode {},BasicTabler :table };if _bd :=_ff .parseTable ();_bd !=nil {return nil ,_bd ;};return _ff ,nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ec :=&FixedSizeTable {_cfd :&InternalNode {}};if _ade :=_ec .InitTree (codeTable );_ade !=nil {return nil ,_ade ;};return _ec ,nil ;};type Tabler interface{Decode (_adb _b .StreamReader )(int64 ,error );InitTree (_cgc []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_acb *FixedSizeTable )String ()string {return _acb ._cfd .String ()+"\u000a"};type Code struct{_cdg int32 ;_ede int32 ;_dbf int32 ;_eccc bool ;_bbb int32 ;};var _cgd =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};var _eg =make ([]Tabler ,len (_cgd ));func (_fc *EncodedTable )InitTree (codeTable []*Code )error {_gdf (codeTable );for _ ,_c :=range codeTable {if _eb :=_fc ._fb .append (_c );_eb !=nil {return _eb ;};};return nil ;};func _cbf (_def ,_aeae int32 )int32 {if _def > _aeae {return _def ;};return _aeae ;};var _ Node =&ValueNode {};func (_cb *StandardTable )InitTree (codeTable []*Code )error {_gdf (codeTable );for _ ,_ebg :=range codeTable {if _eae :=_cb ._fdd .append (_ebg );_eae !=nil {return _eae ;};};return nil ;};func (_aed *FixedSizeTable )Decode (r _b .StreamReader )(int64 ,error ){return _aed ._cfd .Decode (r )};var _ Tabler =&EncodedTable {};func (_bc *ValueNode )String ()string {return _ac .Sprintf ("\u0025\u0064\u002f%\u0064",_bc ._fa ,_bc ._ed );};func (_ded *StandardTable )RootNode ()*InternalNode {return _ded ._fdd };var _ Node =&InternalNode {};func (_ebb *FixedSizeTable )RootNode ()*InternalNode {return _ebb ._cfd };func (_fce *InternalNode )String ()string {_db :=&_a .Builder {};_db .WriteString ("\u000a");_fce .pad (_db );_db .WriteString ("\u0030\u003a\u0020");_db .WriteString (_fce ._ee .String ()+"\u000a");_fce .pad (_db );_db .WriteString ("\u0031\u003a\u0020");_db .WriteString (_fce ._cda .String ()+"\u000a");return _db .String ();};func (_bf *EncodedTable )parseTable ()error {var (_aea []*Code ;_ag ,_aeag ,_ad int32 ;_bfe uint64 ;_g error ;);_aa :=_bf .StreamReader ();_de :=_bf .HtLow ();for _de < _bf .HtHigh (){_bfe ,_g =_aa .ReadBits (byte (_bf .HtPS ()));if _g !=nil {return _g ;};_ag =int32 (_bfe );_bfe ,_g =_aa .ReadBits (byte (_bf .HtRS ()));if _g !=nil {return _g ;};_aeag =int32 (_bfe );_aea =append (_aea ,NewCode (_ag ,_aeag ,_ad ,false ));_de +=1<<uint (_aeag );};_bfe ,_g =_aa .ReadBits (byte (_bf .HtPS ()));if _g !=nil {return _g ;};_ag =int32 (_bfe );_aeag =32;_ad =_bf .HtLow ()-1;_aea =append (_aea ,NewCode (_ag ,_aeag ,_ad ,true ));_bfe ,_g =_aa .ReadBits (byte (_bf .HtPS ()));if _g !=nil {return _g ;};_ag =int32 (_bfe );_aeag =32;_ad =_bf .HtHigh ();_aea =append (_aea ,NewCode (_ag ,_aeag ,_ad ,false ));if _bf .HtOOB ()==1{_bfe ,_g =_aa .ReadBits (byte (_bf .HtPS ()));if _g !=nil {return _g ;};_ag =int32 (_bfe );_aea =append (_aea ,NewCode (_ag ,-1,-1,false ));};if _g =_bf .InitTree (_aea );_g !=nil {return _g ;};return nil ;};func _dc (_eec [][]int32 )(*StandardTable ,error ){var _agb []*Code ;for _bfc :=0;_bfc < len (_eec );_bfc ++{_bfd :=_eec [_bfc ][0];_eca :=_eec [_bfc ][1];_age :=_eec [_bfc ][2];var _cee bool ;if len (_eec [_bfc ])> 3{_cee =true ;};_agb =append (_agb ,NewCode (_bfd ,_eca ,_age ,_cee ));};_ebgb :=&StandardTable {_fdd :_cdee (0)};if _ba :=_ebgb .InitTree (_agb );_ba !=nil {return nil ,_ba ;};return _ebgb ,nil ;};func _cdee (_fg int32 )*InternalNode {return &InternalNode {_fbg :_fg }};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_cdg :prefixLength ,_ede :rangeLength ,_dbf :rangeLow ,_eccc :isLowerRange ,_bbb :-1};};func (_aeaa *FixedSizeTable )InitTree (codeTable []*Code )error {_gdf (codeTable );for _ ,_dee :=range codeTable {_be :=_aeaa ._cfd .append (_dee );if _be !=nil {return _be ;};};return nil ;};func _aga (_adg *Code )*ValueNode {return &ValueNode {_fa :_adg ._ede ,_ed :_adg ._dbf ,_fcg :_adg ._eccc }};func (_af *Code )String ()string {var _aaf string ;if _af ._bbb !=-1{_aaf =_bbbg (_af ._bbb ,_af ._cdg );}else {_aaf ="\u003f";};return _ac .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_aaf ,_af ._cdg ,_af ._ede ,_af ._dbf );};