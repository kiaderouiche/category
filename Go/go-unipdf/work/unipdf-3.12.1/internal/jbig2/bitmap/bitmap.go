//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_cfg "encoding/binary";_bb "github.com/stretchr/testify/require";_cf "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_cc "github.com/unidoc/unipdf/v3/internal/imageutil";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fc "image";_gd "math";_c "sort";_bg "strings";_f "testing";);func _ac (_gbg ,_cfe *Bitmap ,_dedf int ,_dcc []byte ,_gbb int )(_fbfd error ){const _gca ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_ggb ,_fdf ,_baa ,_ebd ,_eef ,_ged ,_bbd ,_dgc int ;_beb ,_gbc ,_cbg ,_geb uint32 ;_cbf ,_fae byte ;_afaa uint16 ;);_gcd :=make ([]byte ,4);_eed :=make ([]byte ,4);for _baa =0;_baa < _gbg .Height -1;_baa ,_ebd =_baa +2,_ebd +1{_ggb =_baa *_gbg .RowStride ;_fdf =_ebd *_cfe .RowStride ;for _eef ,_ged =0,0;_eef < _gbb ;_eef ,_ged =_eef +4,_ged +1{for _bbd =0;_bbd < 4;_bbd ++{_dgc =_ggb +_eef +_bbd ;if _dgc <=len (_gbg .Data )-1&&_dgc < _ggb +_gbg .RowStride {_gcd [_bbd ]=_gbg .Data [_dgc ];}else {_gcd [_bbd ]=0x00;};_dgc =_ggb +_gbg .RowStride +_eef +_bbd ;if _dgc <=len (_gbg .Data )-1&&_dgc < _ggb +(2*_gbg .RowStride ){_eed [_bbd ]=_gbg .Data [_dgc ];}else {_eed [_bbd ]=0x00;};};_beb =_cfg .BigEndian .Uint32 (_gcd );_gbc =_cfg .BigEndian .Uint32 (_eed );_cbg =_beb &_gbc ;_cbg |=_cbg <<1;_geb =_beb |_gbc ;_geb &=_geb <<1;_gbc =_cbg &_geb ;_gbc &=0xaaaaaaaa;_beb =_gbc |(_gbc <<7);_cbf =byte (_beb >>24);_fae =byte ((_beb >>8)&0xff);_dgc =_fdf +_ged ;if _dgc +1==len (_cfe .Data )-1||_dgc +1>=_fdf +_cfe .RowStride {if _fbfd =_cfe .SetByte (_dgc ,_dcc [_cbf ]);_fbfd !=nil {return _b .Wrapf (_fbfd ,_gca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgc );};}else {_afaa =(uint16 (_dcc [_cbf ])<<8)|uint16 (_dcc [_fae ]);if _fbfd =_cfe .setTwoBytes (_dgc ,_afaa );_fbfd !=nil {return _b .Wrapf (_fbfd ,_gca ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgc );};_ged ++;};};};return nil ;};func (_cbadc *BitmapsArray )GetBox (i int )(*_fc .Rectangle ,error ){const _bbebc ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _cbadc ==nil {return nil ,_b .Error (_bbebc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_cbadc .Boxes )-1{return nil ,_b .Errorf (_bbebc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cbadc .Boxes [i ],nil ;};func TstPSymbol (t *_f .T )*Bitmap {t .Helper ();_gcba :=New (5,8);_bb .NoError (t ,_gcba .SetPixel (0,0,1));_bb .NoError (t ,_gcba .SetPixel (1,0,1));_bb .NoError (t ,_gcba .SetPixel (2,0,1));_bb .NoError (t ,_gcba .SetPixel (3,0,1));_bb .NoError (t ,_gcba .SetPixel (4,1,1));_bb .NoError (t ,_gcba .SetPixel (0,1,1));_bb .NoError (t ,_gcba .SetPixel (4,2,1));_bb .NoError (t ,_gcba .SetPixel (0,2,1));_bb .NoError (t ,_gcba .SetPixel (4,3,1));_bb .NoError (t ,_gcba .SetPixel (0,3,1));_bb .NoError (t ,_gcba .SetPixel (0,4,1));_bb .NoError (t ,_gcba .SetPixel (1,4,1));_bb .NoError (t ,_gcba .SetPixel (2,4,1));_bb .NoError (t ,_gcba .SetPixel (3,4,1));_bb .NoError (t ,_gcba .SetPixel (0,5,1));_bb .NoError (t ,_gcba .SetPixel (0,6,1));_bb .NoError (t ,_gcba .SetPixel (0,7,1));return _gcba ;};type Getter interface{GetBitmap ()*Bitmap ;};func (_fdce *ClassedPoints )YAtIndex (i int )float32 {return (*_fdce .Points )[_fdce .IntSlice [i ]].Y };func _cdde (_agfc ,_gede *Bitmap ,_acd ,_gfbf int )(*Bitmap ,error ){const _gafb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _gede ==nil {return nil ,_b .Error (_gafb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _acd < 1||_gfbf < 1{return nil ,_b .Error (_gafb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _acd ==1&&_gfbf ==1{_gdbe ,_edgdb :=_fffd (_agfc ,_gede );if _edgdb !=nil {return nil ,_b .Wrap (_edgdb ,_gafb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gdbe ,nil ;};if _acd ==1||_gfbf ==1{_fdac :=SelCreateBrick (_gfbf ,_acd ,_gfbf /2,_acd /2,SelHit );_dcaga ,_cdcg :=_fgff (_agfc ,_gede ,_fdac );if _cdcg !=nil {return nil ,_b .Wrap (_cdcg ,_gafb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _dcaga ,nil ;};_dgg :=SelCreateBrick (1,_acd ,0,_acd /2,SelHit );_dgef :=SelCreateBrick (_gfbf ,1,_gfbf /2,0,SelHit );_bbed ,_eagf :=_fgff (nil ,_gede ,_dgg );if _eagf !=nil {return nil ,_b .Wrap (_eagf ,_gafb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_agfc ,_eagf =_fgff (_agfc ,_bbed ,_dgef );if _eagf !=nil {return nil ,_b .Wrap (_eagf ,_gafb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _agfc ,nil ;};func (_cedd *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _eaec (_cedd ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_gfgca *ClassedPoints )Swap (i ,j int ){_gfgca .IntSlice [i ],_gfgca .IntSlice [j ]=_gfgca .IntSlice [j ],_gfgca .IntSlice [i ];};func (_dfge *Bitmap )CreateTemplate ()*Bitmap {return _dfge .createTemplate ()};type SizeSelection int ;func (_aaeg *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _fgffa ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_aaeg .IntSlice .Size (){return 0,_b .Errorf (_fgffa ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_aaeg .YAtIndex (i )),nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func _ffeab (_fbdee ,_bfcdd ,_cgdf byte )byte {return (_fbdee &^(_cgdf ))|(_bfcdd &_cgdf )};func (_acg *Bitmap )Equivalent (s *Bitmap )bool {return _acg .equivalent (s )};func (_bgcg *Bitmap )And (s *Bitmap )(_abf *Bitmap ,_aca error ){const _bda ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bgcg ==nil {return nil ,_b .Error (_bda ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_b .Error (_bda ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bgcg .SizesEqual (s ){_cf .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_bda );};if _abf ,_aca =_fffd (_abf ,_bgcg );_aca !=nil {return nil ,_b .Wrap (_aca ,_bda ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _aca =_abf .RasterOperation (0,0,_abf .Width ,_abf .Height ,PixSrcAndDst ,s ,0,0);_aca !=nil {return nil ,_b .Wrap (_aca ,_bda ,"");};return _abf ,nil ;};func _ecfa (_ecfbg *Bitmap ,_afca ...MorphProcess )(_ggfg *Bitmap ,_ecge error ){const _adbe ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _ecfbg ==nil {return nil ,_b .Error (_adbe ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_afca )==0{return nil ,_b .Error (_adbe ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _ecge =_acbg (_afca ...);_ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};var _ddcgbb ,_egbca ,_dfgf int ;_ggfg =_ecfbg .Copy ();for _ ,_cbfee :=range _afca {switch _cbfee .Operation {case MopDilation :_ddcgbb ,_egbca =_cbfee .getWidthHeight ();_ggfg ,_ecge =DilateBrick (nil ,_ggfg ,_ddcgbb ,_egbca );if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};case MopErosion :_ddcgbb ,_egbca =_cbfee .getWidthHeight ();_ggfg ,_ecge =_cdde (nil ,_ggfg ,_ddcgbb ,_egbca );if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};case MopOpening :_ddcgbb ,_egbca =_cbfee .getWidthHeight ();_ggfg ,_ecge =_eadae (nil ,_ggfg ,_ddcgbb ,_egbca );if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};case MopClosing :_ddcgbb ,_egbca =_cbfee .getWidthHeight ();_ggfg ,_ecge =_gabd (nil ,_ggfg ,_ddcgbb ,_egbca );if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};case MopRankBinaryReduction :_ggfg ,_ecge =_bdg (_ggfg ,_cbfee .Arguments ...);if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};case MopReplicativeBinaryExpansion :_ggfg ,_ecge =_caca (_ggfg ,_cbfee .Arguments [0]);if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};case MopAddBorder :_dfgf =_cbfee .Arguments [0];_ggfg ,_ecge =_ggfg .AddBorder (_dfgf ,0);if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"");};default:return nil ,_b .Error (_adbe ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _dfgf > 0{_ggfg ,_ecge =_ggfg .RemoveBorder (_dfgf );if _ecge !=nil {return nil ,_b .Wrap (_ecge ,_adbe ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ggfg ,nil ;};func (_cdcda *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ccbfc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _cdcda ==nil {return nil ,_b .Error (_ccbfc ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_b .Error (_ccbfc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_ceggd :=len (_cdcda .Values );_acdfg :=&Bitmaps {Values :make ([]*Bitmap ,_ceggd ),Boxes :make ([]*_fc .Rectangle ,_ceggd )};var (_bff ,_cdaec *Bitmap ;_adcd *_fc .Rectangle ;_cacge error ;);for _fbfb :=0;_fbfb < _ceggd ;_fbfb ++{if _bff ,_cacge =_cdcda .GetBitmap (_fbfb );_cacge !=nil {return nil ,_b .Wrap (_cacge ,_ccbfc ,"");};if _adcd ,_cacge =_cdcda .GetBox (_fbfb );_cacge !=nil {return nil ,_b .Wrap (_cacge ,_ccbfc ,"");};if _cdaec ,_cacge =s .clipRectangle (_adcd ,nil );_cacge !=nil {return nil ,_b .Wrap (_cacge ,_ccbfc ,"");};if _cdaec ,_cacge =_cdaec .And (_bff );_cacge !=nil {return nil ,_b .Wrap (_cacge ,_ccbfc ,"");};_acdfg .Values [_fbfb ]=_cdaec ;_acdfg .Boxes [_fbfb ]=_adcd ;};return _acdfg ,nil ;};func init (){for _baag :=0;_baag < 256;_baag ++{_cda [_baag ]=uint8 (_baag &0x1)+(uint8 (_baag >>1)&0x1)+(uint8 (_baag >>2)&0x1)+(uint8 (_baag >>3)&0x1)+(uint8 (_baag >>4)&0x1)+(uint8 (_baag >>5)&0x1)+(uint8 (_baag >>6)&0x1)+(uint8 (_baag >>7)&0x1);};};func (_ebbd Points )YSorter ()func (_fdaea ,_edfg int )bool {return func (_ebab ,_ebgea int )bool {return _ebbd [_ebab ].Y < _ebbd [_ebgea ].Y };};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _fegc ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_bgcd ,_fffgc :=p1 .Width ,p1 .Height ;_gcab ,_ccgg :=p3 .Width ,p3 .Height ;if _fa .Abs (_bgcd -_gcab )> maxDiffW {return false ,nil ;};if _fa .Abs (_fffgc -_ccgg )> maxDiffH {return false ,nil ;};_cged :=int (delX +_fa .Sign (delX )*0.5);_ggcb :=int (delY +_fa .Sign (delY )*0.5);var _acad error ;_aadd :=p1 .CreateTemplate ();if _acad =_aadd .RasterOperation (0,0,_bgcd ,_fffgc ,PixSrc ,p1 ,0,0);_acad !=nil {return false ,_b .Wrap (_acad ,_fegc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _acad =_aadd .RasterOperation (_cged ,_ggcb ,_bgcd ,_fffgc ,PixNotSrcAndDst ,p4 ,0,0);_acad !=nil {return false ,_b .Wrap (_acad ,_fegc ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _aadd .Zero (){return false ,nil ;};if _acad =_aadd .RasterOperation (_cged ,_ggcb ,_gcab ,_ccgg ,PixSrc ,p3 ,0,0);_acad !=nil {return false ,_b .Wrap (_acad ,_fegc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _acad =_aadd .RasterOperation (0,0,_gcab ,_ccgg ,PixNotSrcAndDst ,p2 ,0,0);_acad !=nil {return false ,_b .Wrap (_acad ,_fegc ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _aadd .Zero (),nil ;};func _ebfc (_dfce *_fa .Stack ,_agde ,_agfd ,_cgddc ,_gdefa ,_bbaa int ,_cgfd *_fc .Rectangle )(_bdcce error ){const _abfc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _dfce ==nil {return _b .Error (_abfc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cgfd ==nil {return _b .Error (_abfc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_cgfd .Min .X =_fa .Min (_cgfd .Min .X ,_agde );_cgfd .Max .X =_fa .Max (_cgfd .Max .X ,_agfd );_cgfd .Min .Y =_fa .Min (_cgfd .Min .Y ,_cgddc );_cgfd .Max .Y =_fa .Max (_cgfd .Max .Y ,_cgddc );if !(_cgddc +_gdefa >=0&&_cgddc +_gdefa <=_bbaa ){return nil ;};if _dfce .Aux ==nil {return _b .Error (_abfc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _dgdee *fillSegment ;_ccfda ,_fgab :=_dfce .Aux .Pop ();if _fgab {if _dgdee ,_fgab =_ccfda .(*fillSegment );!_fgab {return _b .Error (_abfc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_dgdee =&fillSegment {};};_dgdee ._fabe =_agde ;_dgdee ._fecbf =_agfd ;_dgdee ._agbe =_cgddc ;_dgdee ._efacae =_gdefa ;_dfce .Push (_dgdee );return nil ;};type Boxes []*_fc .Rectangle ;var (_effb =_bgg ();_aecg =_fba ();_febc =_aed (););func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _ddf ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_edg :=_ebdc (width ,height );_edg .Data =data ;if len (data )< height *_edg .RowStride {return nil ,_b .Errorf (_ddf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_edg .RowStride );};return _edg ,nil ;};func _dbab (_facec ,_fffda *Bitmap ,_babf ,_facbg int )(*Bitmap ,error ){const _cbagb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _fffda ==nil {return nil ,_b .Error (_cbagb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _babf < 1||_facbg < 1{return nil ,_b .Error (_cbagb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _babf ==1&&_facbg ==1{return _fffda .Copy (),nil ;};if _babf ==1||_facbg ==1{_baeb :=SelCreateBrick (_facbg ,_babf ,_facbg /2,_babf /2,SelHit );var _bcef error ;_facec ,_bcef =_gfccf (_facec ,_fffda ,_baeb );if _bcef !=nil {return nil ,_b .Wrap (_bcef ,_cbagb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _facec ,nil ;};_ggcg :=SelCreateBrick (1,_babf ,0,_babf /2,SelHit );_cgfe :=SelCreateBrick (_facbg ,1,_facbg /2,0,SelHit );_bddg ,_gege :=_cfbe (nil ,_fffda ,_ggcg );if _gege !=nil {return nil ,_b .Wrap (_gege ,_cbagb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _facec ,_gege =_cfbe (_facec ,_bddg ,_cgfe );_gege !=nil {return nil ,_b .Wrap (_gege ,_cbagb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_gege =_fgff (_bddg ,_facec ,_ggcg );_gege !=nil {return nil ,_b .Wrap (_gege ,_cbagb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_gege =_fgff (_facec ,_bddg ,_cgfe );_gege !=nil {return nil ,_b .Wrap (_gege ,_cbagb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _facec ,nil ;};func TstImageBitmap ()*Bitmap {return _gbfba .Copy ()};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dccf float64 ,_dcdd error ){const _acc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_b .Error (_acc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_b .Error (_acc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_b .Error (_acc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_affc ,_ddbae :=bm1 .Width ,bm1 .Height ;_gdcg ,_afba :=bm2 .Width ,bm2 .Height ;_cfca :=_acgf (_affc -_gdcg );if _cfca > maxDiffW {return 0,nil ;};_dgea :=_acgf (_ddbae -_afba );if _dgea > maxDiffH {return 0,nil ;};var _agdf ,_ecef int ;if delX >=0{_agdf =int (delX +0.5);}else {_agdf =int (delX -0.5);};if delY >=0{_ecef =int (delY +0.5);}else {_ecef =int (delY -0.5);};_cafb :=_gdg (_ecef ,0);_gedb :=_ggeg (_afba +_ecef ,_ddbae );_afec :=bm1 .RowStride *_cafb ;_egdec :=bm2 .RowStride *(_cafb -_ecef );_deec :=_gdg (_agdf ,0);_fgc :=_ggeg (_gdcg +_agdf ,_affc );_gbfb :=bm2 .RowStride ;var _adgg ,_ggff int ;if _agdf >=8{_adgg =_agdf >>3;_afec +=_adgg ;_deec -=_adgg <<3;_fgc -=_adgg <<3;_agdf &=7;}else if _agdf <=-8{_ggff =-((_agdf +7)>>3);_egdec +=_ggff ;_gbfb -=_ggff ;_agdf +=_ggff <<3;};if _deec >=_fgc ||_cafb >=_gedb {return 0,nil ;};_dfag :=(_fgc +7)>>3;var (_gfcca ,_dcad ,_debf byte ;_dfgc ,_aggb ,_gedg int ;);switch {case _agdf ==0:for _gedg =_cafb ;_gedg < _gedb ;_gedg ,_afec ,_egdec =_gedg +1,_afec +bm1 .RowStride ,_egdec +bm2 .RowStride {for _aggb =0;_aggb < _dfag ;_aggb ++{_debf =bm1 .Data [_afec +_aggb ]&bm2 .Data [_egdec +_aggb ];_dfgc +=tab [_debf ];};};case _agdf > 0:if _gbfb < _dfag {for _gedg =_cafb ;_gedg < _gedb ;_gedg ,_afec ,_egdec =_gedg +1,_afec +bm1 .RowStride ,_egdec +bm2 .RowStride {_gfcca ,_dcad =bm1 .Data [_afec ],bm2 .Data [_egdec ]>>uint (_agdf );_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];for _aggb =1;_aggb < _gbfb ;_aggb ++{_gfcca ,_dcad =bm1 .Data [_afec +_aggb ],(bm2 .Data [_egdec +_aggb ]>>uint (_agdf ))|(bm2 .Data [_egdec +_aggb -1]<<uint (8-_agdf ));_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];};_gfcca =bm1 .Data [_afec +_aggb ];_dcad =bm2 .Data [_egdec +_aggb -1]<<uint (8-_agdf );_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];};}else {for _gedg =_cafb ;_gedg < _gedb ;_gedg ,_afec ,_egdec =_gedg +1,_afec +bm1 .RowStride ,_egdec +bm2 .RowStride {_gfcca ,_dcad =bm1 .Data [_afec ],bm2 .Data [_egdec ]>>uint (_agdf );_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];for _aggb =1;_aggb < _dfag ;_aggb ++{_gfcca =bm1 .Data [_afec +_aggb ];_dcad =(bm2 .Data [_egdec +_aggb ]>>uint (_agdf ))|(bm2 .Data [_egdec +_aggb -1]<<uint (8-_agdf ));_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];};};};default:if _dfag < _gbfb {for _gedg =_cafb ;_gedg < _gedb ;_gedg ,_afec ,_egdec =_gedg +1,_afec +bm1 .RowStride ,_egdec +bm2 .RowStride {for _aggb =0;_aggb < _dfag ;_aggb ++{_gfcca =bm1 .Data [_afec +_aggb ];_dcad =bm2 .Data [_egdec +_aggb ]<<uint (-_agdf );_dcad |=bm2 .Data [_egdec +_aggb +1]>>uint (8+_agdf );_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];};};}else {for _gedg =_cafb ;_gedg < _gedb ;_gedg ,_afec ,_egdec =_gedg +1,_afec +bm1 .RowStride ,_egdec +bm2 .RowStride {for _aggb =0;_aggb < _dfag -1;_aggb ++{_gfcca =bm1 .Data [_afec +_aggb ];_dcad =bm2 .Data [_egdec +_aggb ]<<uint (-_agdf );_dcad |=bm2 .Data [_egdec +_aggb +1]>>uint (8+_agdf );_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];};_gfcca =bm1 .Data [_afec +_aggb ];_dcad =bm2 .Data [_egdec +_aggb ]<<uint (-_agdf );_debf =_gfcca &_dcad ;_dfgc +=tab [_debf ];};};};_dccf =float64 (_dfgc )*float64 (_dfgc )/(float64 (area1 )*float64 (area2 ));return _dccf ,nil ;};func _bgg ()(_dbad [256]uint16 ){for _daa :=0;_daa < 256;_daa ++{if _daa &0x01!=0{_dbad [_daa ]|=0x3;};if _daa &0x02!=0{_dbad [_daa ]|=0xc;};if _daa &0x04!=0{_dbad [_daa ]|=0x30;};if _daa &0x08!=0{_dbad [_daa ]|=0xc0;};if _daa &0x10!=0{_dbad [_daa ]|=0x300;};if _daa &0x20!=0{_dbad [_daa ]|=0xc00;};if _daa &0x40!=0{_dbad [_daa ]|=0x3000;};if _daa &0x80!=0{_dbad [_daa ]|=0xc000;};};return _dbad ;};func _aag (_aaa ,_eac *Bitmap ,_cdg int ,_cee []byte ,_ffb int )(_edf error ){const _fefe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_fd ,_dec ,_ee ,_bcg ,_gba ,_fee ,_ebgg ,_agc int ;_ade ,_bcb ,_dfg ,_ece uint32 ;_aegb ,_dfb byte ;_deca uint16 ;);_ca :=make ([]byte ,4);_fafe :=make ([]byte ,4);for _ee =0;_ee < _aaa .Height -1;_ee ,_bcg =_ee +2,_bcg +1{_fd =_ee *_aaa .RowStride ;_dec =_bcg *_eac .RowStride ;for _gba ,_fee =0,0;_gba < _ffb ;_gba ,_fee =_gba +4,_fee +1{for _ebgg =0;_ebgg < 4;_ebgg ++{_agc =_fd +_gba +_ebgg ;if _agc <=len (_aaa .Data )-1&&_agc < _fd +_aaa .RowStride {_ca [_ebgg ]=_aaa .Data [_agc ];}else {_ca [_ebgg ]=0x00;};_agc =_fd +_aaa .RowStride +_gba +_ebgg ;if _agc <=len (_aaa .Data )-1&&_agc < _fd +(2*_aaa .RowStride ){_fafe [_ebgg ]=_aaa .Data [_agc ];}else {_fafe [_ebgg ]=0x00;};};_ade =_cfg .BigEndian .Uint32 (_ca );_bcb =_cfg .BigEndian .Uint32 (_fafe );_dfg =_ade &_bcb ;_dfg |=_dfg <<1;_ece =_ade |_bcb ;_ece &=_ece <<1;_bcb =_dfg |_ece ;_bcb &=0xaaaaaaaa;_ade =_bcb |(_bcb <<7);_aegb =byte (_ade >>24);_dfb =byte ((_ade >>8)&0xff);_agc =_dec +_fee ;if _agc +1==len (_eac .Data )-1||_agc +1>=_dec +_eac .RowStride {if _edf =_eac .SetByte (_agc ,_cee [_aegb ]);_edf !=nil {return _b .Wrapf (_edf ,_fefe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_agc );};}else {_deca =(uint16 (_cee [_aegb ])<<8)|uint16 (_cee [_dfb ]);if _edf =_eac .setTwoBytes (_agc ,_deca );_edf !=nil {return _b .Wrapf (_edf ,_fefe ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_agc );};_fee ++;};};};return nil ;};func (_cbgb *Bitmap )nextOnPixel (_dbef ,_cac int )(_ddaa _fc .Point ,_cdcc bool ,_agfb error ){const _bafa ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_ddaa ,_cdcc ,_agfb =_cbgb .nextOnPixelLow (_cbgb .Width ,_cbgb .Height ,_cbgb .RowStride ,_dbef ,_cac );if _agfb !=nil {return _ddaa ,false ,_b .Wrap (_agfb ,_bafa ,"");};return _ddaa ,_cdcc ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_cbfe *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cbfe .addBorderGeneral (left ,right ,top ,bot ,val );};func _aefg (_egdeb *Bitmap ,_ddge ,_bfab ,_fcaef ,_fdfd int ,_aedgc RasterOperator ,_aadcf *Bitmap ,_ccae ,_aegcc int )error {var (_gdeed bool ;_efee bool ;_dgde int ;_bgcgb int ;_bgcgf int ;_affd bool ;_gfcbg byte ;_ggcba int ;_bdabb int ;_daafg int ;_cfba ,_adda int ;);_adbde :=8-(_ddge &7);_gdba :=_cgafg [_adbde ];_ffec :=_egdeb .RowStride *_bfab +(_ddge >>3);_ebdg :=_aadcf .RowStride *_aegcc +(_ccae >>3);if _fcaef < _adbde {_gdeed =true ;_gdba &=_aaaab [8-_adbde +_fcaef ];};if !_gdeed {_dgde =(_fcaef -_adbde )>>3;if _dgde > 0{_efee =true ;_bgcgb =_ffec +1;_bgcgf =_ebdg +1;};};_ggcba =(_ddge +_fcaef )&7;if !(_gdeed ||_ggcba ==0){_affd =true ;_gfcbg =_aaaab [_ggcba ];_bdabb =_ffec +1+_dgde ;_daafg =_ebdg +1+_dgde ;};switch _aedgc {case PixSrc :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],_aadcf .Data [_ebdg ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=_aadcf .Data [_bgcgf +_adda ];};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],_aadcf .Data [_daafg ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixNotSrc :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],^_aadcf .Data [_ebdg ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=^_aadcf .Data [_bgcgf +_adda ];};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],^_aadcf .Data [_daafg ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixSrcOrDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],_aadcf .Data [_ebdg ]|_egdeb .Data [_ffec ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]|=_aadcf .Data [_bgcgf +_adda ];};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],_aadcf .Data [_daafg ]|_egdeb .Data [_bdabb ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixSrcAndDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],_aadcf .Data [_ebdg ]&_egdeb .Data [_ffec ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]&=_aadcf .Data [_bgcgf +_adda ];};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],_aadcf .Data [_daafg ]&_egdeb .Data [_bdabb ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixSrcXorDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],_aadcf .Data [_ebdg ]^_egdeb .Data [_ffec ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]^=_aadcf .Data [_bgcgf +_adda ];};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],_aadcf .Data [_daafg ]^_egdeb .Data [_bdabb ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixNotSrcOrDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],^(_aadcf .Data [_ebdg ])|_egdeb .Data [_ffec ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]|=^(_aadcf .Data [_bgcgf +_adda ]);};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],^(_aadcf .Data [_daafg ])|_egdeb .Data [_bdabb ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixNotSrcAndDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],^(_aadcf .Data [_ebdg ])&_egdeb .Data [_ffec ],_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]&=^_aadcf .Data [_bgcgf +_adda ];};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],^(_aadcf .Data [_daafg ])&_egdeb .Data [_bdabb ],_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixSrcOrNotDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],_aadcf .Data [_ebdg ]|^(_egdeb .Data [_ffec ]),_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=_aadcf .Data [_bgcgf +_adda ]|^(_egdeb .Data [_bgcgb +_adda ]);};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],_aadcf .Data [_daafg ]|^(_egdeb .Data [_bdabb ]),_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixSrcAndNotDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],_aadcf .Data [_ebdg ]&^(_egdeb .Data [_ffec ]),_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=_aadcf .Data [_bgcgf +_adda ]&^(_egdeb .Data [_bgcgb +_adda ]);};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],_aadcf .Data [_daafg ]&^(_egdeb .Data [_bdabb ]),_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixNotPixSrcOrDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],^(_aadcf .Data [_ebdg ]|_egdeb .Data [_ffec ]),_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=^(_aadcf .Data [_bgcgf +_adda ]|_egdeb .Data [_bgcgb +_adda ]);};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],^(_aadcf .Data [_daafg ]|_egdeb .Data [_bdabb ]),_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixNotPixSrcAndDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],^(_aadcf .Data [_ebdg ]&_egdeb .Data [_ffec ]),_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=^(_aadcf .Data [_bgcgf +_adda ]&_egdeb .Data [_bgcgb +_adda ]);};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],^(_aadcf .Data [_daafg ]&_egdeb .Data [_bdabb ]),_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};case PixNotPixSrcXorDst :for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_ffec ]=_ffeab (_egdeb .Data [_ffec ],^(_aadcf .Data [_ebdg ]^_egdeb .Data [_ffec ]),_gdba );_ffec +=_egdeb .RowStride ;_ebdg +=_aadcf .RowStride ;};if _efee {for _cfba =0;_cfba < _fdfd ;_cfba ++{for _adda =0;_adda < _dgde ;_adda ++{_egdeb .Data [_bgcgb +_adda ]=^(_aadcf .Data [_bgcgf +_adda ]^_egdeb .Data [_bgcgb +_adda ]);};_bgcgb +=_egdeb .RowStride ;_bgcgf +=_aadcf .RowStride ;};};if _affd {for _cfba =0;_cfba < _fdfd ;_cfba ++{_egdeb .Data [_bdabb ]=_ffeab (_egdeb .Data [_bdabb ],^(_aadcf .Data [_daafg ]^_egdeb .Data [_bdabb ]),_gfcbg );_bdabb +=_egdeb .RowStride ;_daafg +=_aadcf .RowStride ;};};default:_cf .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_aedgc );return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_ggdb *Bitmap )SetByte (index int ,v byte )error {if index > len (_ggdb .Data )-1||index < 0{return _b .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_ggdb .Data [index ]=v ;return nil ;};func (_agf *Bitmap )addBorderGeneral (_fga ,_bccd ,_ceb ,_cfgd int ,_debg int )(*Bitmap ,error ){const _gfcb ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _fga < 0||_bccd < 0||_ceb < 0||_cfgd < 0{return nil ,_b .Error (_gfcb ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_gbbe ,_ggc :=_agf .Width ,_agf .Height ;_feb :=_gbbe +_fga +_bccd ;_gacg :=_ggc +_ceb +_cfgd ;_ced :=New (_feb ,_gacg );_ced .Color =_agf .Color ;_gfcc :=PixClr ;if _debg > 0{_gfcc =PixSet ;};_fbgf :=_ced .RasterOperation (0,0,_fga ,_gacg ,_gfcc ,nil ,0,0);if _fbgf !=nil {return nil ,_b .Wrap (_fbgf ,_gfcb ,"\u006c\u0065\u0066\u0074");};_fbgf =_ced .RasterOperation (_feb -_bccd ,0,_bccd ,_gacg ,_gfcc ,nil ,0,0);if _fbgf !=nil {return nil ,_b .Wrap (_fbgf ,_gfcb ,"\u0072\u0069\u0067h\u0074");};_fbgf =_ced .RasterOperation (0,0,_feb ,_ceb ,_gfcc ,nil ,0,0);if _fbgf !=nil {return nil ,_b .Wrap (_fbgf ,_gfcb ,"\u0074\u006f\u0070");};_fbgf =_ced .RasterOperation (0,_gacg -_cfgd ,_feb ,_cfgd ,_gfcc ,nil ,0,0);if _fbgf !=nil {return nil ,_b .Wrap (_fbgf ,_gfcb ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_fbgf =_ced .RasterOperation (_fga ,_ceb ,_gbbe ,_ggc ,PixSrc ,_agf ,0,0);if _fbgf !=nil {return nil ,_b .Wrap (_fbgf ,_gfcb ,"\u0063\u006f\u0070\u0079");};return _ced ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _fffd (d ,s )};var _cda [256]uint8 ;const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func Extract (roi _fc .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ecd :=New (roi .Dx (),roi .Dy ());_dbec :=roi .Min .X &0x07;_eccfg :=8-_dbec ;_fgbc :=uint (8-_ecd .Width &0x07);_fgea :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_edae :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_bdaa :=_ecd .RowStride ==_edae +1-_fgea ;var _adgc int ;for _fdfg :=roi .Min .Y ;_fdfg < roi .Max .Y ;_fdfg ++{_baee :=_fgea ;_cgeg :=_adgc ;switch {case _fgea ==_edae :_gfaf ,_gaa :=src .GetByte (_baee );if _gaa !=nil {return nil ,_gaa ;};_gfaf <<=uint (_dbec );_gaa =_ecd .SetByte (_cgeg ,_bccf (_fgbc ,_gfaf ));if _gaa !=nil {return nil ,_gaa ;};case _dbec ==0:for _ffgb :=_fgea ;_ffgb <=_edae ;_ffgb ++{_cacg ,_efceb :=src .GetByte (_baee );if _efceb !=nil {return nil ,_efceb ;};_baee ++;if _ffgb ==_edae &&_bdaa {_cacg =_bccf (_fgbc ,_cacg );};_efceb =_ecd .SetByte (_cgeg ,_cacg );if _efceb !=nil {return nil ,_efceb ;};_cgeg ++;};default:_gga :=_fbca (src ,_ecd ,uint (_dbec ),uint (_eccfg ),_fgbc ,_fgea ,_edae ,_bdaa ,_baee ,_cgeg );if _gga !=nil {return nil ,_gga ;};};_fgea +=src .RowStride ;_edae +=src .RowStride ;_adgc +=_ecd .RowStride ;};return _ecd ,nil ;};func _gfgc ()(_aacf []byte ){_aacf =make ([]byte ,256);for _aaaa :=0;_aaaa < 256;_aaaa ++{_dgf :=byte (_aaaa );_aacf [_dgf ]=(_dgf &0x01)|((_dgf &0x04)>>1)|((_dgf &0x10)>>2)|((_dgf &0x40)>>3)|((_dgf &0x02)<<3)|((_dgf &0x08)<<2)|((_dgf &0x20)<<1)|(_dgf &0x80);};return _aacf ;};var (_aaaab =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_cgafg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_dfgce *Bitmaps )SortByHeight (){_bfdd :=(*byHeight )(_dfgce );_c .Sort (_bfdd )};func (_efdg *Bitmap )equivalent (_ebf *Bitmap )bool {if _efdg ==_ebf {return true ;};if !_efdg .SizesEqual (_ebf ){return false ;};_eefa :=_afcd (_efdg ,_ebf ,CmbOpXor );_facg :=_efdg .countPixels ();_eedd :=int (0.25*float32 (_facg ));if _eefa .thresholdPixelSum (_eedd ){return false ;};var (_daac [9][9]int ;_cfbd [18][9]int ;_ebea [9][18]int ;_addc int ;_ecb int ;);_dadb :=9;_gce :=_efdg .Height /_dadb ;_dbe :=_efdg .Width /_dadb ;_fcgc ,_dgce :=_gce /2,_dbe /2;if _gce < _dbe {_fcgc =_dbe /2;_dgce =_gce /2;};_ccb :=float64 (_fcgc )*float64 (_dgce )*_gd .Pi ;_dead :=int (float64 (_gce *_dbe /2)*0.9);_bfea :=int (float64 (_dbe *_gce /2)*0.9);for _gbge :=0;_gbge < _dadb ;_gbge ++{_aeaf :=_dbe *_gbge +_addc ;var _aacg int ;if _gbge ==_dadb -1{_addc =0;_aacg =_efdg .Width ;}else {_aacg =_aeaf +_dbe ;if ((_efdg .Width -_addc )%_dadb )> 0{_addc ++;_aacg ++;};};for _cbb :=0;_cbb < _dadb ;_cbb ++{_ecee :=_gce *_cbb +_ecb ;var _dbbg int ;if _cbb ==_dadb -1{_ecb =0;_dbbg =_efdg .Height ;}else {_dbbg =_ecee +_gce ;if (_efdg .Height -_ecb )%_dadb > 0{_ecb ++;_dbbg ++;};};var _ecfb ,_ege ,_fccg ,_ceaf int ;_cbcf :=(_aeaf +_aacg )/2;_cdea :=(_ecee +_dbbg )/2;for _gfd :=_aeaf ;_gfd < _aacg ;_gfd ++{for _dbac :=_ecee ;_dbac < _dbbg ;_dbac ++{if _eefa .GetPixel (_gfd ,_dbac ){if _gfd < _cbcf {_ecfb ++;}else {_ege ++;};if _dbac < _cdea {_ceaf ++;}else {_fccg ++;};};};};_daac [_gbge ][_cbb ]=_ecfb +_ege ;_cfbd [_gbge *2][_cbb ]=_ecfb ;_cfbd [_gbge *2+1][_cbb ]=_ege ;_ebea [_gbge ][_cbb *2]=_ceaf ;_ebea [_gbge ][_cbb *2+1]=_fccg ;};};for _gfb :=0;_gfb < _dadb *2-1;_gfb ++{for _agg :=0;_agg < (_dadb -1);_agg ++{var _eee int ;for _ceg :=0;_ceg < 2;_ceg ++{for _agb :=0;_agb < 2;_agb ++{_eee +=_cfbd [_gfb +_ceg ][_agg +_agb ];};};if _eee > _bfea {return false ;};};};for _deea :=0;_deea < (_dadb -1);_deea ++{for _aceg :=0;_aceg < ((_dadb *2)-1);_aceg ++{var _cggd int ;for _fffg :=0;_fffg < 2;_fffg ++{for _geg :=0;_geg < 2;_geg ++{_cggd +=_ebea [_deea +_fffg ][_aceg +_geg ];};};if _cggd > _dead {return false ;};};};for _aaf :=0;_aaf < (_dadb -2);_aaf ++{for _bebc :=0;_bebc < (_dadb -2);_bebc ++{var _bcce ,_dged int ;for _gge :=0;_gge < 3;_gge ++{for _fcd :=0;_fcd < 3;_fcd ++{if _gge ==_fcd {_bcce +=_daac [_aaf +_gge ][_bebc +_fcd ];};if (2-_gge )==_fcd {_dged +=_daac [_aaf +_gge ][_bebc +_fcd ];};};};if _bcce > _bfea ||_dged > _bfea {return false ;};};};for _gec :=0;_gec < (_dadb -1);_gec ++{for _ebga :=0;_ebga < (_dadb -1);_ebga ++{var _cfaa int ;for _aba :=0;_aba < 2;_aba ++{for _bfee :=0;_bfee < 2;_bfee ++{_cfaa +=_daac [_gec +_aba ][_ebga +_bfee ];};};if float64 (_cfaa )> _ccb {return false ;};};};return true ;};func (_cfad *Bitmaps )HeightSorter ()func (_dbaeg ,_baaf int )bool {return func (_gdgb ,_gbbf int )bool {_ceaa :=_cfad .Values [_gdgb ].Height < _cfad .Values [_gbbf ].Height ;_cf .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cfad .Values [_gdgb ].Height ,_cfad .Values [_gbbf ].Height ,_ceaa );return _ceaa ;};};func TstWriteSymbols (t *_f .T ,bms *Bitmaps ,src *Bitmap ){for _ceccg :=0;_ceccg < bms .Size ();_ceccg ++{_gbgad :=bms .Values [_ceccg ];_ggdc :=bms .Boxes [_ceccg ];_cbgff :=src .RasterOperation (_ggdc .Min .X ,_ggdc .Min .Y ,_gbgad .Width ,_gbgad .Height ,PixSrc ,_gbgad ,0,0);_bb .NoError (t ,_cbgff );};};type MorphOperation int ;func (_fcec *byHeight )Less (i ,j int )bool {return _fcec .Values [i ].Height < _fcec .Values [j ].Height };func _dc (_fg *Bitmap ,_aad *Bitmap ,_fac int )(_be error ){const _adb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _fac {case 2:_be =_cb (_fg ,_aad );case 4:_be =_d (_fg ,_aad );case 8:_be =_bbc (_fg ,_aad );default:return _b .Error (_adb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _be !=nil {_be =_b .Wrap (_be ,_adb ,"");};return _be ;};func _gdg (_egdb ,_ega int )int {if _egdb > _ega {return _egdb ;};return _ega ;};func _caca (_adee *Bitmap ,_dedc int )(*Bitmap ,error ){const _ecda ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _adee ==nil {return nil ,_b .Error (_ecda ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dedc <=0{return nil ,_b .Error (_ecda ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _dedc ==1{_fdgb ,_bdab :=_fffd (nil ,_adee );if _bdab !=nil {return nil ,_b .Wrap (_bdab ,_ecda ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _fdgb ,nil ;};_fbfc ,_aeaab :=_ce (_adee ,_dedc ,_dedc );if _aeaab !=nil {return nil ,_b .Wrap (_aeaab ,_ecda ,"");};return _fbfc ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_bccc *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_ggfb *Bitmaps ,_aedg *Boxes ,_dgaa error ){const _ggga ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _bccc ==nil {return nil ,nil ,_b .Error (_ggga ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_b .Error (_ggga ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _bccc .Zero (){_aedg =&Boxes {};_ggfb =&Bitmaps {};return _ggfb ,_aedg ,nil ;};switch components {case ComponentConn :_ggfb =&Bitmaps {};if _aedg ,_dgaa =_bccc .ConnComponents (_ggfb ,8);_dgaa !=nil {return nil ,nil ,_b .Wrap (_dgaa ,_ggga ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_cbdd ,_bba :=MorphSequence (_bccc ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _bba !=nil {return nil ,nil ,_b .Wrap (_bba ,_ggga ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _cf .Log .IsLogLevel (_cf .LogLevelTrace ){_cf .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_cbdd .String ());};_egbf :=&Bitmaps {};_aedg ,_bba =_cbdd .ConnComponents (_egbf ,8);if _bba !=nil {return nil ,nil ,_b .Wrap (_bba ,_ggga ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _cf .Log .IsLogLevel (_cf .LogLevelTrace ){_cf .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_egbf .String ());};if _ggfb ,_bba =_egbf .ClipToBitmap (_bccc );_bba !=nil {return nil ,nil ,_b .Wrap (_bba ,_ggga ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_agcb :=1;var _bcd *Bitmap ;switch {case _bccc .XResolution <=200:_bcd =_bccc ;case _bccc .XResolution <=400:_agcb =2;_bcd ,_dgaa =_bdg (_bccc ,1,0,0,0);if _dgaa !=nil {return nil ,nil ,_b .Wrap (_dgaa ,_ggga ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_agcb =4;_bcd ,_dgaa =_bdg (_bccc ,1,1,0,0);if _dgaa !=nil {return nil ,nil ,_b .Wrap (_dgaa ,_ggga ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_efge ,_ ,_adabb :=_aabe (_bcd );if _adabb !=nil {return nil ,nil ,_b .Wrap (_adabb ,_ggga ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_cfag ,_adabb :=_caca (_efge ,_agcb );if _adabb !=nil {return nil ,nil ,_b .Wrap (_adabb ,_ggga ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_acb :=&Bitmaps {};if _aedg ,_adabb =_cfag .ConnComponents (_acb ,4);_adabb !=nil {return nil ,nil ,_b .Wrap (_adabb ,_ggga ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _ggfb ,_adabb =_acb .ClipToBitmap (_bccc );_adabb !=nil {return nil ,nil ,_b .Wrap (_adabb ,_ggga ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_ggfb ,_dgaa =_ggfb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _dgaa !=nil {return nil ,nil ,_b .Wrap (_dgaa ,_ggga ,"");};_aedg ,_dgaa =_aedg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _dgaa !=nil {return nil ,nil ,_b .Wrap (_dgaa ,_ggga ,"");};return _ggfb ,_aedg ,nil ;};func (_daad *Bitmaps )selectByIndexes (_bgba []int )(*Bitmaps ,error ){_aafg :=&Bitmaps {};for _ ,_cbcfg :=range _bgba {_ebabd ,_baddg :=_daad .GetBitmap (_cbcfg );if _baddg !=nil {return nil ,_b .Wrap (_baddg ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_aafg .AddBitmap (_ebabd );};return _aafg ,nil ;};func TstESymbol (t *_f .T ,scale ...int )*Bitmap {_ffbb ,_afega :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_bb .NoError (t ,_afega );return TstGetScaledSymbol (t ,_ffbb ,scale ...);};func (_ccgdg *Bitmaps )AddBox (box *_fc .Rectangle ){_ccgdg .Boxes =append (_ccgdg .Boxes ,box )};func (_fcc *Bitmap )CountPixels ()int {return _fcc .countPixels ()};func _eaec (_cdgc *Bitmap ,_fcea ,_dfab ,_bcgf ,_gbcf int ,_afga RasterOperator ,_cdebf *Bitmap ,_afbff ,_gcaa int )error {const _aega ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _cdgc ==nil {return _b .Error (_aega ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _afga ==PixDst {return nil ;};switch _afga {case PixClr ,PixSet ,PixNotDst :_bfbc (_cdgc ,_fcea ,_dfab ,_bcgf ,_gbcf ,_afga );return nil ;};if _cdebf ==nil {_cf .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _b .Error (_aega ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fgaf :=_ecdgb (_cdgc ,_fcea ,_dfab ,_bcgf ,_gbcf ,_afga ,_cdebf ,_afbff ,_gcaa );_fgaf !=nil {return _b .Wrap (_fgaf ,_aega ,"");};return nil ;};func (_agfbb CombinationOperator )String ()string {var _aagdd string ;switch _agfbb {case CmbOpOr :_aagdd ="\u004f\u0052";case CmbOpAnd :_aagdd ="\u0041\u004e\u0044";case CmbOpXor :_aagdd ="\u0058\u004f\u0052";case CmbOpXNor :_aagdd ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_aagdd ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_aagdd ="\u004e\u004f\u0054";};return _aagdd ;};func (_ffgca MorphProcess )getWidthHeight ()(_bcgg ,_facb int ){return _ffgca .Arguments [0],_ffgca .Arguments [1];};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _dded (d ,s ,hSize ,vSize )};func (_bee *Bitmap )centroid (_aaad ,_cdae []int )(Point ,error ){_ecab :=Point {};_bee .setPadBits (0);if len (_aaad )==0{_aaad =_dfaab ();};if len (_cdae )==0{_cdae =_agge ();};var _cfed ,_ddae ,_gbdf ,_ffc ,_gfgg ,_cad int ;var _bdega byte ;for _gfgg =0;_gfgg < _bee .Height ;_gfgg ++{_eabf :=_bee .RowStride *_gfgg ;_ffc =0;for _cad =0;_cad < _bee .RowStride ;_cad ++{_bdega =_bee .Data [_eabf +_cad ];if _bdega !=0{_ffc +=_cdae [_bdega ];_cfed +=_aaad [_bdega ]+_cad *8*_cdae [_bdega ];};};_gbdf +=_ffc ;_ddae +=_ffc *_gfgg ;};if _gbdf !=0{_ecab .X =float32 (_cfed )/float32 (_gbdf );_ecab .Y =float32 (_ddae )/float32 (_gbdf );};return _ecab ,nil ;};func (_fbae *Bitmap )Copy ()*Bitmap {_bcc :=make ([]byte ,len (_fbae .Data ));copy (_bcc ,_fbae .Data );return &Bitmap {Width :_fbae .Width ,Height :_fbae .Height ,RowStride :_fbae .RowStride ,Data :_bcc ,Color :_fbae .Color ,Text :_fbae .Text ,BitmapNumber :_fbae .BitmapNumber ,Special :_fbae .Special };};func TstISymbol (t *_f .T ,scale ...int )*Bitmap {_gfcgb ,_fdga :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_bb .NoError (t ,_fdga );return TstGetScaledSymbol (t ,_gfcgb ,scale ...);};func _bbc (_db ,_eg *Bitmap )(_eb error ){const _deb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_dad :=_eg .RowStride ;_eab :=_db .RowStride ;var _dee ,_gg ,_ebg ,_deg ,_bf int ;for _ebg =0;_ebg < _eg .Height ;_ebg ++{_dee =_ebg *_dad ;_gg =8*_ebg *_eab ;for _deg =0;_deg < _dad ;_deg ++{if _eb =_db .setEightBytes (_gg +_deg *8,_febc [_eg .Data [_dee +_deg ]]);_eb !=nil {return _b .Wrap (_eb ,_deb ,"");};};for _bf =1;_bf < 8;_bf ++{for _deg =0;_deg < _eab ;_deg ++{if _eb =_db .SetByte (_gg +_bf *_eab +_deg ,_db .Data [_gg +_deg ]);_eb !=nil {return _b .Wrap (_eb ,_deb ,"");};};};};return nil ;};func _daf (_fbbf ,_ffgd *Bitmap ,_efdb ,_gaf ,_aebbe ,_cded ,_gafa int ,_fcae CombinationOperator )error {var _gbgaf int ;_fda :=func (){_gbgaf ++;_aebbe +=_ffgd .RowStride ;_cded +=_fbbf .RowStride ;_gafa +=_fbbf .RowStride };for _gbgaf =_efdb ;_gbgaf < _gaf ;_fda (){_gacb :=_aebbe ;for _gadab :=_cded ;_gadab <=_gafa ;_gadab ++{_ddad ,_cceb :=_ffgd .GetByte (_gacb );if _cceb !=nil {return _cceb ;};_cede ,_cceb :=_fbbf .GetByte (_gadab );if _cceb !=nil {return _cceb ;};if _cceb =_ffgd .SetByte (_gacb ,_dcfb (_ddad ,_cede ,_fcae ));_cceb !=nil {return _cceb ;};_gacb ++;};};return nil ;};type ClassedPoints struct{*Points ;_fa .IntSlice ;_egdba func (_bdbg ,_gggb int )bool ;};func _acdf (_ddab *Bitmap ,_fdcd *_fa .Stack ,_gcagf ,_cag int )(_aagf *_fc .Rectangle ,_agbb error ){const _ecbcb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ddab ==nil {return nil ,_b .Error (_ecbcb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fdcd ==nil {return nil ,_b .Error (_ecbcb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_becb ,_edbc :=_ddab .Width ,_ddab .Height ;_dfaef :=_becb -1;_feae :=_edbc -1;if _gcagf < 0||_gcagf > _dfaef ||_cag < 0||_cag > _feae ||!_ddab .GetPixel (_gcagf ,_cag ){return nil ,nil ;};_eceea :=_fc .Rect (100000,100000,0,0);if _agbb =_ebfc (_fdcd ,_gcagf ,_gcagf ,_cag ,1,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _agbb =_ebfc (_fdcd ,_gcagf ,_gcagf ,_cag +1,-1,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_eceea .Min .X ,_eceea .Max .X =_gcagf ,_gcagf ;_eceea .Min .Y ,_eceea .Max .Y =_cag ,_cag ;var (_cfec *fillSegment ;_ecfcg int ;);for _fdcd .Len ()> 0{if _cfec ,_agbb =_bgadb (_fdcd );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"");};_cag =_cfec ._agbe ;for _gcagf =_cfec ._fabe -1;_gcagf >=0&&_ddab .GetPixel (_gcagf ,_cag );_gcagf --{if _agbb =_ddab .SetPixel (_gcagf ,_cag ,0);_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _gcagf >=_cfec ._fabe -1{for {for _gcagf ++;_gcagf <=_cfec ._fecbf +1&&_gcagf <=_dfaef &&!_ddab .GetPixel (_gcagf ,_cag );_gcagf ++{};_ecfcg =_gcagf ;if !(_gcagf <=_cfec ._fecbf +1&&_gcagf <=_dfaef ){break ;};for ;_gcagf <=_dfaef &&_ddab .GetPixel (_gcagf ,_cag );_gcagf ++{if _agbb =_ddab .SetPixel (_gcagf ,_cag ,0);_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _agbb =_ebfc (_fdcd ,_ecfcg ,_gcagf -1,_cfec ._agbe ,_cfec ._efacae ,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gcagf > _cfec ._fecbf {if _agbb =_ebfc (_fdcd ,_cfec ._fecbf +1,_gcagf -1,_cfec ._agbe ,-_cfec ._efacae ,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_ecfcg =_gcagf +1;if _ecfcg < _cfec ._fabe {if _agbb =_ebfc (_fdcd ,_ecfcg ,_cfec ._fabe -1,_cfec ._agbe ,-_cfec ._efacae ,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gcagf =_cfec ._fabe ;for {for ;_gcagf <=_dfaef &&_ddab .GetPixel (_gcagf ,_cag );_gcagf ++{if _agbb =_ddab .SetPixel (_gcagf ,_cag ,0);_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _agbb =_ebfc (_fdcd ,_ecfcg ,_gcagf -1,_cfec ._agbe ,_cfec ._efacae ,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gcagf > _cfec ._fecbf {if _agbb =_ebfc (_fdcd ,_cfec ._fecbf +1,_gcagf -1,_cfec ._agbe ,-_cfec ._efacae ,_feae ,&_eceea );_agbb !=nil {return nil ,_b .Wrap (_agbb ,_ecbcb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gcagf ++;_gcagf <=_cfec ._fecbf +1&&_gcagf <=_dfaef &&!_ddab .GetPixel (_gcagf ,_cag );_gcagf ++{};_ecfcg =_gcagf ;if !(_gcagf <=_cfec ._fecbf +1&&_gcagf <=_dfaef ){break ;};};};_eceea .Max .X ++;_eceea .Max .Y ++;return &_eceea ,nil ;};func (_eag *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _eag .Copy (),nil ;};_fbb ,_gbca :=_eag .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _gbca !=nil {return nil ,_b .Wrap (_gbca ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _fbb ,nil ;};func _gabd (_edgfc ,_caa *Bitmap ,_dafc ,_ggde int )(*Bitmap ,error ){const _gdga ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _caa ==nil {return nil ,_b .Error (_gdga ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dafc < 1||_ggde < 1{return nil ,_b .Error (_gdga ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _dafc ==1&&_ggde ==1{return _fffd (_edgfc ,_caa );};if MorphBC ==SymmetricMorphBC {_fcgf ,_bgee :=_dbab (_edgfc ,_caa ,_dafc ,_ggde );if _bgee !=nil {return nil ,_b .Wrap (_bgee ,_gdga ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _fcgf ,nil ;};_aggf :=_gdg (_dafc /2,_ggde /2);_dag :=8*((_aggf +7)/8);_fgfgc ,_efaca :=_caa .AddBorder (_dag ,0);if _efaca !=nil {return nil ,_b .Wrapf (_efaca ,_gdga ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_dag );};var _aada ,_dgcg *Bitmap ;if _dafc ==1||_ggde ==1{_aacae :=SelCreateBrick (_ggde ,_dafc ,_ggde /2,_dafc /2,SelHit );_aada ,_efaca =_gfccf (nil ,_fgfgc ,_aacae );if _efaca !=nil {return nil ,_b .Wrap (_efaca ,_gdga ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_fdfe :=SelCreateBrick (1,_dafc ,0,_dafc /2,SelHit );_fdeef ,_eceb :=_cfbe (nil ,_fgfgc ,_fdfe );if _eceb !=nil {return nil ,_b .Wrap (_eceb ,_gdga ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_eeed :=SelCreateBrick (_ggde ,1,_ggde /2,0,SelHit );_aada ,_eceb =_cfbe (nil ,_fdeef ,_eeed );if _eceb !=nil {return nil ,_b .Wrap (_eceb ,_gdga ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_eceb =_fgff (_fdeef ,_aada ,_fdfe );_eceb !=nil {return nil ,_b .Wrap (_eceb ,_gdga ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_eceb =_fgff (_aada ,_fdeef ,_eeed );_eceb !=nil {return nil ,_b .Wrap (_eceb ,_gdga ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _dgcg ,_efaca =_aada .RemoveBorder (_dag );_efaca !=nil {return nil ,_b .Wrap (_efaca ,_gdga ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _edgfc ==nil {return _dgcg ,nil ;};if _ ,_efaca =_fffd (_edgfc ,_dgcg );_efaca !=nil {return nil ,_efaca ;};return _edgfc ,nil ;};func (_edff *Bitmap )countPixels ()int {var (_egde int ;_gae uint8 ;_gdef byte ;_cec int ;);_gbga :=_edff .RowStride ;_efaa :=uint (_edff .Width &0x07);if _efaa !=0{_gae =uint8 ((0xff<<(8-_efaa ))&0xff);_gbga --;};for _eff :=0;_eff < _edff .Height ;_eff ++{for _cec =0;_cec < _gbga ;_cec ++{_gdef =_edff .Data [_eff *_edff .RowStride +_cec ];_egde +=int (_cda [_gdef ]);};if _efaa !=0{_egde +=int (_cda [_edff .Data [_eff *_edff .RowStride +_cec ]&_gae ]);};};return _egde ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _cfbe (d ,s ,sel )};func (_bfae *Bitmap )SizesEqual (s *Bitmap )bool {if _bfae ==s {return true ;};if _bfae .Width !=s .Width ||_bfae .Height !=s .Height {return false ;};return true ;};func (_aagb *Selection )setOrigin (_eaecb ,_eedcf int ){_aagb .Cy ,_aagb .Cx =_eaecb ,_eedcf };func (_fdb *Bitmap )clearAll ()error {return _fdb .RasterOperation (0,0,_fdb .Width ,_fdb .Height ,PixClr ,nil ,0,0);};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fc .Rectangle ;};func (_egfb Points )GetGeometry (i int )(_cfgb ,_ebff float32 ,_fce error ){if i > len (_egfb )-1{return 0,0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_beddb :=_egfb [i ];return _beddb .X ,_beddb .Y ,nil ;};func (_fafa *ClassedPoints )SortByY (){_fafa ._egdba =_fafa .ySortFunction ();_c .Sort (_fafa )};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bafg float64 ,_fdde error ){const _deeagg ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _bafg ,_b .Error (_deeagg ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _bafg ,_b .Error (_deeagg ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _bafg ,_b .Error (_deeagg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_bgfb ,_fgdd :=bm1 .Width ,bm1 .Height ;_aee ,_fbcb :=bm2 .Width ,bm2 .Height ;if _acgf (_bgfb -_aee )> maxDiffW {return 0,nil ;};if _acgf (_fgdd -_fbcb )> maxDiffH {return 0,nil ;};var _badd ,_fcbd int ;if delX >=0{_badd =int (delX +0.5);}else {_badd =int (delX -0.5);};if delY >=0{_fcbd =int (delY +0.5);}else {_fcbd =int (delY -0.5);};_bcbeb :=bm1 .createTemplate ();if _fdde =_bcbeb .RasterOperation (_badd ,_fcbd ,_aee ,_fbcb ,PixSrc ,bm2 ,0,0);_fdde !=nil {return _bafg ,_b .Wrap (_fdde ,_deeagg ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _fdde =_bcbeb .RasterOperation (0,0,_bgfb ,_fgdd ,PixSrcAndDst ,bm1 ,0,0);_fdde !=nil {return _bafg ,_b .Wrap (_fdde ,_deeagg ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_addgf :=_bcbeb .countPixels ();_bafg =float64 (_addgf )*float64 (_addgf )/(float64 (area1 )*float64 (area2 ));return _bafg ,nil ;};func _bccf (_cddc uint ,_bfcc byte )byte {return _bfcc >>_cddc <<_cddc };func (_baf *Bitmap )Zero ()bool {_bebd :=_baf .Width /8;_ddb :=_baf .Width &7;var _bdac byte ;if _ddb !=0{_bdac =byte (0xff<<uint (8-_ddb ));};var _cfb ,_aaae ,_bfe int ;for _aaae =0;_aaae < _baf .Height ;_aaae ++{_cfb =_baf .RowStride *_aaae ;for _bfe =0;_bfe < _bebd ;_bfe ,_cfb =_bfe +1,_cfb +1{if _baf .Data [_cfb ]!=0{return false ;};};if _ddb > 0{if _baf .Data [_cfb ]&_bdac !=0{return false ;};};};return true ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fc .Rectangle ;};func (_ecff *Bitmap )GetPixel (x ,y int )bool {_gdcc :=_ecff .GetByteIndex (x ,y );_fefd :=_ecff .GetBitOffset (x );_eccg :=uint (7-_fefd );if _gdcc > len (_ecff .Data )-1{_cf .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_ecff );return false ;};if (_ecff .Data [_gdcc ]>>_eccg )&0x01>=1{return true ;};return false ;};func (_daacg *ClassedPoints )xSortFunction ()func (_gfbg int ,_bade int )bool {return func (_aggcd ,_fbfdf int )bool {return _daacg .XAtIndex (_aggcd )< _daacg .XAtIndex (_fbfdf )};};func (_afc *Bitmap )addPadBits ()(_cdf error ){const _fgd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_ccea :=_afc .Width %8;if _ccea ==0{return nil ;};_eec :=_afc .Width /8;_cdee :=_e .NewReader (_afc .Data );_gagg :=make ([]byte ,_afc .Height *_afc .RowStride );_ddca :=_e .NewWriterMSB (_gagg );_eccd :=make ([]byte ,_eec );var (_fbad int ;_fab uint64 ;);for _fbad =0;_fbad < _afc .Height ;_fbad ++{if _ ,_cdf =_cdee .Read (_eccd );_cdf !=nil {return _b .Wrap (_cdf ,_fgd ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_cdf =_ddca .Write (_eccd );_cdf !=nil {return _b .Wrap (_cdf ,_fgd ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _fab ,_cdf =_cdee .ReadBits (byte (_ccea ));_cdf !=nil {return _b .Wrap (_cdf ,_fgd ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _cdf =_ddca .WriteByte (byte (_fab )<<uint (8-_ccea ));_cdf !=nil {return _b .Wrap (_cdf ,_fgd ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_afc .Data =_ddca .Data ();return nil ;};func TstCSymbol (t *_f .T )*Bitmap {t .Helper ();_cbafb :=New (6,6);_bb .NoError (t ,_cbafb .SetPixel (1,0,1));_bb .NoError (t ,_cbafb .SetPixel (2,0,1));_bb .NoError (t ,_cbafb .SetPixel (3,0,1));_bb .NoError (t ,_cbafb .SetPixel (4,0,1));_bb .NoError (t ,_cbafb .SetPixel (0,1,1));_bb .NoError (t ,_cbafb .SetPixel (5,1,1));_bb .NoError (t ,_cbafb .SetPixel (0,2,1));_bb .NoError (t ,_cbafb .SetPixel (0,3,1));_bb .NoError (t ,_cbafb .SetPixel (0,4,1));_bb .NoError (t ,_cbafb .SetPixel (5,4,1));_bb .NoError (t ,_cbafb .SetPixel (1,5,1));_bb .NoError (t ,_cbafb .SetPixel (2,5,1));_bb .NoError (t ,_cbafb .SetPixel (3,5,1));_bb .NoError (t ,_cbafb .SetPixel (4,5,1));return _cbafb ;};func (_deee *Bitmap )nextOnPixelLow (_fgga ,_bdea ,_bfg ,_dae ,_ggda int )(_abaf _fc .Point ,_dgedb bool ,_bedd error ){const _ddcg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_bfeb int ;_bgca byte ;);_gceb :=_ggda *_bfg ;_gcad :=_gceb +(_dae /8);if _bgca ,_bedd =_deee .GetByte (_gcad );_bedd !=nil {return _abaf ,false ,_b .Wrap (_bedd ,_ddcg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _bgca !=0{_dfe :=_dae -(_dae %8)+7;for _bfeb =_dae ;_bfeb <=_dfe &&_bfeb < _fgga ;_bfeb ++{if _deee .GetPixel (_bfeb ,_ggda ){_abaf .X =_bfeb ;_abaf .Y =_ggda ;return _abaf ,true ,nil ;};};};_egdc :=(_dae /8)+1;_bfeb =8*_egdc ;var _cbe int ;for _gcad =_gceb +_egdc ;_bfeb < _fgga ;_gcad ,_bfeb =_gcad +1,_bfeb +8{if _bgca ,_bedd =_deee .GetByte (_gcad );_bedd !=nil {return _abaf ,false ,_b .Wrap (_bedd ,_ddcg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _bgca ==0{continue ;};for _cbe =0;_cbe < 8&&_bfeb < _fgga ;_cbe ,_bfeb =_cbe +1,_bfeb +1{if _deee .GetPixel (_bfeb ,_ggda ){_abaf .X =_bfeb ;_abaf .Y =_ggda ;return _abaf ,true ,nil ;};};};for _fagf :=_ggda +1;_fagf < _bdea ;_fagf ++{_gceb =_fagf *_bfg ;for _gcad ,_bfeb =_gceb ,0;_bfeb < _fgga ;_gcad ,_bfeb =_gcad +1,_bfeb +8{if _bgca ,_bedd =_deee .GetByte (_gcad );_bedd !=nil {return _abaf ,false ,_b .Wrap (_bedd ,_ddcg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _bgca ==0{continue ;};for _cbe =0;_cbe < 8&&_bfeb < _fgga ;_cbe ,_bfeb =_cbe +1,_bfeb +1{if _deee .GetPixel (_bfeb ,_fagf ){_abaf .X =_bfeb ;_abaf .Y =_fagf ;return _abaf ,true ,nil ;};};};};return _abaf ,false ,nil ;};func TstImageBitmapData ()[]byte {return _gbfba .Data };func _dded (_cccc ,_aggc *Bitmap ,_cfcaa ,_agcd int )(*Bitmap ,error ){const _gbgc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _aggc ==nil {_cf .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_b .Error (_gbgc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cfcaa < 1||_agcd < 1{return nil ,_b .Error (_gbgc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _cfcaa ==1&&_agcd ==1{_edad ,_gaca :=_fffd (_cccc ,_aggc );if _gaca !=nil {return nil ,_b .Wrap (_gaca ,_gbgc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _edad ,nil ;};if _cfcaa ==1||_agcd ==1{_aggce :=SelCreateBrick (_agcd ,_cfcaa ,_agcd /2,_cfcaa /2,SelHit );_aeba ,_caeeb :=_cfbe (_cccc ,_aggc ,_aggce );if _caeeb !=nil {return nil ,_b .Wrap (_caeeb ,_gbgc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _aeba ,nil ;};_eacd :=SelCreateBrick (1,_cfcaa ,0,_cfcaa /2,SelHit );_cdeb :=SelCreateBrick (_agcd ,1,_agcd /2,0,SelHit );_cdbf ,_ddaf :=_cfbe (nil ,_aggc ,_eacd );if _ddaf !=nil {return nil ,_b .Wrap (_ddaf ,_gbgc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_cccc ,_ddaf =_cfbe (_cccc ,_cdbf ,_cdeb );if _ddaf !=nil {return nil ,_b .Wrap (_ddaf ,_gbgc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cccc ,nil ;};func (_agfdf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _cgbd ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_agfdf .Values )==0{return nil ,_b .Error (_cgbd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_abcf :=&BitmapsArray {};_agfdf .SortByHeight ();_cbccc :=-1;_dbce :=-1;for _ecea :=0;_ecea < len (_agfdf .Values );_ecea ++{_babe :=_agfdf .Values [_ecea ].Height ;if _babe > _cbccc {_cbccc =_babe ;_dbce ++;_abcf .Values =append (_abcf .Values ,&Bitmaps {});};_abcf .Values [_dbce ].AddBitmap (_agfdf .Values [_ecea ]);};return _abcf ,nil ;};func _bgadb (_cbcb *_fa .Stack )(_agff *fillSegment ,_cfedg error ){const _dgbf ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _cbcb ==nil {return nil ,_b .Error (_dgbf ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cbcb .Aux ==nil {return nil ,_b .Error (_dgbf ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_gdbg ,_faac :=_cbcb .Pop ();if !_faac {return nil ,nil ;};_bagf ,_faac :=_gdbg .(*fillSegment );if !_faac {return nil ,_b .Error (_dgbf ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_agff =&fillSegment {_bagf ._fabe ,_bagf ._fecbf ,_bagf ._agbe +_bagf ._efacae ,_bagf ._efacae };_cbcb .Aux .Push (_bagf );return _agff ,nil ;};func (_edgd *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_egg bool ,_beff error ){const _efac ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_agge ();};_ecgb :=_edgd .Width >>3;_cgd :=_edgd .Width &7;_cdb :=byte (0xff<<uint (8-_cgd ));var (_bbe ,_cde ,_agd ,_addg int ;_fgg byte ;);for _bbe =0;_bbe < _edgd .Height ;_bbe ++{_agd =_edgd .RowStride *_bbe ;for _cde =0;_cde < _ecgb ;_cde ++{_fgg ,_beff =_edgd .GetByte (_agd +_cde );if _beff !=nil {return false ,_b .Wrap (_beff ,_efac ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_addg +=tab8 [_fgg ];};if _cgd !=0{_fgg ,_beff =_edgd .GetByte (_agd +_cde );if _beff !=nil {return false ,_b .Wrap (_beff ,_efac ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_fgg &=_cdb ;_addg +=tab8 [_fgg ];};if _addg > thresh {return true ,nil ;};};return _egg ,nil ;};func (_aefa *ClassedPoints )SortByX (){_aefa ._egdba =_aefa .xSortFunction ();_c .Sort (_aefa )};func (_abdb *Bitmap )connComponentsBitmapsBB (_dde *Bitmaps ,_cdgb int )(_dce *Boxes ,_fdee error ){const _faga ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _cdgb !=4&&_cdgb !=8{return nil ,_b .Error (_faga ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _dde ==nil {return nil ,_b .Error (_faga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_dde .Values )> 0{return nil ,_b .Error (_faga ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _abdb .Zero (){return &Boxes {},nil ;};var (_ffgcf ,_fbde ,_gdfbb ,_ffef *Bitmap ;);_abdb .setPadBits (0);if _ffgcf ,_fdee =_fffd (nil ,_abdb );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"\u0062\u006d\u0031");};if _fbde ,_fdee =_fffd (nil ,_abdb );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"\u0062\u006d\u0032");};_fffgd :=&_fa .Stack {};_fffgd .Aux =&_fa .Stack {};_dce =&Boxes {};var (_eceg ,_ddfd int ;_dbaef _fc .Point ;_bebg bool ;_becc *_fc .Rectangle ;);for {if _dbaef ,_bebg ,_fdee =_ffgcf .nextOnPixel (_eceg ,_ddfd );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"");};if !_bebg {break ;};if _becc ,_fdee =_bcag (_ffgcf ,_fffgd ,_dbaef .X ,_dbaef .Y ,_cdgb );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"");};if _fdee =_dce .Add (_becc );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"");};if _gdfbb ,_fdee =_ffgcf .clipRectangle (_becc ,nil );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"\u0062\u006d\u0033");};if _ffef ,_fdee =_fbde .clipRectangle (_becc ,nil );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"\u0062\u006d\u0034");};if _ ,_fdee =_faca (_gdfbb ,_gdfbb ,_ffef );_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _fdee =_fbde .RasterOperation (_becc .Min .X ,_becc .Min .Y ,_becc .Dx (),_becc .Dy (),PixSrcXorDst ,_gdfbb ,0,0);_fdee !=nil {return nil ,_b .Wrap (_fdee ,_faga ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_dde .AddBitmap (_gdfbb );_eceg =_dbaef .X ;_ddfd =_dbaef .Y ;};_dde .Boxes =*_dce ;return _dce ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _agge ()[]int {_feab :=make ([]int ,256);for _afgg :=0;_afgg <=0xff;_afgg ++{_gea :=byte (_afgg );_feab [_gea ]=int (_gea &0x1)+(int (_gea >>1)&0x1)+(int (_gea >>2)&0x1)+(int (_gea >>3)&0x1)+(int (_gea >>4)&0x1)+(int (_gea >>5)&0x1)+(int (_gea >>6)&0x1)+(int (_gea >>7)&0x1);};return _feab ;};func (_egbcab *Bitmaps )SortByWidth (){_ccfde :=(*byWidth )(_egbcab );_c .Sort (_ccfde )};func _bdfbd (_ffea ,_dbda *Bitmap ,_beaa *Selection )(*Bitmap ,error ){const _bcdb ="\u006f\u0070\u0065\u006e";var _caeb error ;_ffea ,_caeb =_aeab (_ffea ,_dbda ,_beaa );if _caeb !=nil {return nil ,_b .Wrap (_caeb ,_bcdb ,"");};_adbd ,_caeb :=_fgff (nil ,_dbda ,_beaa );if _caeb !=nil {return nil ,_b .Wrap (_caeb ,_bcdb ,"");};_ ,_caeb =_cfbe (_ffea ,_adbd ,_beaa );if _caeb !=nil {return nil ,_b .Wrap (_caeb ,_bcdb ,"");};return _ffea ,nil ;};var _eegb =[5]int {1,2,3,0,4};func (_dbaf *byHeight )Len ()int {return len (_dbaf .Values )};type Point struct{X ,Y float32 ;};func TstRSymbol (t *_f .T ,scale ...int )*Bitmap {_ffgea ,_agdgc :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_bb .NoError (t ,_agdgc );return TstGetScaledSymbol (t ,_ffgea ,scale ...);};var MorphBC BoundaryCondition ;func (_becd *Bitmap )GetVanillaData ()[]byte {if _becd .Color ==Chocolate {_becd .inverseData ();};return _becd .Data ;};func _fffd (_ccf ,_dbacf *Bitmap )(*Bitmap ,error ){if _dbacf ==nil {return nil ,_b .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbacf ==_ccf {return _ccf ,nil ;};if _ccf ==nil {_ccf =_dbacf .createTemplate ();copy (_ccf .Data ,_dbacf .Data );return _ccf ,nil ;};_eccf :=_ccf .resizeImageData (_dbacf );if _eccf !=nil {return nil ,_b .Wrap (_eccf ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_ccf .Text =_dbacf .Text ;copy (_ccf .Data ,_dbacf .Data );return _ccf ,nil ;};func TstWSymbol (t *_f .T ,scale ...int )*Bitmap {_fcege ,_cafbf :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_bb .NoError (t ,_cafbf );return TstGetScaledSymbol (t ,_fcege ,scale ...);};func _dg (_ffa ,_cdd *Bitmap ,_gag int ,_fcff []byte ,_bc int )(_adgd error ){const _efc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_cgb ,_cba ,_faf ,_dada ,_bgf ,_fef ,_fbe ,_bed int ;_efaf ,_ab uint32 ;_gfa ,_bgdf byte ;_bggc uint16 ;);_feg :=make ([]byte ,4);_fbag :=make ([]byte ,4);for _faf =0;_faf < _ffa .Height -1;_faf ,_dada =_faf +2,_dada +1{_cgb =_faf *_ffa .RowStride ;_cba =_dada *_cdd .RowStride ;for _bgf ,_fef =0,0;_bgf < _bc ;_bgf ,_fef =_bgf +4,_fef +1{for _fbe =0;_fbe < 4;_fbe ++{_bed =_cgb +_bgf +_fbe ;if _bed <=len (_ffa .Data )-1&&_bed < _cgb +_ffa .RowStride {_feg [_fbe ]=_ffa .Data [_bed ];}else {_feg [_fbe ]=0x00;};_bed =_cgb +_ffa .RowStride +_bgf +_fbe ;if _bed <=len (_ffa .Data )-1&&_bed < _cgb +(2*_ffa .RowStride ){_fbag [_fbe ]=_ffa .Data [_bed ];}else {_fbag [_fbe ]=0x00;};};_efaf =_cfg .BigEndian .Uint32 (_feg );_ab =_cfg .BigEndian .Uint32 (_fbag );_ab |=_efaf ;_ab |=_ab <<1;_ab &=0xaaaaaaaa;_efaf =_ab |(_ab <<7);_gfa =byte (_efaf >>24);_bgdf =byte ((_efaf >>8)&0xff);_bed =_cba +_fef ;if _bed +1==len (_cdd .Data )-1||_bed +1>=_cba +_cdd .RowStride {_cdd .Data [_bed ]=_fcff [_gfa ];}else {_bggc =(uint16 (_fcff [_gfa ])<<8)|uint16 (_fcff [_bgdf ]);if _adgd =_cdd .setTwoBytes (_bed ,_bggc );_adgd !=nil {return _b .Wrapf (_adgd ,_efc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bed );};_fef ++;};};};return nil ;};func _fgff (_facca ,_ddef *Bitmap ,_gddb *Selection )(*Bitmap ,error ){const _eccgd ="\u0065\u0072\u006fd\u0065";var (_ffdf error ;_cbcc *Bitmap ;);_facca ,_ffdf =_geca (_facca ,_ddef ,_gddb ,&_cbcc );if _ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"");};if _ffdf =_facca .setAll ();_ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"");};var _cbaf SelectionValue ;for _feece :=0;_feece < _gddb .Height ;_feece ++{for _bbfg :=0;_bbfg < _gddb .Width ;_bbfg ++{_cbaf =_gddb .Data [_feece ][_bbfg ];if _cbaf ==SelHit {_ffdf =_eaec (_facca ,_gddb .Cx -_bbfg ,_gddb .Cy -_feece ,_ddef .Width ,_ddef .Height ,PixSrcAndDst ,_cbcc ,0,0);if _ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"");};};};};if MorphBC ==SymmetricMorphBC {return _facca ,nil ;};_gfbd ,_afeg ,_dcfe ,_fccf :=_gddb .findMaxTranslations ();if _gfbd > 0{if _ffdf =_facca .RasterOperation (0,0,_gfbd ,_ddef .Height ,PixClr ,nil ,0,0);_ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _dcfe > 0{if _ffdf =_facca .RasterOperation (_ddef .Width -_dcfe ,0,_dcfe ,_ddef .Height ,PixClr ,nil ,0,0);_ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _afeg > 0{if _ffdf =_facca .RasterOperation (0,0,_ddef .Width ,_afeg ,PixClr ,nil ,0,0);_ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _fccf > 0{if _ffdf =_facca .RasterOperation (0,_ddef .Height -_fccf ,_ddef .Width ,_fccf ,PixClr ,nil ,0,0);_ffdf !=nil {return nil ,_b .Wrap (_ffdf ,_eccgd ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _facca ,nil ;};func (_aaddc MorphProcess )verify (_bgec int ,_bddf ,_ebge *int )error {const _facc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _aaddc .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_aaddc .Arguments )!=2{return _b .Error (_facc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_dfaa ,_cgc :=_aaddc .getWidthHeight ();if _dfaa <=0||_cgc <=0{return _b .Error (_facc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_aadb :=len (_aaddc .Arguments );*_bddf +=_aadb ;if _aadb < 1||_aadb > 4{return _b .Error (_facc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _caef :=0;_caef < _aadb ;_caef ++{if _aaddc .Arguments [_caef ]< 1||_aaddc .Arguments [_caef ]> 4{return _b .Error (_facc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_aaddc .Arguments )==0{return _b .Error (_facc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dcfc :=_aaddc .Arguments [0];if _dcfc !=2&&_dcfc !=4&&_dcfc !=8{return _b .Error (_facc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_bddf -=_eegb [_dcfc /4];case MopAddBorder :if len (_aaddc .Arguments )==0{return _b .Error (_facc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafa :=_aaddc .Arguments [0];if _bgec > 0{return _b .Error (_facc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _aafa < 1{return _b .Error (_facc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ebge =_aafa ;};return nil ;};type CombinationOperator int ;func (_gdfbe *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _defd ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _aeed :=_gdfbe .validateIntSlice ();_aeed !=nil {return nil ,_b .Wrap (_aeed ,_defd ,"");};if _gdfbe .IntSlice .Size ()==0{return nil ,_b .Error (_defd ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_gdfbe .SortByY ();var (_cgff []*ClassedPoints ;_egeb int ;);_ffcg :=-1;var _gcac *ClassedPoints ;for _feaf :=0;_feaf < len (_gdfbe .IntSlice );_feaf ++{_egeb =int (_gdfbe .YAtIndex (_feaf ));if _egeb !=_ffcg {_gcac =&ClassedPoints {Points :_gdfbe .Points };_ffcg =_egeb ;_cgff =append (_cgff ,_gcac );};_gcac .IntSlice =append (_gcac .IntSlice ,_gdfbe .IntSlice [_feaf ]);};for _ ,_agga :=range _cgff {_agga .SortByX ();};return _cgff ,nil ;};func _fbge (_bbedb *Bitmap ,_egdbb ,_gcaf int ,_fgbcd ,_dbacb int ,_dfcf RasterOperator ){var (_bfcb bool ;_egbd bool ;_cgea int ;_ccd int ;_debfd int ;_dbgf int ;_agbgd bool ;_adaa byte ;);_gdgf :=8-(_egdbb &7);_aeaff :=_cgafg [_gdgf ];_bbdd :=_bbedb .RowStride *_gcaf +(_egdbb >>3);if _fgbcd < _gdgf {_bfcb =true ;_aeaff &=_aaaab [8-_gdgf +_fgbcd ];};if !_bfcb {_cgea =(_fgbcd -_gdgf )>>3;if _cgea !=0{_egbd =true ;_ccd =_bbdd +1;};};_debfd =(_egdbb +_fgbcd )&7;if !(_bfcb ||_debfd ==0){_agbgd =true ;_adaa =_aaaab [_debfd ];_dbgf =_bbdd +1+_cgea ;};var _gcdf ,_bggb int ;switch _dfcf {case PixClr :for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{_bbedb .Data [_bbdd ]=_ffeab (_bbedb .Data [_bbdd ],0x0,_aeaff );_bbdd +=_bbedb .RowStride ;};if _egbd {for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{for _bggb =0;_bggb < _cgea ;_bggb ++{_bbedb .Data [_ccd +_bggb ]=0x0;};_ccd +=_bbedb .RowStride ;};};if _agbgd {for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{_bbedb .Data [_dbgf ]=_ffeab (_bbedb .Data [_dbgf ],0x0,_adaa );_dbgf +=_bbedb .RowStride ;};};case PixSet :for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{_bbedb .Data [_bbdd ]=_ffeab (_bbedb .Data [_bbdd ],0xff,_aeaff );_bbdd +=_bbedb .RowStride ;};if _egbd {for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{for _bggb =0;_bggb < _cgea ;_bggb ++{_bbedb .Data [_ccd +_bggb ]=0xff;};_ccd +=_bbedb .RowStride ;};};if _agbgd {for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{_bbedb .Data [_dbgf ]=_ffeab (_bbedb .Data [_dbgf ],0xff,_adaa );_dbgf +=_bbedb .RowStride ;};};case PixNotDst :for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{_bbedb .Data [_bbdd ]=_ffeab (_bbedb .Data [_bbdd ],^_bbedb .Data [_bbdd ],_aeaff );_bbdd +=_bbedb .RowStride ;};if _egbd {for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{for _bggb =0;_bggb < _cgea ;_bggb ++{_bbedb .Data [_ccd +_bggb ]=^(_bbedb .Data [_ccd +_bggb ]);};_ccd +=_bbedb .RowStride ;};};if _agbgd {for _gcdf =0;_gcdf < _dbacb ;_gcdf ++{_bbedb .Data [_dbgf ]=_ffeab (_bbedb .Data [_dbgf ],^_bbedb .Data [_dbgf ],_adaa );_dbgf +=_bbedb .RowStride ;};};};};func (_fega *Bitmap )thresholdPixelSum (_bac int )bool {var (_fcb int ;_fca uint8 ;_cbd byte ;_faa int ;);_cgaf :=_fega .RowStride ;_gddf :=uint (_fega .Width &0x07);if _gddf !=0{_fca =uint8 ((0xff<<(8-_gddf ))&0xff);_cgaf --;};for _bca :=0;_bca < _fega .Height ;_bca ++{for _faa =0;_faa < _cgaf ;_faa ++{_cbd =_fega .Data [_bca *_fega .RowStride +_faa ];_fcb +=int (_cda [_cbd ]);};if _gddf !=0{_cbd =_fega .Data [_bca *_fega .RowStride +_faa ]&_fca ;_fcb +=int (_cda [_cbd ]);};if _fcb > _bac {return true ;};};return false ;};func _geca (_bgfd *Bitmap ,_dacd *Bitmap ,_dabd *Selection ,_aaaed **Bitmap )(*Bitmap ,error ){const _gbe ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _dacd ==nil {return nil ,_b .Error (_gbe ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _dabd ==nil {return nil ,_b .Error (_gbe ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_gbeb ,_deba :=_dabd .Height ,_dabd .Width ;if _gbeb ==0||_deba ==0{return nil ,_b .Error (_gbe ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _bgfd ==nil {_bgfd =_dacd .createTemplate ();*_aaaed =_dacd ;return _bgfd ,nil ;};_bgfd .Width =_dacd .Width ;_bgfd .Height =_dacd .Height ;_bgfd .RowStride =_dacd .RowStride ;_bgfd .Color =_dacd .Color ;_bgfd .Data =make ([]byte ,_dacd .RowStride *_dacd .Height );if _bgfd ==_dacd {*_aaaed =_dacd .Copy ();}else {*_aaaed =_dacd ;};return _bgfd ,nil ;};func (_geaa *Points )Add (pt *Points )error {const _ecbf ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _geaa ==nil {return _b .Error (_ecbf ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _b .Error (_ecbf ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_geaa =append (*_geaa ,*pt ...);return nil ;};func _gfccf (_cffd ,_adeg *Bitmap ,_gcfg *Selection )(*Bitmap ,error ){const _aadc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _dcbc error ;if _cffd ,_dcbc =_aeab (_cffd ,_adeg ,_gcfg );_dcbc !=nil {return nil ,_dcbc ;};_badg ,_dcbc :=_cfbe (nil ,_adeg ,_gcfg );if _dcbc !=nil {return nil ,_b .Wrap (_dcbc ,_aadc ,"");};if _ ,_dcbc =_fgff (_cffd ,_badg ,_gcfg );_dcbc !=nil {return nil ,_b .Wrap (_dcbc ,_aadc ,"");};return _cffd ,nil ;};func (_fbc *Bitmap )GetByteIndex (x ,y int )int {return y *_fbc .RowStride +(x >>3)};func MakePixelCentroidTab8 ()[]int {return _dfaab ()};func (_gdefc *byWidth )Swap (i ,j int ){_gdefc .Values [i ],_gdefc .Values [j ]=_gdefc .Values [j ],_gdefc .Values [i ];if _gdefc .Boxes !=nil {_gdefc .Boxes [i ],_gdefc .Boxes [j ]=_gdefc .Boxes [j ],_gdefc .Boxes [i ];};};func _ecdgb (_bbae *Bitmap ,_gcfgd ,_fbeb int ,_ccfc ,_aafcc int ,_fccfe RasterOperator ,_ffga *Bitmap ,_aegc ,_dgaad int )error {var _dcge ,_efccg ,_cdfg ,_bcfa int ;if _gcfgd < 0{_aegc -=_gcfgd ;_ccfc +=_gcfgd ;_gcfgd =0;};if _aegc < 0{_gcfgd -=_aegc ;_ccfc +=_aegc ;_aegc =0;};_dcge =_gcfgd +_ccfc -_bbae .Width ;if _dcge > 0{_ccfc -=_dcge ;};_efccg =_aegc +_ccfc -_ffga .Width ;if _efccg > 0{_ccfc -=_efccg ;};if _fbeb < 0{_dgaad -=_fbeb ;_aafcc +=_fbeb ;_fbeb =0;};if _dgaad < 0{_fbeb -=_dgaad ;_aafcc +=_dgaad ;_dgaad =0;};_cdfg =_fbeb +_aafcc -_bbae .Height ;if _cdfg > 0{_aafcc -=_cdfg ;};_bcfa =_dgaad +_aafcc -_ffga .Height ;if _bcfa > 0{_aafcc -=_bcfa ;};if _ccfc <=0||_aafcc <=0{return nil ;};var _eeea error ;switch {case _gcfgd &7==0&&_aegc &7==0:_eeea =_ccgd (_bbae ,_gcfgd ,_fbeb ,_ccfc ,_aafcc ,_fccfe ,_ffga ,_aegc ,_dgaad );case _gcfgd &7==_aegc &7:_eeea =_aefg (_bbae ,_gcfgd ,_fbeb ,_ccfc ,_aafcc ,_fccfe ,_ffga ,_aegc ,_dgaad );default:_eeea =_ggge (_bbae ,_gcfgd ,_fbeb ,_ccfc ,_aafcc ,_fccfe ,_ffga ,_aegc ,_dgaad );};if _eeea !=nil {return _b .Wrap (_eeea ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};type fillSegment struct{_fabe int ;_fecbf int ;_agbe int ;_efacae int ;};func TstFrameBitmapData ()[]byte {return _badb .Data };func _cfbe (_afdc *Bitmap ,_eced *Bitmap ,_fdfed *Selection )(*Bitmap ,error ){var (_bggf *Bitmap ;_cbee error ;);_afdc ,_cbee =_geca (_afdc ,_eced ,_fdfed ,&_bggf );if _cbee !=nil {return nil ,_cbee ;};if _cbee =_afdc .clearAll ();_cbee !=nil {return nil ,_cbee ;};var _cfcac SelectionValue ;for _abdea :=0;_abdea < _fdfed .Height ;_abdea ++{for _dabg :=0;_dabg < _fdfed .Width ;_dabg ++{_cfcac =_fdfed .Data [_abdea ][_dabg ];if _cfcac ==SelHit {if _cbee =_afdc .RasterOperation (_dabg -_fdfed .Cx ,_abdea -_fdfed .Cy ,_eced .Width ,_eced .Height ,PixSrcOrDst ,_bggf ,0,0);_cbee !=nil {return nil ,_cbee ;};};};};return _afdc ,nil ;};func (_deaf *BitmapsArray )AddBitmaps (bm *Bitmaps ){_deaf .Values =append (_deaf .Values ,bm )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_cbfd :=_cacdb (h ,w ,"");_cbfd .setOrigin (cy ,cx );var _agdfc ,_gfda int ;for _agdfc =0;_agdfc < h ;_agdfc ++{for _gfda =0;_gfda < w ;_gfda ++{_cbfd .Data [_agdfc ][_gfda ]=tp ;};};return _cbfd ;};func _fecge (_ggdfd ,_aece ,_cdec *Bitmap ,_ede int )(*Bitmap ,error ){const _cfgf ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _aece ==nil {return nil ,_b .Error (_cfgf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cdec ==nil {return nil ,_b .Error (_cfgf ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ede !=4&&_ede !=8{return nil ,_b .Error (_cfgf ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _bdcb error ;_ggdfd ,_bdcb =_fffd (_ggdfd ,_aece );if _bdcb !=nil {return nil ,_b .Wrap (_bdcb ,_cfgf ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_acca :=_aece .createTemplate ();_cdec .setPadBits (0);for _cgbb :=0;_cgbb < _bfcbf ;_cgbb ++{_acca ,_bdcb =_fffd (_acca ,_ggdfd );if _bdcb !=nil {return nil ,_b .Wrapf (_bdcb ,_cfgf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_cgbb );};if _bdcb =_dgcc (_ggdfd ,_cdec ,_ede );_bdcb !=nil {return nil ,_b .Wrapf (_bdcb ,_cfgf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_cgbb );};if _acca .Equals (_ggdfd ){break ;};};return _ggdfd ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_agcf *Bitmap )String ()string {var _bfaa ="\u000a";for _gbgg :=0;_gbgg < _agcf .Height ;_gbgg ++{var _cfcb string ;for _bgad :=0;_bgad < _agcf .Width ;_bgad ++{_efd :=_agcf .GetPixel (_bgad ,_gbgg );if _efd {_cfcb +="\u0031";}else {_cfcb +="\u0030";};};_bfaa +=_cfcb +"\u000a";};return _bfaa ;};func (_ecca *Selection )findMaxTranslations ()(_aecaf ,_aabaa ,_gafec ,_cdca int ){for _dbdd :=0;_dbdd < _ecca .Height ;_dbdd ++{for _acbb :=0;_acbb < _ecca .Width ;_acbb ++{if _ecca .Data [_dbdd ][_acbb ]==SelHit {_aecaf =_gdg (_aecaf ,_ecca .Cx -_acbb );_aabaa =_gdg (_aabaa ,_ecca .Cy -_dbdd );_gafec =_gdg (_gafec ,_acbb -_ecca .Cx );_cdca =_gdg (_cdca ,_dbdd -_ecca .Cy );};};};return _aecaf ,_aabaa ,_gafec ,_cdca ;};func (_agae Points )XSorter ()func (_dff ,_ageb int )bool {return func (_fgbda ,_aaebd int )bool {return _agae [_fgbda ].X < _agae [_aaebd ].X };};type Points []Point ;func (_dbgb *ClassedPoints )Len ()int {return _dbgb .IntSlice .Size ()};func (_efe *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _efe .removeBorderGeneral (left ,right ,top ,bot );};func _def (_bgc *Bitmap ,_gde int ,_gadc []byte )(_gdd *Bitmap ,_dea error ){const _age ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _bgc ==nil {return nil ,_b .Error (_age ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gde < 1||_gde > 4{return nil ,_b .Error (_age ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _bgc .Height <=1{return nil ,_b .Errorf (_age ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bgc .Height );};_gdd =New (_bgc .Width /2,_bgc .Height /2);if _gadc ==nil {_gadc =_gfgc ();};_efg :=_ggeg (_bgc .RowStride ,2*_gdd .RowStride );switch _gde {case 1:_dea =_dg (_bgc ,_gdd ,_gde ,_gadc ,_efg );case 2:_dea =_aag (_bgc ,_gdd ,_gde ,_gadc ,_efg );case 3:_dea =_ac (_bgc ,_gdd ,_gde ,_gadc ,_efg );case 4:_dea =_bdb (_bgc ,_gdd ,_gde ,_gadc ,_efg );};if _dea !=nil {return nil ,_dea ;};return _gdd ,nil ;};func (_acff *Bitmap )connComponentsBB (_deeag int )(_acec *Boxes ,_eaf error ){const _abd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _deeag !=4&&_deeag !=8{return nil ,_b .Error (_abd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _acff .Zero (){return &Boxes {},nil ;};_acff .setPadBits (0);_acafb ,_eaf :=_fffd (nil ,_acff );if _eaf !=nil {return nil ,_b .Wrap (_eaf ,_abd ,"\u0062\u006d\u0031");};_bbcge :=&_fa .Stack {};_bbcge .Aux =&_fa .Stack {};_acec =&Boxes {};var (_dbbb ,_fbgb int ;_cffb _fc .Point ;_cedef bool ;_becg *_fc .Rectangle ;);for {if _cffb ,_cedef ,_eaf =_acafb .nextOnPixel (_fbgb ,_dbbb );_eaf !=nil {return nil ,_b .Wrap (_eaf ,_abd ,"");};if !_cedef {break ;};if _becg ,_eaf =_bcag (_acafb ,_bbcge ,_cffb .X ,_cffb .Y ,_deeag );_eaf !=nil {return nil ,_b .Wrap (_eaf ,_abd ,"");};if _eaf =_acec .Add (_becg );_eaf !=nil {return nil ,_b .Wrap (_eaf ,_abd ,"");};_fbgb =_cffb .X ;_dbbb =_cffb .Y ;};return _acec ,nil ;};func NewClassedPoints (points *Points ,classes _fa .IntSlice )(*ClassedPoints ,error ){const _cedb ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_b .Error (_cedb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_b .Error (_cedb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_gffd :=&ClassedPoints {Points :points ,IntSlice :classes };if _effc :=_gffd .validateIntSlice ();_effc !=nil {return nil ,_b .Wrap (_effc ,_cedb ,"");};return _gffd ,nil ;};func (_cddd *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cddd .Copy (),nil ;};_ffbd ,_gfc :=_cddd .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gfc !=nil {return nil ,_b .Wrap (_gfc ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _ffbd ,nil ;};func (_bbcb *Bitmap )setEightPartlyBytes (_fcge ,_bdec int ,_efbf uint64 )(_gbf error ){var (_dgdd byte ;_dfc int ;);const _dfa ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _agef :=1;_agef <=_bdec ;_agef ++{_dfc =64-_agef *8;_dgdd =byte (_efbf >>uint (_dfc )&0xff);_cf .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dgdd ,_fcge ,_fcge +_agef -1,_bdec ,_dfc );if _gbf =_bbcb .SetByte (_fcge +_agef -1,_dgdd );_gbf !=nil {return _b .Wrap (_gbf ,_dfa ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_aagd :=_bbcb .RowStride *8-_bbcb .Width ;if _aagd ==0{return nil ;};_dfc -=8;_dgdd =byte (_efbf >>uint (_dfc )&0xff)<<uint (_aagd );if _gbf =_bbcb .SetByte (_fcge +_bdec ,_dgdd );_gbf !=nil {return _b .Wrap (_gbf ,_dfa ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};const (_fegce shift =iota ;_aebfe ;);type SizeComparison int ;func _d (_da ,_bde *Bitmap )(_afg error ){const _de ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ea :=_bde .RowStride ;_cfc :=_da .RowStride ;_ae :=_bde .RowStride *4-_da .RowStride ;var (_ded ,_ed byte ;_aeb uint32 ;_fe ,_ge ,_fb ,_bae ,_bdf ,_fcf ,_ag int ;);for _fb =0;_fb < _bde .Height ;_fb ++{_fe =_fb *_ea ;_ge =4*_fb *_cfc ;for _bae =0;_bae < _ea ;_bae ++{_ded =_bde .Data [_fe +_bae ];_aeb =_aecg [_ded ];_fcf =_ge +_bae *4;if _ae !=0&&(_bae +1)*4> _da .RowStride {for _bdf =_ae ;_bdf > 0;_bdf --{_ed =byte ((_aeb >>uint (_bdf *8))&0xff);_ag =_fcf +(_ae -_bdf );if _afg =_da .SetByte (_ag ,_ed );_afg !=nil {return _b .Wrapf (_afg ,_de ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_bdf );};};}else if _afg =_da .setFourBytes (_fcf ,_aeb );_afg !=nil {return _b .Wrap (_afg ,_de ,"");};if _afg =_da .setFourBytes (_ge +_bae *4,_aecg [_bde .Data [_fe +_bae ]]);_afg !=nil {return _b .Wrap (_afg ,_de ,"");};};for _bdf =1;_bdf < 4;_bdf ++{for _bae =0;_bae < _cfc ;_bae ++{if _afg =_da .SetByte (_ge +_bdf *_cfc +_bae ,_da .Data [_ge +_bae ]);_afg !=nil {return _b .Wrapf (_afg ,_de ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_bdf ,_bae );};};};};return nil ;};func _cd (_afa *Bitmap ,_dbc int )(*Bitmap ,error ){const _dbd ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _afa ==nil {return nil ,_b .Error (_dbd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbc ==1{return _fffd (nil ,_afa );};if _dbc !=2&&_dbc !=4&&_dbc !=8{return nil ,_b .Error (_dbd ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_bad :=_dbc *_afa .Width ;_gb :=_dbc *_afa .Height ;_fbf :=New (_bad ,_gb );var _bga error ;switch _dbc {case 2:_bga =_cb (_fbf ,_afa );case 4:_bga =_d (_fbf ,_afa );case 8:_bga =_bbc (_fbf ,_afa );};if _bga !=nil {return nil ,_b .Wrap (_bga ,_dbd ,"");};return _fbf ,nil ;};func _bcag (_cddaa *Bitmap ,_fceg *_fa .Stack ,_ggfff ,_cbcff ,_bcbb int )(_fffgg *_fc .Rectangle ,_bede error ){const _egbfb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cddaa ==nil {return nil ,_b .Error (_egbfb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fceg ==nil {return nil ,_b .Error (_egbfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _bcbb {case 4:if _fffgg ,_bede =_acaea (_cddaa ,_fceg ,_ggfff ,_cbcff );_bede !=nil {return nil ,_b .Wrap (_bede ,_egbfb ,"");};return _fffgg ,nil ;case 8:if _fffgg ,_bede =_acdf (_cddaa ,_fceg ,_ggfff ,_cbcff );_bede !=nil {return nil ,_b .Wrap (_bede ,_egbfb ,"");};return _fffgg ,nil ;default:return nil ,_b .Errorf (_egbfb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_bcbb );};};func (_abe *Bitmaps )String ()string {_ggefb :=_bg .Builder {};for _ ,_fegcg :=range _abe .Values {_ggefb .WriteString (_fegcg .String ());_ggefb .WriteRune ('\n');};return _ggefb .String ();};func (_dadd Points )GetIntY (i int )(int ,error ){if i >=len (_dadd ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_dadd [i ].Y ),nil ;};func _afcd (_acaf ,_ccfd *Bitmap ,_gdgg CombinationOperator )*Bitmap {_gdaf :=New (_acaf .Width ,_acaf .Height );for _cae :=0;_cae < len (_gdaf .Data );_cae ++{_gdaf .Data [_cae ]=_dcfb (_acaf .Data [_cae ],_ccfd .Data [_cae ],_gdgg );};return _gdaf ;};func _ccgd (_ddffd *Bitmap ,_ecdgg ,_cfbdc ,_gefa ,_babg int ,_egba RasterOperator ,_decb *Bitmap ,_efff ,_dbga int )error {var (_debfe byte ;_ccgea int ;_efgg int ;_ecega ,_abffb int ;_fdaeg ,_adfeb int ;);_gecd :=_gefa >>3;_edda :=_gefa &7;if _edda > 0{_debfe =_aaaab [_edda ];};_ccgea =_decb .RowStride *_dbga +(_efff >>3);_efgg =_ddffd .RowStride *_cfbdc +(_ecdgg >>3);switch _egba {case PixSrc :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=_decb .Data [_ecega ];_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],_decb .Data [_ecega ],_debfe );};};case PixNotSrc :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=^(_decb .Data [_ecega ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],^_decb .Data [_ecega ],_debfe );};};case PixSrcOrDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]|=_decb .Data [_ecega ];_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],_decb .Data [_ecega ]|_ddffd .Data [_abffb ],_debfe );};};case PixSrcAndDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]&=_decb .Data [_ecega ];_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],_decb .Data [_ecega ]&_ddffd .Data [_abffb ],_debfe );};};case PixSrcXorDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]^=_decb .Data [_ecega ];_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],_decb .Data [_ecega ]^_ddffd .Data [_abffb ],_debfe );};};case PixNotSrcOrDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]|=^(_decb .Data [_ecega ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],^(_decb .Data [_ecega ])|_ddffd .Data [_abffb ],_debfe );};};case PixNotSrcAndDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]&=^(_decb .Data [_ecega ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],^(_decb .Data [_ecega ])&_ddffd .Data [_abffb ],_debfe );};};case PixSrcOrNotDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=_decb .Data [_ecega ]|^(_ddffd .Data [_abffb ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],_decb .Data [_ecega ]|^(_ddffd .Data [_abffb ]),_debfe );};};case PixSrcAndNotDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=_decb .Data [_ecega ]&^(_ddffd .Data [_abffb ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],_decb .Data [_ecega ]&^(_ddffd .Data [_abffb ]),_debfe );};};case PixNotPixSrcOrDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=^(_decb .Data [_ecega ]|_ddffd .Data [_abffb ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],^(_decb .Data [_ecega ]|_ddffd .Data [_abffb ]),_debfe );};};case PixNotPixSrcAndDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=^(_decb .Data [_ecega ]&_ddffd .Data [_abffb ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],^(_decb .Data [_ecega ]&_ddffd .Data [_abffb ]),_debfe );};};case PixNotPixSrcXorDst :for _fdaeg =0;_fdaeg < _babg ;_fdaeg ++{_ecega =_ccgea +_fdaeg *_decb .RowStride ;_abffb =_efgg +_fdaeg *_ddffd .RowStride ;for _adfeb =0;_adfeb < _gecd ;_adfeb ++{_ddffd .Data [_abffb ]=^(_decb .Data [_ecega ]^_ddffd .Data [_abffb ]);_abffb ++;_ecega ++;};if _edda > 0{_ddffd .Data [_abffb ]=_ffeab (_ddffd .Data [_abffb ],^(_decb .Data [_ecega ]^_ddffd .Data [_abffb ]),_debfe );};};default:_cf .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_egba );return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _cfbg (_ebde *Bitmap ,_debd ,_bddd int ,_beeg ,_dgfe int ,_eedc RasterOperator ){var (_cfaaf int ;_eedgd byte ;_ddfe ,_gcegc int ;_gfe int ;);_dfaad :=_beeg >>3;_ffadd :=_beeg &7;if _ffadd > 0{_eedgd =_aaaab [_ffadd ];};_cfaaf =_ebde .RowStride *_bddd +(_debd >>3);switch _eedc {case PixClr :for _ddfe =0;_ddfe < _dgfe ;_ddfe ++{_gfe =_cfaaf +_ddfe *_ebde .RowStride ;for _gcegc =0;_gcegc < _dfaad ;_gcegc ++{_ebde .Data [_gfe ]=0x0;_gfe ++;};if _ffadd > 0{_ebde .Data [_gfe ]=_ffeab (_ebde .Data [_gfe ],0x0,_eedgd );};};case PixSet :for _ddfe =0;_ddfe < _dgfe ;_ddfe ++{_gfe =_cfaaf +_ddfe *_ebde .RowStride ;for _gcegc =0;_gcegc < _dfaad ;_gcegc ++{_ebde .Data [_gfe ]=0xff;_gfe ++;};if _ffadd > 0{_ebde .Data [_gfe ]=_ffeab (_ebde .Data [_gfe ],0xff,_eedgd );};};case PixNotDst :for _ddfe =0;_ddfe < _dgfe ;_ddfe ++{_gfe =_cfaaf +_ddfe *_ebde .RowStride ;for _gcegc =0;_gcegc < _dfaad ;_gcegc ++{_ebde .Data [_gfe ]=^_ebde .Data [_gfe ];_gfe ++;};if _ffadd > 0{_ebde .Data [_gfe ]=_ffeab (_ebde .Data [_gfe ],^_ebde .Data [_gfe ],_eedgd );};};};};func (_eddf *Points )AddPoint (x ,y float32 ){*_eddf =append (*_eddf ,Point {x ,y })};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func TstFrameBitmap ()*Bitmap {return _badb .Copy ()};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_eecf Points )Size ()int {return len (_eecf )};func _acaea (_abgg *Bitmap ,_efbce *_fa .Stack ,_afbc ,_cfcf int )(_gcca *_fc .Rectangle ,_edaeb error ){const _bgab ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _abgg ==nil {return nil ,_b .Error (_bgab ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _efbce ==nil {return nil ,_b .Error (_bgab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_faff ,_efcf :=_abgg .Width ,_abgg .Height ;_cddg :=_faff -1;_cdeg :=_efcf -1;if _afbc < 0||_afbc > _cddg ||_cfcf < 0||_cfcf > _cdeg ||!_abgg .GetPixel (_afbc ,_cfcf ){return nil ,nil ;};var _dgfee *_fc .Rectangle ;_dgfee ,_edaeb =Rect (100000,100000,0,0);if _edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"");};if _edaeb =_ebfc (_efbce ,_afbc ,_afbc ,_cfcf ,1,_cdeg ,_dgfee );_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _edaeb =_ebfc (_efbce ,_afbc ,_afbc ,_cfcf +1,-1,_cdeg ,_dgfee );_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_dgfee .Min .X ,_dgfee .Max .X =_afbc ,_afbc ;_dgfee .Min .Y ,_dgfee .Max .Y =_cfcf ,_cfcf ;var (_deff *fillSegment ;_deed int ;);for _efbce .Len ()> 0{if _deff ,_edaeb =_bgadb (_efbce );_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"");};_cfcf =_deff ._agbe ;for _afbc =_deff ._fabe ;_afbc >=0&&_abgg .GetPixel (_afbc ,_cfcf );_afbc --{if _edaeb =_abgg .SetPixel (_afbc ,_cfcf ,0);_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"");};};if _afbc >=_deff ._fabe {for _afbc ++;_afbc <=_deff ._fecbf &&_afbc <=_cddg &&!_abgg .GetPixel (_afbc ,_cfcf );_afbc ++{};_deed =_afbc ;if !(_afbc <=_deff ._fecbf &&_afbc <=_cddg ){continue ;};}else {_deed =_afbc +1;if _deed < _deff ._fabe -1{if _edaeb =_ebfc (_efbce ,_deed ,_deff ._fabe -1,_deff ._agbe ,-_deff ._efacae ,_cdeg ,_dgfee );_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_afbc =_deff ._fabe +1;};for {for ;_afbc <=_cddg &&_abgg .GetPixel (_afbc ,_cfcf );_afbc ++{if _edaeb =_abgg .SetPixel (_afbc ,_cfcf ,0);_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edaeb =_ebfc (_efbce ,_deed ,_afbc -1,_deff ._agbe ,_deff ._efacae ,_cdeg ,_dgfee );_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afbc > _deff ._fecbf +1{if _edaeb =_ebfc (_efbce ,_deff ._fecbf +1,_afbc -1,_deff ._agbe ,-_deff ._efacae ,_cdeg ,_dgfee );_edaeb !=nil {return nil ,_b .Wrap (_edaeb ,_bgab ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _afbc ++;_afbc <=_deff ._fecbf &&_afbc <=_cddg &&!_abgg .GetPixel (_afbc ,_cfcf );_afbc ++{};_deed =_afbc ;if !(_afbc <=_deff ._fecbf &&_afbc <=_cddg ){break ;};};};_dgfee .Max .X ++;_dgfee .Max .Y ++;return _dgfee ,nil ;};func (_baff Points )GetIntX (i int )(int ,error ){if i >=len (_baff ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_baff [i ].X ),nil ;};func _dfaab ()[]int {_egef :=make ([]int ,256);_egef [0]=0;_egef [1]=7;var _fcfg int ;for _fcfg =2;_fcfg < 4;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -2]+6;};for _fcfg =4;_fcfg < 8;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -4]+5;};for _fcfg =8;_fcfg < 16;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -8]+4;};for _fcfg =16;_fcfg < 32;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -16]+3;};for _fcfg =32;_fcfg < 64;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -32]+2;};for _fcfg =64;_fcfg < 128;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -64]+1;};for _fcfg =128;_fcfg < 256;_fcfg ++{_egef [_fcfg ]=_egef [_fcfg -128];};return _egef ;};func TstNSymbol (t *_f .T ,scale ...int )*Bitmap {_ccaf ,_accad :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_bb .NoError (t ,_accad );return TstGetScaledSymbol (t ,_ccaf ,scale ...);};func (_dgcd *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cefd *Bitmaps ,_beaag error ){const _dedce ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _dgcd ==nil {return nil ,_b .Error (_dedce ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_dedce ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_dedce ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_ffce ,_beaag :=_dgcd .makeSizeIndicator (width ,height ,tp ,relation );if _beaag !=nil {return nil ,_b .Wrap (_beaag ,_dedce ,"");};_cefd ,_beaag =_dgcd .selectByIndicator (_ffce );if _beaag !=nil {return nil ,_b .Wrap (_beaag ,_dedce ,"");};return _cefd ,nil ;};func (_daaf *Boxes )Get (i int )(*_fc .Rectangle ,error ){const _afbg ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _daaf ==nil {return nil ,_b .Error (_afbg ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_daaf )-1{return nil ,_b .Errorf (_afbg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_daaf )[i ],nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _cff ,_ccbf int ;_fgbd :=src .RowStride -1;if x < 0{_ccbf =-x ;x =0;}else if x +src .Width > dst .Width {_fgbd -=src .Width +x -dst .Width ;};if y < 0{_cff =-y ;y =0;_ccbf +=src .RowStride ;_fgbd +=src .RowStride ;}else if y +src .Height > dst .Height {_cff =src .Height +y -dst .Height ;};var (_gbbg int ;_dcb error ;);_gbgae :=x &0x07;_cbgf :=8-_gbgae ;_babd :=src .Width &0x07;_bbbf :=_cbgf -_babd ;_bfgc :=_cbgf &0x07!=0;_fcde :=src .Width <=((_fgbd -_ccbf )<<3)+_cbgf ;_befd :=dst .GetByteIndex (x ,y );_cgee :=_cff +dst .Height ;if src .Height > _cgee {_gbbg =_cgee ;}else {_gbbg =src .Height ;};switch {case !_bfgc :_dcb =_daf (src ,dst ,_cff ,_gbbg ,_befd ,_ccbf ,_fgbd ,op );case _fcde :_dcb =_bccb (src ,dst ,_cff ,_gbbg ,_befd ,_ccbf ,_fgbd ,_bbbf ,_gbgae ,_cbgf ,op );default:_dcb =_ggg (src ,dst ,_cff ,_gbbg ,_befd ,_ccbf ,_fgbd ,_bbbf ,_gbgae ,_cbgf ,op ,_babd );};return _dcb ;};func TstAddSymbol (t *_f .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_cfcc :=_fc .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_cfcc );*x +=sym .Width +space ;};func (_dga *Bitmap )InverseData (){_dga .inverseData ()};func _acgf (_edgc int )int {if _edgc < 0{return -_edgc ;};return _edgc ;};func (_eccb *ClassedPoints )ySortFunction ()func (_ccge int ,_becgb int )bool {return func (_gecb ,_aegf int )bool {return _eccb .YAtIndex (_gecb )< _eccb .YAtIndex (_aegf )};};func (_ccc *Bitmap )Equals (s *Bitmap )bool {if len (_ccc .Data )!=len (s .Data )||_ccc .Width !=s .Width ||_ccc .Height !=s .Height {return false ;};for _fbaf :=0;_fbaf < _ccc .Height ;_fbaf ++{_ecf :=_fbaf *_ccc .RowStride ;for _acaa :=0;_acaa < _ccc .RowStride ;_acaa ++{if _ccc .Data [_ecf +_acaa ]!=s .Data [_ecf +_acaa ]{return false ;};};};return true ;};func Centroids (bms []*Bitmap )(*Points ,error ){_aeca :=make ([]Point ,len (bms ));_cgab :=_dfaab ();_efdgd :=_agge ();var _caeef error ;for _aaca ,_dbca :=range bms {_aeca [_aaca ],_caeef =_dbca .centroid (_cgab ,_efdgd );if _caeef !=nil {return nil ,_caeef ;};};_adbb :=Points (_aeca );return &_adbb ,nil ;};func _fbca (_gfcgf ,_cef *Bitmap ,_bcge ,_cdgf ,_afd uint ,_afbf ,_feee int ,_edfe bool ,_ggbf ,_ceda int )error {for _gcbe :=_afbf ;_gcbe < _feee ;_gcbe ++{if _ggbf +1< len (_gfcgf .Data ){_cgaa :=_gcbe +1==_feee ;_agab ,_bbcg :=_gfcgf .GetByte (_ggbf );if _bbcg !=nil {return _bbcg ;};_ggbf ++;_agab <<=_bcge ;_gacgc ,_bbcg :=_gfcgf .GetByte (_ggbf );if _bbcg !=nil {return _bbcg ;};_gacgc >>=_cdgf ;_cgf :=_agab |_gacgc ;if _cgaa &&!_edfe {_cgf =_bccf (_afd ,_cgf );};_bbcg =_cef .SetByte (_ceda ,_cgf );if _bbcg !=nil {return _bbcg ;};_ceda ++;if _cgaa &&_edfe {_fgdg ,_egbc :=_gfcgf .GetByte (_ggbf );if _egbc !=nil {return _egbc ;};_fgdg <<=_bcge ;_cgf =_bccf (_afd ,_fgdg );if _egbc =_cef .SetByte (_ceda ,_cgf );_egbc !=nil {return _egbc ;};};continue ;};_aafc ,_fea :=_gfcgf .GetByte (_ggbf );if _fea !=nil {_cf .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_ggbf ,_fea );return _fea ;};_aafc <<=_bcge ;_ggbf ++;_fea =_cef .SetByte (_ceda ,_aafc );if _fea !=nil {return _fea ;};_ceda ++;};return nil ;};type RasterOperator int ;func (_fafgg *Bitmaps )AddBitmap (bm *Bitmap ){_fafgg .Values =append (_fafgg .Values ,bm )};const (Vanilla Color =iota ;Chocolate ;);func (_bbdb *Bitmap )setPadBits (_bge int ){_eda :=8-_bbdb .Width %8;if _eda ==8{return ;};_ccg :=_bbdb .Width /8;_cacdf :=_cgafg [_eda ];if _bge ==0{_cacdf ^=_cacdf ;};var _cacb int ;for _dab :=0;_dab < _bbdb .Height ;_dab ++{_cacb =_dab *_bbdb .RowStride +_ccg ;if _bge ==0{_bbdb .Data [_cacb ]&=_cacdf ;}else {_bbdb .Data [_cacb ]|=_cacdf ;};};};func _ebdc (_ggd ,_fdg int )*Bitmap {return &Bitmap {Width :_ggd ,Height :_fdg ,RowStride :(_ggd +7)>>3};};func (_bgde *Bitmap )setEightFullBytes (_cfee int ,_fgb uint64 )error {if _cfee +7> len (_bgde .Data )-1{return _b .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bgde .Data [_cfee ]=byte ((_fgb &0xff00000000000000)>>56);_bgde .Data [_cfee +1]=byte ((_fgb &0xff000000000000)>>48);_bgde .Data [_cfee +2]=byte ((_fgb &0xff0000000000)>>40);_bgde .Data [_cfee +3]=byte ((_fgb &0xff00000000)>>32);_bgde .Data [_cfee +4]=byte ((_fgb &0xff000000)>>24);_bgde .Data [_cfee +5]=byte ((_fgb &0xff0000)>>16);_bgde .Data [_cfee +6]=byte ((_fgb &0xff00)>>8);_bgde .Data [_cfee +7]=byte (_fgb &0xff);return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _cbc ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_bec :=_ebdc (width ,height );_bec .Data =data ;if _abc :=((width *height )+7)>>3;len (data )< _abc {return nil ,_b .Errorf (_cbc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_abc );};if _efca :=_bec .addPadBits ();_efca !=nil {return nil ,_b .Wrap (_efca ,_cbc ,"");};return _bec ,nil ;};func (_ggdf *Bitmap )SetPadBits (value int ){_ggdf .setPadBits (value )};func (_cbdgg *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _ggec ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_bafc ,_bebb :=_cbdgg .selectByIndexes (idx );if _bebb !=nil {return nil ,_b .Wrap (_bebb ,_ggec ,"");};return _bafc ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _ecfa (src ,sequence ...);};func (_aebb *Bitmap )setEightBytes (_fgf int ,_gdce uint64 )error {_dfd :=_aebb .RowStride -(_fgf %_aebb .RowStride );if _aebb .RowStride !=_aebb .Width >>3{_dfd --;};if _dfd >=8{return _aebb .setEightFullBytes (_fgf ,_gdce );};return _aebb .setEightPartlyBytes (_fgf ,_dfd ,_gdce );};func (_cbad *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_cbad .Width ,Height :_cbad .Height ,RowStride :_cbad .RowStride ,Color :_cbad .Color ,Text :_cbad .Text ,BitmapNumber :_cbad .BitmapNumber ,Special :_cbad .Special ,Data :make ([]byte ,len (_cbad .Data ))};};func (_ggf *Bitmap )GetUnpaddedData ()([]byte ,error ){_fbd :=uint (_ggf .Width &0x07);if _fbd ==0{return _ggf .Data ,nil ;};_feef :=_ggf .Width *_ggf .Height ;if _feef %8!=0{_feef >>=3;_feef ++;}else {_feef >>=3;};_deae :=make ([]byte ,_feef );_aec :=_e .NewWriterMSB (_deae );const _bfa ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _bef :=0;_bef < _ggf .Height ;_bef ++{for _beg :=0;_beg < _ggf .RowStride ;_beg ++{_cga :=_ggf .Data [_bef *_ggf .RowStride +_beg ];if _beg !=_ggf .RowStride -1{_aede :=_aec .WriteByte (_cga );if _aede !=nil {return nil ,_b .Wrap (_aede ,_bfa ,"");};continue ;};for _afb :=uint (0);_afb < _fbd ;_afb ++{_ddff :=_aec .WriteBit (int (_cga >>(7-_afb )&0x01));if _ddff !=nil {return nil ,_b .Wrap (_ddff ,_bfa ,"");};};};};return _deae ,nil ;};func _fbcf (_cgdd ,_bafd *Bitmap ,_bbeb ,_addf int )(_cbdg error ){const _ccdg ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_gbcb ,_ffbe ,_bdbgc ,_ccdf int ;_efde ,_fdgc ,_cdfc ,_feda ,_abae ,_abfb ,_bfef ,_gfbge byte ;);for _gbcb =0;_gbcb < _bbeb ;_gbcb ++{_bdbgc =_gbcb *_cgdd .RowStride ;_ccdf =_gbcb *_bafd .RowStride ;for _ffbe =0;_ffbe < _addf ;_ffbe ++{if _efde ,_cbdg =_cgdd .GetByte (_bdbgc +_ffbe );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _fdgc ,_cbdg =_bafd .GetByte (_ccdf +_ffbe );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _gbcb > 0{if _cdfc ,_cbdg =_cgdd .GetByte (_bdbgc -_cgdd .RowStride +_ffbe );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_efde |=_cdfc |(_cdfc <<1)|(_cdfc >>1);if _ffbe > 0{if _gfbge ,_cbdg =_cgdd .GetByte (_bdbgc -_cgdd .RowStride +_ffbe -1);_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_efde |=_gfbge <<7;};if _ffbe < _addf -1{if _gfbge ,_cbdg =_cgdd .GetByte (_bdbgc -_cgdd .RowStride +_ffbe +1);_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_efde |=_gfbge >>7;};};if _ffbe > 0{if _feda ,_cbdg =_cgdd .GetByte (_bdbgc +_ffbe -1);_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u006a\u0020\u003e \u0030");};_efde |=_feda <<7;};_efde &=_fdgc ;if _efde ==0||^_efde ==0{if _cbdg =_cgdd .SetByte (_bdbgc +_ffbe ,_efde );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_bfef =_efde ;_efde =(_efde |(_efde >>1)|(_efde <<1))&_fdgc ;if (_efde ^_bfef )==0{if _cbdg =_cgdd .SetByte (_bdbgc +_ffbe ,_efde );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _gbcb =_bbeb -1;_gbcb >=0;_gbcb --{_bdbgc =_gbcb *_cgdd .RowStride ;_ccdf =_gbcb *_bafd .RowStride ;for _ffbe =_addf -1;_ffbe >=0;_ffbe --{if _efde ,_cbdg =_cgdd .GetByte (_bdbgc +_ffbe );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _fdgc ,_cbdg =_bafd .GetByte (_ccdf +_ffbe );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _gbcb < _bbeb -1{if _abae ,_cbdg =_cgdd .GetByte (_bdbgc +_cgdd .RowStride +_ffbe );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_efde |=_abae |(_abae <<1)|_abae >>1;if _ffbe > 0{if _gfbge ,_cbdg =_cgdd .GetByte (_bdbgc +_cgdd .RowStride +_ffbe -1);_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_efde |=_gfbge <<7;};if _ffbe < _addf -1{if _gfbge ,_cbdg =_cgdd .GetByte (_bdbgc +_cgdd .RowStride +_ffbe +1);_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_efde |=_gfbge >>7;};};if _ffbe < _addf -1{if _abfb ,_cbdg =_cgdd .GetByte (_bdbgc +_ffbe +1);_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_efde |=_abfb >>7;};_efde &=_fdgc ;if _efde ==0||(^_efde )==0{if _cbdg =_cgdd .SetByte (_bdbgc +_ffbe ,_efde );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_bfef =_efde ;_efde =(_efde |(_efde >>1)|(_efde <<1))&_fdgc ;if (_efde ^_bfef )==0{if _cbdg =_cgdd .SetByte (_bdbgc +_ffbe ,_efde );_cbdg !=nil {return _b .Wrap (_cbdg ,_ccdg ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};const _bfcbf =5000;const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_dbg *Bitmap )setFourBytes (_bgeg int ,_gfcf uint32 )error {if _bgeg +3> len (_dbg .Data )-1{return _b .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bgeg );};_dbg .Data [_bgeg ]=byte ((_gfcf &0xff000000)>>24);_dbg .Data [_bgeg +1]=byte ((_gfcf &0xff0000)>>16);_dbg .Data [_bgeg +2]=byte ((_gfcf &0xff00)>>8);_dbg .Data [_bgeg +3]=byte (_gfcf &0xff);return nil ;};func _dgcc (_bdcc *Bitmap ,_bcea *Bitmap ,_gaab int )(_dccc error ){const _bceaf ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_acdc :=_ggeg (_bdcc .Height ,_bcea .Height );_cfged :=_ggeg (_bdcc .RowStride ,_bcea .RowStride );switch _gaab {case 4:_dccc =_abdbg (_bdcc ,_bcea ,_acdc ,_cfged );case 8:_dccc =_fbcf (_bdcc ,_bcea ,_acdc ,_cfged );default:return _b .Errorf (_bceaf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_gaab );};if _dccc !=nil {return _b .Wrap (_dccc ,_bceaf ,"");};return nil ;};func TstTSymbol (t *_f .T ,scale ...int )*Bitmap {_ggfe ,_cfgec :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_bb .NoError (t ,_cfgec );return TstGetScaledSymbol (t ,_ggfe ,scale ...);};func _bdb (_dgb ,_fec *Bitmap ,_cdc int ,_fff []byte ,_fdfc int )(_dcd error ){const _dcga ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_ecc ,_acf ,_cfcg ,_dgd ,_daae ,_gdc ,_aebc ,_bfd int ;_ddc ,_gcag uint32 ;_aga ,_cfa byte ;_baeg uint16 ;);_bbcf :=make ([]byte ,4);_cea :=make ([]byte ,4);for _cfcg =0;_cfcg < _dgb .Height -1;_cfcg ,_dgd =_cfcg +2,_dgd +1{_ecc =_cfcg *_dgb .RowStride ;_acf =_dgd *_fec .RowStride ;for _daae ,_gdc =0,0;_daae < _fdfc ;_daae ,_gdc =_daae +4,_gdc +1{for _aebc =0;_aebc < 4;_aebc ++{_bfd =_ecc +_daae +_aebc ;if _bfd <=len (_dgb .Data )-1&&_bfd < _ecc +_dgb .RowStride {_bbcf [_aebc ]=_dgb .Data [_bfd ];}else {_bbcf [_aebc ]=0x00;};_bfd =_ecc +_dgb .RowStride +_daae +_aebc ;if _bfd <=len (_dgb .Data )-1&&_bfd < _ecc +(2*_dgb .RowStride ){_cea [_aebc ]=_dgb .Data [_bfd ];}else {_cea [_aebc ]=0x00;};};_ddc =_cfg .BigEndian .Uint32 (_bbcf );_gcag =_cfg .BigEndian .Uint32 (_cea );_gcag &=_ddc ;_gcag &=_gcag <<1;_gcag &=0xaaaaaaaa;_ddc =_gcag |(_gcag <<7);_aga =byte (_ddc >>24);_cfa =byte ((_ddc >>8)&0xff);_bfd =_acf +_gdc ;if _bfd +1==len (_fec .Data )-1||_bfd +1>=_acf +_fec .RowStride {_fec .Data [_bfd ]=_fff [_aga ];if _dcd =_fec .SetByte (_bfd ,_fff [_aga ]);_dcd !=nil {return _b .Wrapf (_dcd ,_dcga ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bfd );};}else {_baeg =(uint16 (_fff [_aga ])<<8)|uint16 (_fff [_cfa ]);if _dcd =_fec .setTwoBytes (_bfd ,_baeg );_dcd !=nil {return _b .Wrapf (_dcd ,_dcga ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bfd );};_gdc ++;};};};return nil ;};func (_dgeb *Bitmap )resizeImageData (_cacd *Bitmap )error {if _cacd ==nil {return _b .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dgeb .SizesEqual (_cacd ){return nil ;};_dgeb .Data =make ([]byte ,len (_cacd .Data ));_dgeb .Width =_cacd .Width ;_dgeb .Height =_cacd .Height ;_dgeb .RowStride =_cacd .RowStride ;return nil ;};func (_agcc *Bitmaps )Size ()int {return len (_agcc .Values )};func (_aefd *byWidth )Less (i ,j int )bool {return _aefd .Values [i ].Width < _aefd .Values [j ].Width };var _ _c .Interface =&ClassedPoints {};func (_add *Bitmap )GetChocolateData ()[]byte {if _add .Color ==Vanilla {_add .inverseData ();};return _add .Data ;};func TstWordBitmapWithSpaces (t *_f .T ,scale ...int )*Bitmap {_gbbb :=1;if len (scale )> 0{_gbbb =scale [0];};_ceceb :=3;_ffcc :=9+7+15+2*_ceceb +2*_ceceb ;_cgbdb :=5+_ceceb +5+2*_ceceb ;_dggb :=New (_ffcc *_gbbb ,_cgbdb *_gbbb );_bdeb :=&Bitmaps {};var _agac *int ;_ceceb *=_gbbb ;_caac :=_ceceb ;_agac =&_caac ;_bbaf :=_ceceb ;_fgec :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,_ceceb );_fgec =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,_ceceb );_fgec =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,0);*_agac =_ceceb ;_bbaf =5*_gbbb +_ceceb ;_fgec =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,_ceceb );_fgec =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,1*_gbbb );_fgec =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bdeb ,_fgec ,_agac ,_bbaf ,0);TstWriteSymbols (t ,_bdeb ,_dggb );return _dggb ;};func _bccb (_gfcg ,_bdeg *Bitmap ,_cebf ,_acac ,_adca ,_cgba ,_agbg ,_bgea ,_dac ,_egb int ,_eae CombinationOperator )error {var _eca int ;_dcag :=func (){_eca ++;_adca +=_bdeg .RowStride ;_cgba +=_gfcg .RowStride ;_agbg +=_gfcg .RowStride };for _eca =_cebf ;_eca < _acac ;_dcag (){var _becf uint16 ;_adab :=_adca ;for _gee :=_cgba ;_gee <=_agbg ;_gee ++{_fdae ,_gef :=_bdeg .GetByte (_adab );if _gef !=nil {return _gef ;};_efce ,_gef :=_gfcg .GetByte (_gee );if _gef !=nil {return _gef ;};_becf =(_becf |uint16 (_efce ))<<uint (_egb );_efce =byte (_becf >>8);if _gee ==_agbg {_efce =_bccf (uint (_bgea ),_efce );};if _gef =_bdeg .SetByte (_adab ,_dcfb (_fdae ,_efce ,_eae ));_gef !=nil {return _gef ;};_adab ++;_becf <<=uint (_dac );};};return nil ;};func (_bacc *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _dfgcf ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _bacc ==nil {return nil ,_b .Error (_dfgcf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_bacc .Values )-1{return nil ,_b .Errorf (_dfgcf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bacc .Values [i ],nil ;};func (_abbe *byWidth )Len ()int {return len (_abbe .Values )};func (_dbge *Bitmaps )selectByIndicator (_fcfb *_fa .NumSlice )(_cfaae *Bitmaps ,_dcbf error ){const _dece ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dbge ==nil {return nil ,_b .Error (_dece ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _fcfb ==nil {return nil ,_b .Error (_dece ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_dbge .Values )==0{return _dbge ,nil ;};if len (*_fcfb )!=len (_dbge .Values ){return nil ,_b .Errorf (_dece ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_fcfb ),len (_dbge .Values ));};var _dbdag ,_acbd ,_ccdb int ;for _acbd =0;_acbd < len (*_fcfb );_acbd ++{if _dbdag ,_dcbf =_fcfb .GetInt (_acbd );_dcbf !=nil {return nil ,_b .Wrap (_dcbf ,_dece ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dbdag ==1{_ccdb ++;};};if _ccdb ==len (_dbge .Values ){return _dbge ,nil ;};_cfaae =&Bitmaps {};_badc :=len (_dbge .Values )==len (_dbge .Boxes );for _acbd =0;_acbd < len (*_fcfb );_acbd ++{if _dbdag =int ((*_fcfb )[_acbd ]);_dbdag ==0{continue ;};_cfaae .Values =append (_cfaae .Values ,_dbge .Values [_acbd ]);if _badc {_cfaae .Boxes =append (_cfaae .Boxes ,_dbge .Boxes [_acbd ]);};};return _cfaae ,nil ;};func New (width ,height int )*Bitmap {_afe :=_ebdc (width ,height );_afe .Data =make ([]byte ,height *_afe .RowStride );return _afe ;};func TstASymbol (t *_f .T )*Bitmap {t .Helper ();_dcec :=New (6,6);_bb .NoError (t ,_dcec .SetPixel (1,0,1));_bb .NoError (t ,_dcec .SetPixel (2,0,1));_bb .NoError (t ,_dcec .SetPixel (3,0,1));_bb .NoError (t ,_dcec .SetPixel (4,0,1));_bb .NoError (t ,_dcec .SetPixel (5,1,1));_bb .NoError (t ,_dcec .SetPixel (1,2,1));_bb .NoError (t ,_dcec .SetPixel (2,2,1));_bb .NoError (t ,_dcec .SetPixel (3,2,1));_bb .NoError (t ,_dcec .SetPixel (4,2,1));_bb .NoError (t ,_dcec .SetPixel (5,2,1));_bb .NoError (t ,_dcec .SetPixel (0,3,1));_bb .NoError (t ,_dcec .SetPixel (5,3,1));_bb .NoError (t ,_dcec .SetPixel (0,4,1));_bb .NoError (t ,_dcec .SetPixel (5,4,1));_bb .NoError (t ,_dcec .SetPixel (1,5,1));_bb .NoError (t ,_dcec .SetPixel (2,5,1));_bb .NoError (t ,_dcec .SetPixel (3,5,1));_bb .NoError (t ,_dcec .SetPixel (4,5,1));_bb .NoError (t ,_dcec .SetPixel (5,5,1));return _dcec ;};func (_dffa *Bitmaps )WidthSorter ()func (_bbfa ,_cebc int )bool {return func (_fgda ,_bbcc int )bool {return _dffa .Values [_fgda ].Width < _dffa .Values [_bbcc ].Width };};func (_aegea *ClassedPoints )Less (i ,j int )bool {return _aegea ._egdba (i ,j )};func (_bgegg *byHeight )Swap (i ,j int ){_bgegg .Values [i ],_bgegg .Values [j ]=_bgegg .Values [j ],_bgegg .Values [i ];if _bgegg .Boxes !=nil {_bgegg .Boxes [i ],_bgegg .Boxes [j ]=_bgegg .Boxes [j ],_bgegg .Boxes [i ];};};func _faca (_bdge ,_aab ,_eba *Bitmap )(*Bitmap ,error ){const _cbag ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _aab ==nil {return nil ,_b .Error (_cbag ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eba ==nil {return nil ,_b .Error (_cbag ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _bdge ==_eba {return nil ,_b .Error (_cbag ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_aab .SizesEqual (_eba ){_cf .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cbag );};var _ceccf error ;if _bdge ,_ceccf =_fffd (_bdge ,_aab );_ceccf !=nil {return nil ,_b .Wrap (_ceccf ,_cbag ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ceccf =_bdge .RasterOperation (0,0,_bdge .Width ,_bdge .Height ,PixSrcXorDst ,_eba ,0,0);_ceccf !=nil {return nil ,_b .Wrap (_ceccf ,_cbag ,"");};return _bdge ,nil ;};type byWidth Bitmaps ;func (_bfed *ClassedPoints )XAtIndex (i int )float32 {return (*_bfed .Points )[_bfed .IntSlice [i ]].X };type LocationFilter int ;func (_dda *Bitmap )SetDefaultPixel (){for _ecfd :=range _dda .Data {_dda .Data [_ecfd ]=byte (0xff);};};func _fba ()(_facf [256]uint32 ){for _affa :=0;_affa < 256;_affa ++{if _affa &0x01!=0{_facf [_affa ]|=0xf;};if _affa &0x02!=0{_facf [_affa ]|=0xf0;};if _affa &0x04!=0{_facf [_affa ]|=0xf00;};if _affa &0x08!=0{_facf [_affa ]|=0xf000;};if _affa &0x10!=0{_facf [_affa ]|=0xf0000;};if _affa &0x20!=0{_facf [_affa ]|=0xf00000;};if _affa &0x40!=0{_facf [_affa ]|=0xf000000;};if _affa &0x80!=0{_facf [_affa ]|=0xf0000000;};};return _facf ;};func _bdg (_aege *Bitmap ,_bgd ...int )(_aebf *Bitmap ,_edc error ){const _ead ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _aege ==nil {return nil ,_b .Error (_ead ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_bgd )==0||len (_bgd )> 4{return nil ,_b .Error (_ead ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _bgd [0]<=0{_cf .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_aebf ,_edc =_fffd (nil ,_aege );if _edc !=nil {return nil ,_b .Wrap (_edc ,_ead ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _aebf ,nil ;};_ebc :=_gfgc ();_aebf =_aege ;for _ga ,_gad :=range _bgd {if _gad <=0{break ;};_aebf ,_edc =_def (_aebf ,_gad ,_ebc );if _edc !=nil {return nil ,_b .Wrapf (_edc ,_ead ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ga );};};return _aebf ,nil ;};func (_abgge *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bbcfc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _abgge ==nil {return nil ,_b .Error (_bbcfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_abgge .Values )-1{return nil ,_b .Errorf (_bbcfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _abgge .Values [i ],nil ;};func (_abcc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dfed *Boxes ,_bdc error ){const _bbf ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _abcc ==nil {return nil ,_b .Error (_bbf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_abcc )==0{return _abcc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_bbf ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_b .Errorf (_bbf ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_bfeg :=_abcc .makeSizeIndicator (width ,height ,tp ,relation );_edgdd ,_bdc :=_abcc .selectWithIndicator (_bfeg );if _bdc !=nil {return nil ,_b .Wrap (_bdc ,_bbf ,"");};return _edgdd ,nil ;};func _aeab (_effd ,_fbbg *Bitmap ,_gbgb *Selection )(*Bitmap ,error ){const _ccbe ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _ebdf ,_agdg int ;if _fbbg ==nil {return nil ,_b .Error (_ccbe ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gbgb ==nil {return nil ,_b .Error (_ccbe ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_ebdf =_gbgb .Width ;_agdg =_gbgb .Height ;if _ebdf ==0||_agdg ==0{return nil ,_b .Error (_ccbe ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _effd ==nil {return _fbbg .createTemplate (),nil ;};if _fegf :=_effd .resizeImageData (_fbbg );_fegf !=nil {return nil ,_fegf ;};return _effd ,nil ;};func (_bfead *Boxes )selectWithIndicator (_eggf *_fa .NumSlice )(_aaag *Boxes ,_bbff error ){const _fde ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bfead ==nil {return nil ,_b .Error (_fde ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _eggf ==nil {return nil ,_b .Error (_fde ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_eggf )!=len (*_bfead ){return nil ,_b .Error (_fde ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _decg ,_gff int ;for _eeg :=0;_eeg < len (*_eggf );_eeg ++{if _decg ,_bbff =_eggf .GetInt (_eeg );_bbff !=nil {return nil ,_b .Wrap (_bbff ,_fde ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _decg ==1{_gff ++;};};if _gff ==len (*_bfead ){return _bfead ,nil ;};_fgfb :=Boxes {};for _gfdf :=0;_gfdf < len (*_eggf );_gfdf ++{_decg =int ((*_eggf )[_gfdf ]);if _decg ==0{continue ;};_fgfb =append (_fgfb ,(*_bfead )[_gfdf ]);};_aaag =&_fgfb ;return _aaag ,nil ;};func (_cbcd *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _dgccc ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_cbcd .Values )==0{return nil ,_b .Error (_dgccc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cdff :=&BitmapsArray {};_cbcd .SortByWidth ();_fdaf :=-1;_cagg :=-1;for _abdeg :=0;_abdeg < len (_cbcd .Values );_abdeg ++{_fefc :=_cbcd .Values [_abdeg ].Width ;if _fefc > _fdaf {_fdaf =_fefc ;_cagg ++;_cdff .Values =append (_cdff .Values ,&Bitmaps {});};_cdff .Values [_cagg ].AddBitmap (_cbcd .Values [_abdeg ]);};return _cdff ,nil ;};func ClipBoxToRectangle (box *_fc .Rectangle ,wi ,hi int )(_fffb *_fc .Rectangle ,_ddcgb error ){const _fbea ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_b .Error (_fbea ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_b .Error (_fbea ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_fffb =&(*box );if _fffb .Min .X < 0{_fffb .Max .X +=_fffb .Min .X ;_fffb .Min .X =0;};if _fffb .Min .Y < 0{_fffb .Max .Y +=_fffb .Min .Y ;_fffb .Min .Y =0;};if _fffb .Max .X > wi {_fffb .Max .X =wi ;};if _fffb .Max .Y > hi {_fffb .Max .Y =hi ;};return _fffb ,nil ;};func (_dca *Bitmap )ClipRectangle (box *_fc .Rectangle )(_gbbd *Bitmap ,_feec *_fc .Rectangle ,_fcg error ){const _dge ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_b .Error (_dge ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_fecf ,_aebfd :=_dca .Width ,_dca .Height ;_cggc :=_fc .Rect (0,0,_fecf ,_aebfd );if !box .Overlaps (_cggc ){return nil ,nil ,_b .Error (_dge ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_edgf :=box .Intersect (_cggc );_aaee ,_ffgg :=_edgf .Min .X ,_edgf .Min .Y ;_egf ,_gac :=_edgf .Dx (),_edgf .Dy ();_gbbd =New (_egf ,_gac );_gbbd .Text =_dca .Text ;if _fcg =_gbbd .RasterOperation (0,0,_egf ,_gac ,PixSrc ,_dca ,_aaee ,_ffgg );_fcg !=nil {return nil ,nil ,_b .Wrap (_fcg ,_dge ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_feec =&_edgf ;return _gbbd ,_feec ,nil ;};type byHeight Bitmaps ;type Color int ;func (_edb *Bitmap )GetBitOffset (x int )int {return x &0x07};func _ggeg (_gebe ,_edd int )int {if _gebe < _edd {return _gebe ;};return _edd ;};func TstVSymbol (t *_f .T ,scale ...int )*Bitmap {_ffbee ,_eefc :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_bb .NoError (t ,_eefc );return TstGetScaledSymbol (t ,_ffbee ,scale ...);};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _dcfb (oldByte ,newByte ,op );};var (_badb *Bitmap ;_gbfba *Bitmap ;);func TstDSymbol (t *_f .T ,scale ...int )*Bitmap {_ggefbd ,_cdcf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_bb .NoError (t ,_cdcf );return TstGetScaledSymbol (t ,_ggefbd ,scale ...);};type BoundaryCondition int ;func (_fdc *Bitmap )ToImage ()_fc .Image {_efcg ,_gdf :=_cc .NewImage (_fdc .Width ,_fdc .Height ,1,1,_fdc .Data ,nil ,nil );if _gdf !=nil {_cf .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gdf );};return _efcg ;};func _acbg (_fafg ...MorphProcess )(_bcca error ){const _dcfa ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _fbbga ,_aeabe int ;for _ddafa ,_gbbgg :=range _fafg {if _bcca =_gbbgg .verify (_ddafa ,&_fbbga ,&_aeabe );_bcca !=nil {return _b .Wrap (_bcca ,_dcfa ,"");};};if _aeabe !=0&&_fbbga !=0{return _b .Error (_dcfa ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func _cb (_gda ,_a *Bitmap )(_ec error ){const _ba ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ad :=_a .RowStride ;_gc :=_gda .RowStride ;var (_af byte ;_aa uint16 ;_bbb ,_gf ,_aae ,_aac ,_bd int ;);for _aae =0;_aae < _a .Height ;_aae ++{_bbb =_aae *_ad ;_gf =2*_aae *_gc ;for _aac =0;_aac < _ad ;_aac ++{_af =_a .Data [_bbb +_aac ];_aa =_effb [_af ];_bd =_gf +_aac *2;if _gda .RowStride !=_a .RowStride *2&&(_aac +1)*2> _gda .RowStride {_ec =_gda .SetByte (_bd ,byte (_aa >>8));}else {_ec =_gda .setTwoBytes (_bd ,_aa );};if _ec !=nil {return _b .Wrap (_ec ,_ba ,"");};};for _aac =0;_aac < _gc ;_aac ++{_bd =_gf +_gc +_aac ;_af =_gda .Data [_gf +_aac ];if _ec =_gda .SetByte (_bd ,_af );_ec !=nil {return _b .Wrapf (_ec ,_ba ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_gf +_aac ,_gf +_gc +_aac );};};};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _eaec (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _gdddg ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_b .Error (_gdddg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_b .Error (_gdddg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_b .Error (_gdddg ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_b .Error (_gdddg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_b .Error (_gdddg ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_cfde ,_befe :=bm1 .Width ,bm1 .Height ;_gcc ,_fbba :=bm2 .Width ,bm2 .Height ;if _fa .Abs (_cfde -_gcc )> maxDiffW {return false ,nil ;};if _fa .Abs (_befe -_fbba )> maxDiffH {return false ,nil ;};_agfg :=int (delX +_fa .Sign (delX )*0.5);_fgfg :=int (delY +_fa .Sign (delY )*0.5);_gab :=int (_gd .Ceil (_gd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fefee :=bm2 .RowStride ;_cfcgf :=_gdg (_fgfg ,0);_caee :=_ggeg (_fbba +_fgfg ,_befe );_ecfe :=bm1 .RowStride *_cfcgf ;_bce :=bm2 .RowStride *(_cfcgf -_fgfg );var _aded int ;if _caee <=_befe {_aded =downcount [_caee -1];};_ccfb :=_gdg (_agfg ,0);_gfdc :=_ggeg (_gcc +_agfg ,_cfde );var _cegg ,_fedf int ;if _agfg >=8{_cegg =_agfg >>3;_ecfe +=_cegg ;_ccfb -=_cegg <<3;_gfdc -=_cegg <<3;_agfg &=7;}else if _agfg <=-8{_fedf =-((_agfg +7)>>3);_bce +=_fedf ;_fefee -=_fedf ;_agfg +=_fedf <<3;};var (_gdac ,_aeeb ,_ggega int ;_bdfe ,_cgdg ,_dbacgg byte ;);if _ccfb >=_gfdc ||_cfcgf >=_caee {return false ,nil ;};_adf :=(_gfdc +7)>>3;switch {case _agfg ==0:for _aeeb =_cfcgf ;_aeeb < _caee ;_aeeb ,_ecfe ,_bce =_aeeb +1,_ecfe +bm1 .RowStride ,_bce +bm2 .RowStride {for _ggega =0;_ggega < _adf ;_ggega ++{_bdfe =bm1 .Data [_ecfe +_ggega ]&bm2 .Data [_bce +_ggega ];_gdac +=tab [_bdfe ];};if _gdac >=_gab {return true ,nil ;};if _gbfee :=_gdac +downcount [_aeeb ]-_aded ;_gbfee < _gab {return false ,nil ;};};case _agfg > 0&&_fefee < _adf :for _aeeb =_cfcgf ;_aeeb < _caee ;_aeeb ,_ecfe ,_bce =_aeeb +1,_ecfe +bm1 .RowStride ,_bce +bm2 .RowStride {_cgdg =bm1 .Data [_ecfe ];_dbacgg =bm2 .Data [_bce ]>>uint (_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];for _ggega =1;_ggega < _fefee ;_ggega ++{_cgdg =bm1 .Data [_ecfe +_ggega ];_dbacgg =bm2 .Data [_bce +_ggega ]>>uint (_agfg )|bm2 .Data [_bce +_ggega -1]<<uint (8-_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];};_cgdg =bm1 .Data [_ecfe +_ggega ];_dbacgg =bm2 .Data [_bce +_ggega -1]<<uint (8-_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];if _gdac >=_gab {return true ,nil ;}else if _gdac +downcount [_aeeb ]-_aded < _gab {return false ,nil ;};};case _agfg > 0&&_fefee >=_adf :for _aeeb =_cfcgf ;_aeeb < _caee ;_aeeb ,_ecfe ,_bce =_aeeb +1,_ecfe +bm1 .RowStride ,_bce +bm2 .RowStride {_cgdg =bm1 .Data [_ecfe ];_dbacgg =bm2 .Data [_bce ]>>uint (_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];for _ggega =1;_ggega < _adf ;_ggega ++{_cgdg =bm1 .Data [_ecfe +_ggega ];_dbacgg =bm2 .Data [_bce +_ggega ]>>uint (_agfg );_dbacgg |=bm2 .Data [_bce +_ggega -1]<<uint (8-_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];};if _gdac >=_gab {return true ,nil ;}else if _gdac +downcount [_aeeb ]-_aded < _gab {return false ,nil ;};};case _adf < _fefee :for _aeeb =_cfcgf ;_aeeb < _caee ;_aeeb ,_ecfe ,_bce =_aeeb +1,_ecfe +bm1 .RowStride ,_bce +bm2 .RowStride {for _ggega =0;_ggega < _adf ;_ggega ++{_cgdg =bm1 .Data [_ecfe +_ggega ];_dbacgg =bm2 .Data [_bce +_ggega ]<<uint (-_agfg );_dbacgg |=bm2 .Data [_bce +_ggega +1]>>uint (8+_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];};if _gdac >=_gab {return true ,nil ;}else if _bcf :=_gdac +downcount [_aeeb ]-_aded ;_bcf < _gab {return false ,nil ;};};case _fefee >=_adf :for _aeeb =_cfcgf ;_aeeb < _caee ;_aeeb ,_ecfe ,_bce =_aeeb +1,_ecfe +bm1 .RowStride ,_bce +bm2 .RowStride {for _ggega =0;_ggega < _adf ;_ggega ++{_cgdg =bm1 .Data [_ecfe +_ggega ];_dbacgg =bm2 .Data [_bce +_ggega ]<<uint (-_agfg );_dbacgg |=bm2 .Data [_bce +_ggega +1]>>uint (8+_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];};_cgdg =bm1 .Data [_ecfe +_ggega ];_dbacgg =bm2 .Data [_bce +_ggega ]<<uint (-_agfg );_bdfe =_cgdg &_dbacgg ;_gdac +=tab [_bdfe ];if _gdac >=_gab {return true ,nil ;}else if _gdac +downcount [_aeeb ]-_aded < _gab {return false ,nil ;};};};_cffbc :=float32 (_gdac )*float32 (_gdac )/(float32 (area1 )*float32 (area2 ));if _cffbc >=scoreThreshold {_cf .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_gdac ,_gab ,_cffbc ,scoreThreshold );};return false ,nil ;};func (_eedg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _cbgg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_eedg .IntSlice .Size (){return 0,_b .Errorf (_cbgg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_eedg .XAtIndex (i )),nil ;};func TstWordBitmap (t *_f .T ,scale ...int )*Bitmap {_adeb :=1;if len (scale )> 0{_adeb =scale [0];};_adfd :=3;_ggbg :=9+7+15+2*_adfd ;_dfcg :=5+_adfd +5;_bgfe :=New (_ggbg *_adeb ,_dfcg *_adeb );_ageg :=&Bitmaps {};var _ggab *int ;_adfd *=_adeb ;_cbbe :=0;_ggab =&_cbbe ;_facef :=0;_cefb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,_adfd );_cefb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,_adfd );_cefb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,0);*_ggab =0;_facef =5*_adeb +_adfd ;_cefb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,_adfd );_cefb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,1*_adeb );_cefb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ageg ,_cefb ,_ggab ,_facef ,0);TstWriteSymbols (t ,_ageg ,_bgfe );return _bgfe ;};func (_addcg *Bitmap )setAll ()error {_affb :=_eaec (_addcg ,0,0,_addcg .Width ,_addcg .Height ,PixSet ,nil ,0,0);if _affb !=nil {return _b .Wrap (_affb ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_efcc Points )Get (i int )(Point ,error ){if i > len (_efcc )-1{return Point {},_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _efcc [i ],nil ;};func (_beae *ClassedPoints )validateIntSlice ()error {const _fcgb ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_gfgcd :=range _beae .IntSlice {if _gfgcd >=(_beae .Points .Size ()){return _b .Errorf (_fcgb ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_gfgcd ,_beae .Points .Size ());};};return nil ;};func _dcfb (_ddba ,_fdda byte ,_febd CombinationOperator )byte {switch _febd {case CmbOpOr :return _fdda |_ddba ;case CmbOpAnd :return _fdda &_ddba ;case CmbOpXor :return _fdda ^_ddba ;case CmbOpXNor :return ^(_fdda ^_ddba );case CmbOpNot :return ^(_fdda );default:return _fdda ;};};func (_bgcc *Bitmaps )GetBox (i int )(*_fc .Rectangle ,error ){const _cfgfb ="\u0047\u0065\u0074\u0042\u006f\u0078";if _bgcc ==nil {return nil ,_b .Error (_cfgfb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_bgcc .Boxes )-1{return nil ,_b .Errorf (_cfgfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bgcc .Boxes [i ],nil ;};func TstGetScaledSymbol (t *_f .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_abca ,_gfac :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_bb .NoError (t ,_gfac );return _abca ;};func (_aea *Bitmap )clipRectangle (_eada ,_fdca *_fc .Rectangle )(_gddd *Bitmap ,_fag error ){const _egd ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _eada ==nil {return nil ,_b .Error (_egd ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_faed ,_dddc :=_aea .Width ,_aea .Height ;_cge ,_fag :=ClipBoxToRectangle (_eada ,_faed ,_dddc );if _fag !=nil {_cf .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_fag );return nil ,nil ;};_dddcg ,_efb :=_cge .Min .X ,_cge .Min .Y ;_abff ,_aedb :=_cge .Max .X -_cge .Min .X ,_cge .Max .Y -_cge .Min .Y ;_gddd =New (_abff ,_aedb );_gddd .Text =_aea .Text ;if _fag =_gddd .RasterOperation (0,0,_abff ,_aedb ,PixSrc ,_aea ,_dddcg ,_efb );_fag !=nil {return nil ,_b .Wrap (_fag ,_egd ,"");};if _fdca !=nil {*_fdca =*_cge ;};return _gddd ,nil ;};func _ggg (_bfcd ,_ecfcb *Bitmap ,_cfge ,_gdfd ,_ffad ,_adc ,_gcb ,_gcg ,_ccfg ,_fbdf int ,_badf CombinationOperator ,_fbaa int )error {var _bfb int ;_gbfe :=func (){_bfb ++;_ffad +=_ecfcb .RowStride ;_adc +=_bfcd .RowStride ;_gcb +=_bfcd .RowStride };for _bfb =_cfge ;_bfb < _gdfd ;_gbfe (){var _caf uint16 ;_bdfb :=_ffad ;for _egcg :=_adc ;_egcg <=_gcb ;_egcg ++{_edgb ,_eaa :=_ecfcb .GetByte (_bdfb );if _eaa !=nil {return _eaa ;};_gceg ,_eaa :=_bfcd .GetByte (_egcg );if _eaa !=nil {return _eaa ;};_caf =(_caf |(uint16 (_gceg )&0xff))<<uint (_fbdf );_gceg =byte (_caf >>8);if _eaa =_ecfcb .SetByte (_bdfb ,_dcfb (_edgb ,_gceg ,_badf ));_eaa !=nil {return _eaa ;};_bdfb ++;_caf <<=uint (_ccfg );if _egcg ==_gcb {_gceg =byte (_caf >>(8-uint8 (_fbdf )));if _fbaa !=0{_gceg =_bccf (uint (8+_gcg ),_gceg );};_edgb ,_eaa =_ecfcb .GetByte (_bdfb );if _eaa !=nil {return _eaa ;};if _eaa =_ecfcb .SetByte (_bdfb ,_dcfb (_edgb ,_gceg ,_badf ));_eaa !=nil {return _eaa ;};};};};return nil ;};type Component int ;type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};var _ccbeg =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func (_eagd *Boxes )Add (box *_fc .Rectangle )error {if _eagd ==nil {return _b .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_eagd =append (*_eagd ,box );return nil ;};func TstOSymbol (t *_f .T ,scale ...int )*Bitmap {_bagb ,_aceb :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_bb .NoError (t ,_aceb );return TstGetScaledSymbol (t ,_bagb ,scale ...);};func _ggge (_eeb *Bitmap ,_bfccb ,_abaa ,_cada ,_bdfa int ,_ebbf RasterOperator ,_dfec *Bitmap ,_dfgg ,_caab int )error {var (_fddg bool ;_acae bool ;_caaf byte ;_cgdaf int ;_dbfg int ;_fccb int ;_fcfd int ;_cacab bool ;_acege int ;_deeec int ;_bdef int ;_bdgg bool ;_fffe byte ;_gdgac int ;_fcbg int ;_gcdb int ;_fccc byte ;_aadad int ;_ddgb int ;_gabdb uint ;_dafa uint ;_cdda byte ;_gafe shift ;_dfae bool ;_gadb bool ;_gegg ,_egebg int ;);if _dfgg &7!=0{_ddgb =8-(_dfgg &7);};if _bfccb &7!=0{_dbfg =8-(_bfccb &7);};if _ddgb ==0&&_dbfg ==0{_cdda =_cgafg [0];}else {if _dbfg > _ddgb {_gabdb =uint (_dbfg -_ddgb );}else {_gabdb =uint (8-(_ddgb -_dbfg ));};_dafa =8-_gabdb ;_cdda =_cgafg [_gabdb ];};if (_bfccb &7)!=0{_fddg =true ;_cgdaf =8-(_bfccb &7);_caaf =_cgafg [_cgdaf ];_fccb =_eeb .RowStride *_abaa +(_bfccb >>3);_fcfd =_dfec .RowStride *_caab +(_dfgg >>3);_aadad =8-(_dfgg &7);if _cgdaf > _aadad {_gafe =_fegce ;if _cada >=_ddgb {_dfae =true ;};}else {_gafe =_aebfe ;};};if _cada < _cgdaf {_acae =true ;_caaf &=_aaaab [8-_cgdaf +_cada ];};if !_acae {_acege =(_cada -_cgdaf )>>3;if _acege !=0{_cacab =true ;_deeec =_eeb .RowStride *_abaa +((_bfccb +_dbfg )>>3);_bdef =_dfec .RowStride *_caab +((_dfgg +_dbfg )>>3);};};_gdgac =(_bfccb +_cada )&7;if !(_acae ||_gdgac ==0){_bdgg =true ;_fffe =_aaaab [_gdgac ];_fcbg =_eeb .RowStride *_abaa +((_bfccb +_dbfg )>>3)+_acege ;_gcdb =_dfec .RowStride *_caab +((_dfgg +_dbfg )>>3)+_acege ;if _gdgac > int (_dafa ){_gadb =true ;};};switch _ebbf {case PixSrc :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],_fccc ,_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],_fccc ,_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixNotSrc :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],^_fccc ,_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=^_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],^_fccc ,_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixSrcOrDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],_fccc |_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]|=_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],_fccc |_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixSrcAndDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],_fccc &_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]&=_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],_fccc &_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixSrcXorDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],_fccc ^_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]^=_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],_fccc ^_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixNotSrcOrDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],^_fccc |_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]|=^_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],^_fccc |_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixNotSrcAndDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],^_fccc &_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]&=^_fccc ;};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],^_fccc &_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixSrcOrNotDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],_fccc |^_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=_fccc |^_eeb .Data [_deeec +_egebg ];};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],_fccc |^_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixSrcAndNotDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],_fccc &^_eeb .Data [_fccb ],_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=_fccc &^_eeb .Data [_deeec +_egebg ];};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],_fccc &^_eeb .Data [_fcbg ],_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixNotPixSrcOrDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],^(_fccc |_eeb .Data [_fccb ]),_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=^(_fccc |_eeb .Data [_deeec +_egebg ]);};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],^(_fccc |_eeb .Data [_fcbg ]),_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixNotPixSrcAndDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],^(_fccc &_eeb .Data [_fccb ]),_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=^(_fccc &_eeb .Data [_deeec +_egebg ]);};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],^(_fccc &_eeb .Data [_fcbg ]),_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};case PixNotPixSrcXorDst :if _fddg {for _gegg =0;_gegg < _bdfa ;_gegg ++{if _gafe ==_fegce {_fccc =_dfec .Data [_fcfd ]<<_gabdb ;if _dfae {_fccc =_ffeab (_fccc ,_dfec .Data [_fcfd +1]>>_dafa ,_cdda );};}else {_fccc =_dfec .Data [_fcfd ]>>_dafa ;};_eeb .Data [_fccb ]=_ffeab (_eeb .Data [_fccb ],^(_fccc ^_eeb .Data [_fccb ]),_caaf );_fccb +=_eeb .RowStride ;_fcfd +=_dfec .RowStride ;};};if _cacab {for _gegg =0;_gegg < _bdfa ;_gegg ++{for _egebg =0;_egebg < _acege ;_egebg ++{_fccc =_ffeab (_dfec .Data [_bdef +_egebg ]<<_gabdb ,_dfec .Data [_bdef +_egebg +1]>>_dafa ,_cdda );_eeb .Data [_deeec +_egebg ]=^(_fccc ^_eeb .Data [_deeec +_egebg ]);};_deeec +=_eeb .RowStride ;_bdef +=_dfec .RowStride ;};};if _bdgg {for _gegg =0;_gegg < _bdfa ;_gegg ++{_fccc =_dfec .Data [_gcdb ]<<_gabdb ;if _gadb {_fccc =_ffeab (_fccc ,_dfec .Data [_gcdb +1]>>_dafa ,_cdda );};_eeb .Data [_fcbg ]=_ffeab (_eeb .Data [_fcbg ],^(_fccc ^_eeb .Data [_fcbg ]),_fffe );_fcbg +=_eeb .RowStride ;_gcdb +=_dfec .RowStride ;};};default:_cf .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ebbf );return _b .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func (_fbee *Boxes )makeSizeIndicator (_aaba ,_fbec int ,_bcbe LocationFilter ,_dcf SizeComparison )*_fa .NumSlice {_fecg :=&_fa .NumSlice {};var _aecc ,_fbed ,_bdgef int ;for _ ,_cbda :=range *_fbee {_aecc =0;_fbed ,_bdgef =_cbda .Dx (),_cbda .Dy ();switch _bcbe {case LocSelectWidth :if (_dcf ==SizeSelectIfLT &&_fbed < _aaba )||(_dcf ==SizeSelectIfGT &&_fbed > _aaba )||(_dcf ==SizeSelectIfLTE &&_fbed <=_aaba )||(_dcf ==SizeSelectIfGTE &&_fbed >=_aaba ){_aecc =1;};case LocSelectHeight :if (_dcf ==SizeSelectIfLT &&_bdgef < _fbec )||(_dcf ==SizeSelectIfGT &&_bdgef > _fbec )||(_dcf ==SizeSelectIfLTE &&_bdgef <=_fbec )||(_dcf ==SizeSelectIfGTE &&_bdgef >=_fbec ){_aecc =1;};case LocSelectIfEither :if (_dcf ==SizeSelectIfLT &&(_bdgef < _fbec ||_fbed < _aaba ))||(_dcf ==SizeSelectIfGT &&(_bdgef > _fbec ||_fbed > _aaba ))||(_dcf ==SizeSelectIfLTE &&(_bdgef <=_fbec ||_fbed <=_aaba ))||(_dcf ==SizeSelectIfGTE &&(_bdgef >=_fbec ||_fbed >=_aaba )){_aecc =1;};case LocSelectIfBoth :if (_dcf ==SizeSelectIfLT &&(_bdgef < _fbec &&_fbed < _aaba ))||(_dcf ==SizeSelectIfGT &&(_bdgef > _fbec &&_fbed > _aaba ))||(_dcf ==SizeSelectIfLTE &&(_bdgef <=_fbec &&_fbed <=_aaba ))||(_dcf ==SizeSelectIfGTE &&(_bdgef >=_fbec &&_fbed >=_aaba )){_aecc =1;};};_fecg .AddInt (_aecc );};return _fecg ;};func _ce (_cce *Bitmap ,_ff ,_dba int )(*Bitmap ,error ){const _bea ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _cce ==nil {return nil ,_b .Error (_bea ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ff <=0||_dba <=0{return nil ,_b .Error (_bea ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _ff ==_dba {if _ff ==1{_dd ,_dcg :=_fffd (nil ,_cce );if _dcg !=nil {return nil ,_b .Wrap (_dcg ,_bea ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _dd ,nil ;};if _ff ==2||_ff ==4||_ff ==8{_adg ,_ddd :=_cd (_cce ,_ff );if _ddd !=nil {return nil ,_b .Wrap (_ddd ,_bea ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _adg ,nil ;};};_fbg :=_ff *_cce .Width ;_gfg :=_dba *_cce .Height ;_aff :=New (_fbg ,_gfg );_df :=_aff .RowStride ;var (_ef ,_dbdg ,_cfd ,_efa ,_cg int ;_bdd byte ;_ecg error ;);for _dbdg =0;_dbdg < _cce .Height ;_dbdg ++{_ef =_dba *_dbdg *_df ;for _cfd =0;_cfd < _cce .Width ;_cfd ++{if _cgg :=_cce .GetPixel (_cfd ,_dbdg );_cgg {_cg =_ff *_cfd ;for _efa =0;_efa < _ff ;_efa ++{_aff .setBit (_ef *8+_cg +_efa );};};};for _efa =1;_efa < _dba ;_efa ++{_ffd :=_ef +_efa *_df ;for _ffg :=0;_ffg < _df ;_ffg ++{if _bdd ,_ecg =_aff .GetByte (_ef +_ffg );_ecg !=nil {return nil ,_b .Wrapf (_ecg ,_bea ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_efa );};if _ecg =_aff .SetByte (_ffd +_ffg ,_bdd );_ecg !=nil {return nil ,_b .Wrap (_ecg ,_bea ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _aff ,nil ;};func (_dgccf *BitmapsArray )AddBox (box *_fc .Rectangle ){_dgccf .Boxes =append (_dgccf .Boxes ,box )};func init (){const _eege ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_badb =New (50,40);var _egcb error ;_badb ,_egcb =_badb .AddBorder (2,1);if _egcb !=nil {panic (_b .Wrap (_egcb ,_eege ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_gbfba ,_egcb =NewWithData (50,22,_ccbeg );if _egcb !=nil {panic (_b .Wrap (_egcb ,_eege ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_egee *Bitmap )removeBorderGeneral (_ecbg ,_fccd ,_gdb ,_fdd int )(*Bitmap ,error ){const _cdcd ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ecbg < 0||_fccd < 0||_gdb < 0||_fdd < 0{return nil ,_b .Error (_cdcd ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_aeaa ,_cab :=_egee .Width ,_egee .Height ;_fed :=_aeaa -_ecbg -_fccd ;_bab :=_cab -_gdb -_fdd ;if _fed <=0{return nil ,_b .Errorf (_cdcd ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fed );};if _bab <=0{return nil ,_b .Errorf (_cdcd ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_bab );};_bdgf :=New (_fed ,_bab );_bdgf .Color =_egee .Color ;_dbae :=_bdgf .RasterOperation (0,0,_fed ,_bab ,PixSrc ,_egee ,_ecbg ,_gdb );if _dbae !=nil {return nil ,_b .Wrap (_dbae ,_cdcd ,"");};return _bdgf ,nil ;};func _aed ()(_ebe [256]uint64 ){for _aeg :=0;_aeg < 256;_aeg ++{if _aeg &0x01!=0{_ebe [_aeg ]|=0xff;};if _aeg &0x02!=0{_ebe [_aeg ]|=0xff00;};if _aeg &0x04!=0{_ebe [_aeg ]|=0xff0000;};if _aeg &0x08!=0{_ebe [_aeg ]|=0xff000000;};if _aeg &0x10!=0{_ebe [_aeg ]|=0xff00000000;};if _aeg &0x20!=0{_ebe [_aeg ]|=0xff0000000000;};if _aeg &0x40!=0{_ebe [_aeg ]|=0xff000000000000;};if _aeg &0x80!=0{_ebe [_aeg ]|=0xff00000000000000;};};return _ebe ;};func MakePixelSumTab8 ()[]int {return _agge ()};func (_fecb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_fecb .Data )-1||index < 0{return 0,_b .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _fecb .Data [index ],nil ;};func _cacdb (_ffdb ,_efgd int ,_fbac string )*Selection {_gggea :=&Selection {Height :_ffdb ,Width :_efgd ,Name :_fbac };_gggea .Data =make ([][]SelectionValue ,_ffdb );for _bage :=0;_bage < _ffdb ;_bage ++{_gggea .Data [_bage ]=make ([]SelectionValue ,_efgd );};return _gggea ;};type shift int ;func (_dgbb *Bitmaps )CountPixels ()*_fa .NumSlice {_bdae :=&_fa .NumSlice {};for _ ,_baebg :=range _dgbb .Values {_bdae .AddInt (_baebg .CountPixels ());};return _bdae ;};func (_cbbc *Bitmaps )makeSizeIndicator (_ccfa ,_cece int ,_dccg LocationFilter ,_gdfdd SizeComparison )(_eddga *_fa .NumSlice ,_fdab error ){const _egfe ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cbbc ==nil {return nil ,_b .Error (_egfe ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _dccg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_egfe ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_dccg );};switch _gdfdd {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_egfe ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_gdfdd );};_eddga =&_fa .NumSlice {};var (_ffgba ,_fcabc ,_accf int ;_gafee *Bitmap ;);for _ ,_gafee =range _cbbc .Values {_ffgba =0;_fcabc ,_accf =_gafee .Width ,_gafee .Height ;switch _dccg {case LocSelectWidth :if (_gdfdd ==SizeSelectIfLT &&_fcabc < _ccfa )||(_gdfdd ==SizeSelectIfGT &&_fcabc > _ccfa )||(_gdfdd ==SizeSelectIfLTE &&_fcabc <=_ccfa )||(_gdfdd ==SizeSelectIfGTE &&_fcabc >=_ccfa )||(_gdfdd ==SizeSelectIfEQ &&_fcabc ==_ccfa ){_ffgba =1;};case LocSelectHeight :if (_gdfdd ==SizeSelectIfLT &&_accf < _cece )||(_gdfdd ==SizeSelectIfGT &&_accf > _cece )||(_gdfdd ==SizeSelectIfLTE &&_accf <=_cece )||(_gdfdd ==SizeSelectIfGTE &&_accf >=_cece )||(_gdfdd ==SizeSelectIfEQ &&_accf ==_cece ){_ffgba =1;};case LocSelectIfEither :if (_gdfdd ==SizeSelectIfLT &&(_fcabc < _ccfa ||_accf < _cece ))||(_gdfdd ==SizeSelectIfGT &&(_fcabc > _ccfa ||_accf > _cece ))||(_gdfdd ==SizeSelectIfLTE &&(_fcabc <=_ccfa ||_accf <=_cece ))||(_gdfdd ==SizeSelectIfGTE &&(_fcabc >=_ccfa ||_accf >=_cece ))||(_gdfdd ==SizeSelectIfEQ &&(_fcabc ==_ccfa ||_accf ==_cece )){_ffgba =1;};case LocSelectIfBoth :if (_gdfdd ==SizeSelectIfLT &&(_fcabc < _ccfa &&_accf < _cece ))||(_gdfdd ==SizeSelectIfGT &&(_fcabc > _ccfa &&_accf > _cece ))||(_gdfdd ==SizeSelectIfLTE &&(_fcabc <=_ccfa &&_accf <=_cece ))||(_gdfdd ==SizeSelectIfGTE &&(_fcabc >=_ccfa &&_accf >=_cece ))||(_gdfdd ==SizeSelectIfEQ &&(_fcabc ==_ccfa &&_accf ==_cece )){_ffgba =1;};};_eddga .AddInt (_ffgba );};return _eddga ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_deeca bool ,_abde error ){const _egca ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_dbf ,_ddg :=p1 .Width ,p1 .Height ;_gbfg ,_aegg :=p3 .Width ,p3 .Height ;if _fa .Abs (_dbf -_gbfg )> maxDiffW {return false ,nil ;};if _fa .Abs (_ddg -_aegg )> maxDiffH {return false ,nil ;};_dgca :=int (float32 (area1 )*(1.0-rank )+0.5);_adbg :=int (float32 (area3 )*(1.0-rank )+0.5);var _face ,_bag int ;if delX >=0{_face =int (delX +0.5);}else {_face =int (delX -0.5);};if delY >=0{_bag =int (delY +0.5);}else {_bag =int (delY -0.5);};_ddgc :=p1 .CreateTemplate ();if _abde =_ddgc .RasterOperation (0,0,_dbf ,_ddg ,PixSrc ,p1 ,0,0);_abde !=nil {return false ,_b .Wrap (_abde ,_egca ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _abde =_ddgc .RasterOperation (_face ,_bag ,_dbf ,_ddg ,PixNotSrcAndDst ,p4 ,0,0);_abde !=nil {return false ,_b .Wrap (_abde ,_egca ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_deeca ,_abde =_ddgc .ThresholdPixelSum (_dgca ,tab8 );if _abde !=nil {return false ,_b .Wrap (_abde ,_egca ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _deeca {return false ,nil ;};if _abde =_ddgc .RasterOperation (_face ,_bag ,_gbfg ,_aegg ,PixSrc ,p3 ,0,0);_abde !=nil {return false ,_b .Wrap (_abde ,_egca ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _abde =_ddgc .RasterOperation (0,0,_gbfg ,_aegg ,PixNotSrcAndDst ,p2 ,0,0);_abde !=nil {return false ,_b .Wrap (_abde ,_egca ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_deeca ,_abde =_ddgc .ThresholdPixelSum (_adbg ,tab8 );if _abde !=nil {return false ,_b .Wrap (_abde ,_egca ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_deeca ,nil ;};func (_fad *Bitmap )inverseData (){if _ada :=_fad .RasterOperation (0,0,_fad .Width ,_fad .Height ,PixNotDst ,nil ,0,0);_ada !=nil {_cf .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ada );};if _fad .Color ==Chocolate {_fad .Color =Vanilla ;}else {_fad .Color =Chocolate ;};};func (_aaed *Bitmap )setBit (_cdfd int ){_aaed .Data [(_cdfd >>3)]|=0x80>>uint (_cdfd &7)};func (_ace *Bitmap )SetPixel (x ,y int ,pixel byte )error {_fge :=_ace .GetByteIndex (x ,y );if _fge > len (_ace .Data )-1{return _b .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_fge );};_ffe :=_ace .GetBitOffset (x );_bfc :=uint (7-_ffe );_bedb :=_ace .Data [_fge ];var _afgb byte ;if pixel ==1{_afgb =_bedb |(pixel &0x01<<_bfc );}else {_afgb =_bedb &^(1<<_bfc );};_ace .Data [_fge ]=_afgb ;return nil ;};func Rect (x ,y ,w ,h int )(*_fc .Rectangle ,error ){const _gdee ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_b .Errorf (_gdee ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_b .Error (_gdee ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_dbacg :=_fc .Rect (x ,y ,x +w ,y +h );return &_dbacg ,nil ;};func _eadae (_ggef ,_gbab *Bitmap ,_egag ,_adce int )(*Bitmap ,error ){const _ebfg ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _gbab ==nil {return nil ,_b .Error (_ebfg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _egag < 1&&_adce < 1{return nil ,_b .Error (_ebfg ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _egag ==1&&_adce ==1{return _gbab .Copy (),nil ;};if _egag ==1||_adce ==1{var _fcab error ;_cccd :=SelCreateBrick (_adce ,_egag ,_adce /2,_egag /2,SelHit );_ggef ,_fcab =_bdfbd (_ggef ,_gbab ,_cccd );if _fcab !=nil {return nil ,_b .Wrap (_fcab ,_ebfg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ggef ,nil ;};_ebb :=SelCreateBrick (1,_egag ,0,_egag /2,SelHit );_adfe :=SelCreateBrick (_adce ,1,_adce /2,0,SelHit );_aaeb ,_febcb :=_fgff (nil ,_gbab ,_ebb );if _febcb !=nil {return nil ,_b .Wrap (_febcb ,_ebfg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_ggef ,_febcb =_fgff (_ggef ,_aaeb ,_adfe );if _febcb !=nil {return nil ,_b .Wrap (_febcb ,_ebfg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_febcb =_cfbe (_aaeb ,_ggef ,_ebb );if _febcb !=nil {return nil ,_b .Wrap (_febcb ,_ebfg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_febcb =_cfbe (_ggef ,_aaeb ,_adfe );if _febcb !=nil {return nil ,_b .Wrap (_febcb ,_ebfg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ggef ,nil ;};type SelectionValue int ;func (_acee *Bitmap )setTwoBytes (_cecc int ,_cca uint16 )error {if _cecc +1> len (_acee .Data )-1{return _b .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cecc );};_acee .Data [_cecc ]=byte ((_cca &0xff00)>>8);_acee .Data [_cecc +1]=byte (_cca &0xff);return nil ;};func _aabe (_cfdg *Bitmap )(_efea *Bitmap ,_gddfa int ,_efacd error ){const _fbef ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _cfdg ==nil {return nil ,0,_b .Errorf (_fbef ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _fcag ,_cbgd *Bitmap ;if _fcag ,_efacd =_fffd (nil ,_cfdg );_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_gdeg [13]int ;_cfbf ,_dgddf int ;);_bbg :=12;_gcf :=_fa .NewNumSlice (_bbg +1);_degb :=_fa .NewNumSlice (_bbg +1);var _afbfb *Boxes ;for _baaa :=0;_baaa <=_bbg ;_baaa ++{if _baaa ==0{if _cbgd ,_efacd =_fffd (nil ,_fcag );_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _cbgd ,_efacd =_ecfa (_fcag ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _afbfb ,_efacd =_cbgd .connComponentsBB (4);_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"");};_gdeg [_baaa ]=len (*_afbfb );_gcf .AddInt (_gdeg [_baaa ]);switch _baaa {case 0:_cfbf =_gdeg [0];default:_dgddf =_gdeg [_baaa -1]-_gdeg [_baaa ];_degb .AddInt (_dgddf );};_fcag =_cbgd ;};_gbd :=true ;_ggbd :=2;var _gcada ,_gbdd int ;for _aafca :=1;_aafca < len (*_degb );_aafca ++{if _gcada ,_efacd =_gcf .GetInt (_aafca );_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _gbd &&_gcada < int (0.3*float32 (_cfbf )){_ggbd =_aafca +1;_gbd =false ;};if _dgddf ,_efacd =_degb .GetInt (_aafca );_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _dgddf > _gbdd {_gbdd =_dgddf ;};};_daeg :=_cfdg .XResolution ;if _daeg ==0{_daeg =150;};if _daeg > 110{_ggbd ++;};if _ggbd < 2{_cf .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_ggbd =2;};_gddfa =_ggbd +1;if _efea ,_efacd =_dbab (nil ,_cfdg ,_ggbd +1,1);_efacd !=nil {return nil ,0,_b .Wrap (_efacd ,_fbef ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _efea ,_gddfa ,nil ;};func _abdbg (_gfdg ,_abg *Bitmap ,_agcdd ,_cbfc int )(_ggcd error ){const _ggcgb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_acacc ,_ecbb ,_gfeb ,_eega int ;_dbdb ,_cgac ,_aaff ,_abb ,_eadg ,_dfede ,_bgb byte ;);for _acacc =0;_acacc < _agcdd ;_acacc ++{_gfeb =_acacc *_gfdg .RowStride ;_eega =_acacc *_abg .RowStride ;for _ecbb =0;_ecbb < _cbfc ;_ecbb ++{_dbdb ,_ggcd =_gfdg .GetByte (_gfeb +_ecbb );if _ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_cgac ,_ggcd =_abg .GetByte (_eega +_ecbb );if _ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _acacc > 0{_aaff ,_ggcd =_gfdg .GetByte (_gfeb -_gfdg .RowStride +_ecbb );if _ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0069\u0020\u003e \u0030");};_dbdb |=_aaff ;};if _ecbb > 0{_abb ,_ggcd =_gfdg .GetByte (_gfeb +_ecbb -1);if _ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u006a\u0020\u003e \u0030");};_dbdb |=_abb <<7;};_dbdb &=_cgac ;if _dbdb ==0||(^_dbdb )==0{if _ggcd =_gfdg .SetByte (_gfeb +_ecbb ,_dbdb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_bgb =_dbdb ;_dbdb =(_dbdb |(_dbdb >>1)|(_dbdb <<1))&_cgac ;if (_dbdb ^_bgb )==0{if _ggcd =_gfdg .SetByte (_gfeb +_ecbb ,_dbdb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _acacc =_agcdd -1;_acacc >=0;_acacc --{_gfeb =_acacc *_gfdg .RowStride ;_eega =_acacc *_abg .RowStride ;for _ecbb =_cbfc -1;_ecbb >=0;_ecbb --{if _dbdb ,_ggcd =_gfdg .GetByte (_gfeb +_ecbb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _cgac ,_ggcd =_abg .GetByte (_eega +_ecbb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _acacc < _agcdd -1{if _eadg ,_ggcd =_gfdg .GetByte (_gfeb +_gfdg .RowStride +_ecbb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_dbdb |=_eadg ;};if _ecbb < _cbfc -1{if _dfede ,_ggcd =_gfdg .GetByte (_gfeb +_ecbb +1);_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_dbdb |=_dfede >>7;};_dbdb &=_cgac ;if _dbdb ==0||(^_dbdb )==0{if _ggcd =_gfdg .SetByte (_gfeb +_ecbb ,_dbdb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_bgb =_dbdb ;_dbdb =(_dbdb |(_dbdb >>1)|(_dbdb <<1))&_cgac ;if (_dbdb ^_bgb )==0{if _ggcd =_gfdg .SetByte (_gfeb +_ecbb ,_dbdb );_ggcd !=nil {return _b .Wrap (_ggcd ,_ggcgb ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func _ecfc (_gada ,_gadf ,_fegag *Bitmap )(*Bitmap ,error ){const _ffgc ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _gadf ==nil {return nil ,_b .Error (_ffgc ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fegag ==nil {return nil ,_b .Error (_ffgc ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _eea error ;switch {case _gada ==_gadf :if _eea =_gada .RasterOperation (0,0,_gadf .Width ,_gadf .Height ,PixNotSrcAndDst ,_fegag ,0,0);_eea !=nil {return nil ,_b .Wrap (_eea ,_ffgc ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gada ==_fegag :if _eea =_gada .RasterOperation (0,0,_gadf .Width ,_gadf .Height ,PixNotSrcAndDst ,_gadf ,0,0);_eea !=nil {return nil ,_b .Wrap (_eea ,_ffgc ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_gada ,_eea =_fffd (_gada ,_gadf );if _eea !=nil {return nil ,_b .Wrap (_eea ,_ffgc ,"");};if _eea =_gada .RasterOperation (0,0,_gadf .Width ,_gadf .Height ,PixNotSrcAndDst ,_fegag ,0,0);_eea !=nil {return nil ,_b .Wrap (_eea ,_ffgc ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _gada ,nil ;};func (_febdc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_aef *Boxes ,_cgda error ){const _gdfbg ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _febdc ==nil {return nil ,_b .Error (_gdfbg ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_b .Error (_gdfbg ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _aef ,_cgda =_febdc .connComponentsBB (connectivity );_cgda !=nil {return nil ,_b .Wrap (_cgda ,_gdfbg ,"");};}else {if _aef ,_cgda =_febdc .connComponentsBitmapsBB (bms ,connectivity );_cgda !=nil {return nil ,_b .Wrap (_cgda ,_gdfbg ,"");};};return _aef ,nil ;};func _bfbc (_abac *Bitmap ,_egdd ,_efcd ,_adcaa ,_ecbc int ,_edaa RasterOperator ){if _egdd < 0{_adcaa +=_egdd ;_egdd =0;};_daag :=_egdd +_adcaa -_abac .Width ;if _daag > 0{_adcaa -=_daag ;};if _efcd < 0{_ecbc +=_efcd ;_efcd =0;};_dfdg :=_efcd +_ecbc -_abac .Height ;if _dfdg > 0{_ecbc -=_dfdg ;};if _adcaa <=0||_ecbc <=0{return ;};if (_egdd &7)==0{_cfbg (_abac ,_egdd ,_efcd ,_adcaa ,_ecbc ,_edaa );}else {_fbge (_abac ,_egdd ,_efcd ,_adcaa ,_ecbc ,_edaa );};};